// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏ callback query

import { handleCallbackQuery } from './src/handlers/telegram.js';

// –ú–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const mockEnv = {
  CLOUDFLARE_ACCOUNT_ID: 'test-account-id',
  CLOUDFLARE_AI_TOKEN: 'test-token',
  __awaiting_ai_question: {}
};

// –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π Telegram API
global.sendMessage = async (chatId, text, env) => {
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId}: ${text}`);
  return { ok: true };
};

global.sendMessageWithKeyboard = async (chatId, text, keyboard, env) => {
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ —á–∞—Ç ${chatId}: ${text}`);
  console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', JSON.stringify(keyboard, null, 2));
  return { ok: true };
};

global.editMessage = async (chatId, messageId, text, keyboard, env) => {
  console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≤ —á–∞—Ç–µ ${chatId}: ${text}`);
  return { ok: true };
};

global.answerCallbackQuery = async (callbackQueryId, env) => {
  console.log(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ callback query: ${callbackQueryId}`);
  return { ok: true };
};

console.log('üîò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ callback query
const testCallbacks = [
  {
    name: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    data: 'main_menu',
    description: '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
  },
  {
    name: '–û–±—É—á–µ–Ω–∏–µ',
    data: 'learning_start',
    description: '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è'
  },
  {
    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
    data: 'daily_challenges',
    description: '–ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π'
  },
  {
    name: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
    data: 'search_by_name',
    description: '–ü–æ–∏—Å–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'
  },
  {
    name: '–í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏',
    data: 'show_all_wines',
    description: '–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤'
  },
  {
    name: '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
    data: 'refresh_data',
    description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets'
  },
  {
    name: '–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò',
    data: 'ask_ai',
    description: '–ó–∞–ø—Ä–æ—Å –∫ –ò–ò'
  },
  {
    name: '–ú–µ–Ω—é',
    data: 'section_menu',
    description: '–†–∞–∑–¥–µ–ª –º–µ–Ω—é'
  },
  {
    name: '–ê–ª–∫–æ–≥–æ–ª—å',
    data: 'section_alcohol',
    description: '–†–∞–∑–¥–µ–ª –∞–ª–∫–æ–≥–æ–ª—è'
  }
];

// –ú–æ–∫ callback query –æ–±—ä–µ–∫—Ç–∞
const mockCallbackQuery = {
  id: 'test_callback_id',
  message: {
    chat: { id: 123456789 },
    message_id: 1
  },
  data: ''
};

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π callback
for (const testCallback of testCallbacks) {
  console.log(`üß™ –¢–µ—Å—Ç: ${testCallback.name}`);
  console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${testCallback.description}`);
  console.log(`üîò Callback data: ${testCallback.data}`);
  
  try {
    mockCallbackQuery.data = testCallback.data;
    await handleCallbackQuery(mockCallbackQuery, mockEnv);
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:');
    console.log('–û—à–∏–±–∫–∞:', error.message);
    console.log('–°—Ç–µ–∫:', error.stack);
    console.log('');
  }
}

console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
console.log('- –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏');
console.log('- –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback query');
console.log('- –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API');
console.log('- –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Telegram)');

console.log('\nüîß –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç:');
console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Cloudflare Dashboard');
console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç Telegram');
console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'); 
// src/admin-bot.js
// –ê–¥–º–∏–Ω-–±–æ—Ç –¥–ª—è Telegram Wine Bot

import { CommandsHandler } from './admin/handlers/commands.js';
import { TelegramHandler } from './admin/handlers/telegram.js';

// –ö–ª—é—á –¥–ª—è KV
const KV_AUTH_KEY = 'admin_authorized_ids';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ KV
async function isAuthorized(chatId, env) {
  const kv = env.WINE_CACHE;
  const idsRaw = await kv.get(KV_AUTH_KEY);
  if (!idsRaw) return false;
  try {
    const ids = JSON.parse(idsRaw);
    return ids.includes(chatId);
  } catch {
    return false;
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ chatId –≤ KV
async function authorizeUser(chatId, env) {
  const kv = env.WINE_CACHE;
  let ids = [];
  const idsRaw = await kv.get(KV_AUTH_KEY);
  if (idsRaw) {
    try { ids = JSON.parse(idsRaw); } catch {}
  }
  if (!ids.includes(chatId)) {
    ids.push(chatId);
    await kv.put(KV_AUTH_KEY, JSON.stringify(ids));
  }
}

// –û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (in-memory, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ worker)
const awaitingPassword = new Set();

// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è
const passwordAttempts = new Map(); // chatId -> { count, firstAttemptTs }
const MAX_ATTEMPTS = 5;
const BLOCK_TIME_MS = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

function isPasswordBlocked(chatId) {
  const entry = passwordAttempts.get(chatId);
  if (!entry) return false;
  if (entry.count < MAX_ATTEMPTS) return false;
  const now = Date.now();
  if (now - entry.firstAttemptTs < BLOCK_TIME_MS) return true;
  // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  passwordAttempts.delete(chatId);
  return false;
}

function recordPasswordAttempt(chatId) {
  const now = Date.now();
  let entry = passwordAttempts.get(chatId);
  if (!entry) {
    entry = { count: 1, firstAttemptTs: now };
  } else {
    if (now - entry.firstAttemptTs > BLOCK_TIME_MS) {
      // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
      entry = { count: 1, firstAttemptTs: now };
    } else {
      entry.count++;
    }
  }
  passwordAttempts.set(chatId, entry);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async function handleAdminMessage(message, env) {
  const chatId = message.chat.id;
  const text = message.text || '';
  const telegram = new TelegramHandler(env);

  console.log(`[ADMIN BOT] Received message from ${chatId}: ${text}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!(await isAuthorized(chatId, env))) {
    if (!awaitingPassword.has(chatId)) {
      // –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
      awaitingPassword.add(chatId);
      await telegram.sendMessage(chatId, 'üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:');
      return;
    } else {
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è
      if (isPasswordBlocked(chatId)) {
        await telegram.sendMessage(chatId, '‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.');
        return;
      }
      // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
      if (text.trim() === env.ADMIN_BOT_PASSWORD) {
        await authorizeUser(chatId, env); // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π
        awaitingPassword.delete(chatId);
        passwordAttempts.delete(chatId); // —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º
        try { await telegram.deleteMessage(chatId, message.message_id); } catch (e) { console.error('Failed to delete password message:', e); }
        await telegram.sendMessage(chatId, '‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        const commands = new CommandsHandler(env);
        await commands.handleStart(chatId);
        return;
      } else {
        recordPasswordAttempt(chatId);
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º
        try { await telegram.deleteMessage(chatId, message.message_id); } catch (e) { console.error('Failed to delete password message:', e); }
        const entry = passwordAttempts.get(chatId);
        const attemptsLeft = Math.max(0, MAX_ATTEMPTS - (entry ? entry.count : 0));
        if (attemptsLeft === 0) {
          await telegram.sendMessage(chatId, '‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.');
        } else {
          await telegram.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${attemptsLeft}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:`);
        }
        return;
      }
    }
  }

  try {
    const commands = new CommandsHandler(env);
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /broadcast)
    const handled = await commands.handleMessage(chatId, text);
    if (handled) return;
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text === '/start' || text === '/help') {
      await commands.handleStart(chatId);
    } else if (text === '/analytics') {
      await commands.handleAnalytics(chatId);
    } else if (text === '/feedback') {
      await commands.handleFeedback(chatId);
    } else if (text === '/users') {
      await commands.handleUsers(chatId);
    } else if (text.startsWith('/user_info')) {
      const args = text.split(' ').slice(1);
      await commands.handleUserInfo(chatId, args);
    } else if (text.startsWith('/search_user')) {
      const args = text.split(' ').slice(1);
      await commands.handleSearchUser(chatId, args);
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await commands.handleStart(chatId);
    }
  } catch (error) {
    console.error('[ADMIN BOT] Error handling message:', error);
    await telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
async function handleCallbackQuery(callbackQuery, env) {
  const chatId = callbackQuery.from.id;
  const callbackData = callbackQuery.data;
  const messageId = callbackQuery.message?.message_id;
  const telegram = new TelegramHandler(env);

  console.log(`[ADMIN BOT] Received callback from ${chatId}: ${callbackData}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!(await isAuthorized(chatId, env))) {
    if (!awaitingPassword.has(chatId)) {
      awaitingPassword.add(chatId);
      await telegram.sendMessage(chatId, 'üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:');
      return;
    } else {
      await telegram.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!');
      return;
    }
  }

  try {
    const commands = new CommandsHandler(env);
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
    await commands.handleCallbackQuery(chatId, callbackData, messageId);
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await telegram.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('[ADMIN BOT] Error handling callback query:', error);
    await telegram.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
export async function handleAdminWebhook(request, env) {
  try {
    console.log('[ADMIN BOT] Received webhook request');
    
    const update = await request.json();
    console.log('[ADMIN BOT] Update:', JSON.stringify(update, null, 2));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      console.log('[ADMIN BOT] Processing message');
      await handleAdminMessage(update.message, env);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query
    if (update.callback_query) {
      console.log('[ADMIN BOT] Processing callback query');
      await handleCallbackQuery(update.callback_query, env);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (update.edited_message) {
      console.log('[ADMIN BOT] Ignoring edited message');
    }
    
    if (update.channel_post) {
      console.log('[ADMIN BOT] Ignoring channel post');
    }
    
    if (update.edited_channel_post) {
      console.log('[ADMIN BOT] Ignoring edited channel post');
    }
    
    if (update.inline_query) {
      console.log('[ADMIN BOT] Ignoring inline query');
    }
    
    if (update.chosen_inline_result) {
      console.log('[ADMIN BOT] Ignoring chosen inline result');
    }
    
    if (update.shipping_query) {
      console.log('[ADMIN BOT] Ignoring shipping query');
    }
    
    if (update.pre_checkout_query) {
      console.log('[ADMIN BOT] Ignoring pre checkout query');
    }
    
    if (update.poll) {
      console.log('[ADMIN BOT] Ignoring poll');
    }
    
    if (update.poll_answer) {
      console.log('[ADMIN BOT] Ignoring poll answer');
    }
    
    if (update.my_chat_member) {
      console.log('[ADMIN BOT] Ignoring my chat member');
    }
    
    if (update.chat_member) {
      console.log('[ADMIN BOT] Ignoring chat member');
    }
    
    if (update.chat_join_request) {
      console.log('[ADMIN BOT] Ignoring chat join request');
    }
    
    console.log('[ADMIN BOT] Webhook processed successfully');
    return new Response('OK', { status: 200 });
    
  } catch (error) {
    console.error('[ADMIN BOT] Error in webhook handler:', error);
    return new Response('ERROR', { status: 500 });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Cloudflare Workers
export default { fetch: handleAdminWebhook };

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è cron (Cloudflare Workers)
export async function scheduled(event, env, ctx) {
  console.log('[ADMIN BOT] scheduled() triggered by cron');
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
} 
// src/admin/handlers/users.js
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

import { DatabaseManager } from '../../handlers/database.js';
import { TelegramHandler } from './telegram.js';

export class UsersHandler {
  constructor(env) {
    this.env = env;
    this.database = new DatabaseManager(env);
    this.telegram = new TelegramHandler(env);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  formatUserName(user) {
    if (user.first_name && user.last_name) {
      return `${user.first_name} ${user.last_name}`;
    } else if (user.first_name) {
      return user.first_name;
    } else if (user.username) {
      return `@${user.username}`;
    } else {
      return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${user.chat_id}`;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUsersList(limit = 20, offset = 0) {
    try {
      const db = this.database.db;
      
      const users = await db.prepare(`
        SELECT 
          chat_id,
          username,
          first_name,
          last_name,
          created_at,
          last_activity,
          total_score,
          total_questions,
          total_correct,
          experience_points,
          difficulty_level,
          learning_streak,
          consecutive_days
        FROM users
        ORDER BY last_activity DESC
        LIMIT ? OFFSET ?
      `).bind(limit, offset).all();

      return {
        success: true,
        data: users.results
      };
    } catch (error) {
      console.error('[USERS] Error getting users list:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getUserInfo(chatId) {
    try {
      const db = this.database.db;
      
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const user = await db.prepare(`
        SELECT 
          chat_id,
          username,
          first_name,
          last_name,
          created_at,
          last_activity,
          total_score,
          total_questions,
          total_correct,
          experience_points,
          difficulty_level,
          learning_streak,
          consecutive_days,
          motivation_level,
          preferred_learning_time,
          learning_style
        FROM users
        WHERE chat_id = ?
      `).bind(chatId).first();

      if (!user) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoryStats = await db.prepare(`
        SELECT 
          category,
          total_questions,
          correct_answers,
          ROUND(CAST(correct_answers AS FLOAT) / total_questions * 100, 1) as accuracy
        FROM category_stats
        WHERE chat_id = ?
        ORDER BY total_questions DESC
      `).bind(chatId).all();

      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      const recentSessions = await db.prepare(`
        SELECT 
          id,
          session_type,
          start_time,
          end_time,
          total_questions,
          correct_answers,
          score,
          experience_gained
        FROM learning_sessions
        WHERE chat_id = ?
        ORDER BY start_time DESC
        LIMIT 10
      `).bind(chatId).all();

      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievements = await db.prepare(`
        SELECT 
          achievement_type,
          achievement_name,
          description,
          unlocked_at,
          points
        FROM achievements
        WHERE chat_id = ?
        ORDER BY unlocked_at DESC
        LIMIT 10
      `).bind(chatId).all();

      return {
        success: true,
        data: {
          user,
          categoryStats: categoryStats.results,
          recentSessions: recentSessions.results,
          achievements: achievements.results
        }
      };
    } catch (error) {
      console.error('[USERS] Error getting user info:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async searchUsers(query) {
    try {
      const db = this.database.db;
      
      const users = await db.prepare(`
        SELECT 
          chat_id,
          username,
          first_name,
          last_name,
          created_at,
          last_activity,
          total_score,
          total_questions,
          total_correct
        FROM users
        WHERE username LIKE ? OR first_name LIKE ? OR last_name LIKE ?
        ORDER BY last_activity DESC
        LIMIT 20
      `).bind(`%${query}%`, `%${query}%`, `%${query}%`).all();

      return {
        success: true,
        data: users.results
      };
    } catch (error) {
      console.error('[USERS] Error searching users:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getInactiveUsers(days = 7) {
    try {
      const db = this.database.db;
      
      const users = await db.prepare(`
        SELECT 
          chat_id,
          username,
          first_name,
          last_name,
          created_at,
          last_activity,
          total_score,
          total_questions,
          total_correct
        FROM users
        WHERE last_activity < datetime('now', '-? days')
        ORDER BY last_activity ASC
        LIMIT 50
      `).bind(days).all();

      return {
        success: true,
        data: users.results
      };
    } catch (error) {
      console.error('[USERS] Error getting inactive users:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getTopUsers(limit = 10, sortBy = 'total_score') {
    try {
      const db = this.database.db;
      
      let orderBy;
      switch (sortBy) {
        case 'total_score':
          orderBy = 'total_score DESC';
          break;
        case 'total_questions':
          orderBy = 'total_questions DESC';
          break;
        case 'experience_points':
          orderBy = 'experience_points DESC';
          break;
        case 'accuracy':
          orderBy = 'CAST(total_correct AS FLOAT) / total_questions DESC';
          break;
        default:
          orderBy = 'total_score DESC';
      }

      const users = await db.prepare(`
        SELECT 
          chat_id,
          username,
          first_name,
          last_name,
          total_score,
          total_questions,
          total_correct,
          experience_points,
          ROUND(CAST(total_correct AS FLOAT) / total_questions * 100, 1) as accuracy
        FROM users
        WHERE total_questions > 0
        ORDER BY ${orderBy}
        LIMIT ?
      `).bind(limit).all();

      return {
        success: true,
        data: users.results
      };
    } catch (error) {
      console.error('[USERS] Error getting top users:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Telegram
  formatUsersList(users) {
    let message = 'üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n';
    
    users.forEach((user, index) => {
      const displayName = this.formatUserName(user);
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –¥–ª—è Markdown
      const safeDisplayName = this.telegram.escapeUserText(displayName);
      const accuracy = user.total_questions > 0 ? 
        Math.round((user.total_correct / user.total_questions) * 100) : 0;
      const lastActivity = new Date(user.last_activity).toLocaleDateString('ru-RU');
      
      message += `${index + 1}. *${safeDisplayName}*\n`;
      message += `   –°—á–µ—Ç: ${user.total_score}, –í–æ–ø—Ä–æ—Å–æ–≤: ${user.total_questions}\n`;
      message += `   –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%, –û–ø—ã—Ç: ${user.experience_points}\n`;
      message += `   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}\n\n`;
    });

    return message;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  formatUserInfo(userData) {
    const { user, categoryStats, recentSessions, achievements } = userData;
    
    let message = `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n`;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const displayName = this.formatUserName(user);
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –¥–ª—è Markdown
    const safeDisplayName = this.telegram.escapeUserText(displayName);
    const accuracy = user.total_questions > 0 ? 
      Math.round((user.total_correct / user.total_questions) * 100) : 0;
    
    message += `*${safeDisplayName}*\n`;
    message += `ID: ${user.chat_id}\n`;
    message += `–°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n`;
    message += `–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(user.last_activity).toLocaleDateString('ru-RU')}\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: ${user.total_score}\n`;
    message += `‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: ${user.total_questions}\n`;
    message += `‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${user.total_correct}\n`;
    message += `‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%\n`;
    message += `‚Ä¢ –û–ø—ã—Ç: ${user.experience_points}\n`;
    message += `‚Ä¢ –°–µ—Ä–∏—è: ${user.learning_streak}\n`;
    message += `‚Ä¢ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${user.consecutive_days}\n`;
    message += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${user.difficulty_level}\n\n`;

    // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categoryStats && categoryStats.length > 0) {
      message += `üèÜ *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n`;
      categoryStats.slice(0, 5).forEach(cat => {
        message += `‚Ä¢ ${cat.category}: ${cat.total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤, ${cat.accuracy}% —Ç–æ—á–Ω–æ—Å—Ç—å\n`;
      });
      message += '\n';
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if (recentSessions && recentSessions.length > 0) {
      message += `üìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:*\n`;
      recentSessions.slice(0, 3).forEach(session => {
        const date = new Date(session.start_time).toLocaleDateString('ru-RU');
        const accuracy = session.total_questions > 0 ? 
          Math.round((session.correct_answers / session.total_questions) * 100) : 0;
        message += `‚Ä¢ ${session.session_type} (${date}): ${session.total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤, ${accuracy}% —Ç–æ—á–Ω–æ—Å—Ç—å\n`;
      });
      message += '\n';
    }

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (achievements && achievements.length > 0) {
      message += `üèÖ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
      achievements.slice(0, 5).forEach(achievement => {
        const date = new Date(achievement.unlocked_at).toLocaleDateString('ru-RU');
        message += `‚Ä¢ ${achievement.achievement_name} (${date})\n`;
      });
    }

    return message;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  formatTopUsers(users, sortBy = 'total_score') {
    let message = 'üèÜ *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n';
    
    const sortNames = {
      'total_score': '–ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É',
      'total_questions': '–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤',
      'experience_points': '–ø–æ –æ–ø—ã—Ç—É',
      'accuracy': '–ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏'
    };
    
    message += `–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${sortNames[sortBy] || '–ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É'}\n\n`;
    
    users.forEach((user, index) => {
      const displayName = this.formatUserName(user);
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –¥–ª—è Markdown
      const safeDisplayName = this.telegram.escapeUserText(displayName);
      
      message += `${index + 1}. *${safeDisplayName}*\n`;
      message += `   –°—á–µ—Ç: ${user.total_score}, –í–æ–ø—Ä–æ—Å–æ–≤: ${user.total_questions}\n`;
      message += `   –¢–æ—á–Ω–æ—Å—Ç—å: ${user.accuracy}%, –û–ø—ã—Ç: ${user.experience_points}\n\n`;
    });

    return message;
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async blockUser(chatId) {
    try {
      const db = this.database.db;
      await db.prepare(`UPDATE users SET is_blocked = TRUE WHERE chat_id = ?`).bind(chatId).run();
      return { success: true };
    } catch (error) {
      console.error('[USERS] Error blocking user:', error);
      return { success: false, error: error.message };
    }
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async unblockUser(chatId) {
    try {
      const db = this.database.db;
      await db.prepare(`UPDATE users SET is_blocked = FALSE WHERE chat_id = ?`).bind(chatId).run();
      return { success: true };
    } catch (error) {
      console.error('[USERS] Error unblocking user:', error);
      return { success: false, error: error.message };
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async blockUsers(chatIds) {
    try {
      const db = this.database.db;
      for (const id of chatIds) {
        await db.prepare(`UPDATE users SET is_blocked = TRUE WHERE chat_id = ?`).bind(id).run();
      }
      return { success: true };
    } catch (error) {
      console.error('[USERS] Error blocking users:', error);
      return { success: false, error: error.message };
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async unblockUsers(chatIds) {
    try {
      const db = this.database.db;
      for (const id of chatIds) {
        await db.prepare(`UPDATE users SET is_blocked = FALSE WHERE chat_id = ?`).bind(id).run();
      }
      return { success: true };
    } catch (error) {
      console.error('[USERS] Error unblocking users:', error);
      return { success: false, error: error.message };
    }
  }

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async resetUserProgress(chatId) {
    try {
      const db = this.database.db;
      // –°–±—Ä–æ—Å–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      await db.prepare(`UPDATE users SET total_score = 0, total_questions = 0, total_correct = 0, learning_streak = 0, max_streak = 0, experience_points = 0, consecutive_days = 0, last_learning_date = NULL WHERE chat_id = ?`).bind(chatId).run();
      // –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      await db.prepare(`DELETE FROM category_stats WHERE chat_id = ?`).bind(chatId).run();
      // –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
      await db.prepare(`DELETE FROM question_type_stats WHERE chat_id = ?`).bind(chatId).run();
      // –°–±—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await db.prepare(`DELETE FROM achievements WHERE chat_id = ?`).bind(chatId).run();
      // –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏–∏
      await db.prepare(`DELETE FROM learning_sessions WHERE chat_id = ?`).bind(chatId).run();
      // –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
      await db.prepare(`DELETE FROM user_answers WHERE chat_id = ?`).bind(chatId).run();
      // –°–±—Ä–æ—Å–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
      await db.prepare(`DELETE FROM daily_challenges WHERE chat_id = ?`).bind(chatId).run();
      return { success: true };
    } catch (error) {
      console.error('[USERS] Error resetting user progress:', error);
      return { success: false, error: error.message };
    }
  }

  // –ú–∞—Å—Å–æ–≤—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async resetUsersProgress(chatIds) {
    try {
      for (const id of chatIds) {
        await this.resetUserProgress(id);
      }
      return { success: true };
    } catch (error) {
      console.error('[USERS] Error resetting users progress:', error);
      return { success: false, error: error.message };
    }
  }
} 
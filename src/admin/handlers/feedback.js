// src/admin/handlers/feedback.js
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

import { DatabaseManager } from '../../handlers/database.js';
import { TelegramHandler } from './telegram.js';

export class FeedbackHandler {
  constructor(env) {
    this.env = env;
    this.database = new DatabaseManager(env);
    this.telegram = new TelegramHandler(env);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getFeedbackStats() {
    try {
      const db = this.database.db;
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
      const feedbackStats = await db.prepare(`
        SELECT 
          COUNT(*) as total_feedback,
          SUM(CASE WHEN feedback_type = 'like' THEN 1 ELSE 0 END) as likes,
          SUM(CASE WHEN feedback_type = 'hard' THEN 1 ELSE 0 END) as hard_questions,
          SUM(CASE WHEN feedback_type = 'easy' THEN 1 ELSE 0 END) as easy_questions,
          SUM(CASE WHEN feedback_type = 'comment' THEN 1 ELSE 0 END) as comments
        FROM user_feedback
        WHERE created_at >= datetime('now', '-30 days')
      `).first();

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
      const recentFeedback = await db.prepare(`
        SELECT 
          uf.id,
          uf.chat_id,
          u.username,
          u.first_name,
          u.last_name,
          uf.feedback_type,
          uf.feedback_text,
          uf.created_at,
          uf.session_type,
          uf.question_count,
          uf.correct_answers
        FROM user_feedback uf
        LEFT JOIN users u ON uf.chat_id = u.chat_id
        ORDER BY uf.created_at DESC
        LIMIT 10
      `).all();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Å–µ—Å—Å–∏–π
      const sessionStats = await db.prepare(`
        SELECT 
          session_type,
          COUNT(*) as total_sessions,
          AVG(CAST(correct_answers AS FLOAT) / question_count * 100) as avg_accuracy,
          AVG(question_count) as avg_questions
        FROM user_feedback
        WHERE created_at >= datetime('now', '-30 days')
        GROUP BY session_type
      `).all();

      return {
        success: true,
        data: {
          stats: feedbackStats,
          recent: recentFeedback.results,
          sessions: sessionStats.results
        }
      };
    } catch (error) {
      console.error('[FEEDBACK] Error getting feedback stats:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
  async getDetailedFeedback(limit = 20, offset = 0) {
    try {
      const db = this.database.db;
      
      const feedback = await db.prepare(`
        SELECT 
          uf.id,
          uf.chat_id,
          u.username,
          u.first_name,
          u.last_name,
          uf.feedback_type,
          uf.feedback_text,
          uf.created_at,
          uf.session_type,
          uf.question_count,
          uf.correct_answers,
          uf.session_duration_minutes
        FROM user_feedback uf
        LEFT JOIN users u ON uf.chat_id = u.chat_id
        ORDER BY uf.created_at DESC
        LIMIT ? OFFSET ?
      `).bind(limit, offset).all();

      return {
        success: true,
        data: feedback.results
      };
    } catch (error) {
      console.error('[FEEDBACK] Error getting detailed feedback:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–∏–ø—É
  async getFeedbackByType(feedbackType) {
    try {
      const db = this.database.db;
      
      const feedback = await db.prepare(`
        SELECT 
          uf.id,
          uf.chat_id,
          u.username,
          u.first_name,
          u.last_name,
          uf.feedback_type,
          uf.feedback_text,
          uf.created_at,
          uf.session_type,
          uf.question_count,
          uf.correct_answers
        FROM user_feedback uf
        LEFT JOIN users u ON uf.chat_id = u.chat_id
        WHERE uf.feedback_type = ?
        ORDER BY uf.created_at DESC
        LIMIT 20
      `).bind(feedbackType).all();

      return {
        success: true,
        data: feedback.results
      };
    } catch (error) {
      console.error('[FEEDBACK] Error getting feedback by type:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
  async markFeedbackProcessed(feedbackId) {
    try {
      const db = this.database.db;
      await db.prepare(`UPDATE user_feedback SET is_processed = TRUE WHERE id = ?`).bind(feedbackId).run();
      return { success: true };
    } catch (error) {
      console.error('[FEEDBACK] Error marking feedback processed:', error);
      return { success: false, error: error.message };
    }
  }

  // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
  async replyToFeedback(feedbackId, text) {
    try {
      const db = this.database.db;
      const feedback = await db.prepare(`SELECT chat_id FROM user_feedback WHERE id = ?`).bind(feedbackId).first();
      if (!feedback || !feedback.chat_id) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∑—ã–≤–∞' };
      }
      await this.telegram.sendMessage(feedback.chat_id, text);
      return { success: true };
    } catch (error) {
      console.error('[FEEDBACK] Error replying to feedback:', error);
      return { success: false, error: error.message };
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
  async markFeedbacksProcessed(feedbackIds) {
    try {
      const db = this.database.db;
      for (const id of feedbackIds) {
        await db.prepare(`UPDATE user_feedback SET is_processed = TRUE WHERE id = ?`).bind(id).run();
      }
      return { success: true };
    } catch (error) {
      console.error('[FEEDBACK] Error marking feedbacks processed:', error);
      return { success: false, error: error.message };
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è Telegram
  formatFeedbackStats(stats) {
    const { stats: feedbackStats, recent, sessions } = stats;
    
    let message = 'üìù <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ 30 –¥–Ω–µ–π</b>\n\n';
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${feedbackStats.total_feedback || 0}\n`;
    message += `‚Ä¢ üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: ${feedbackStats.likes || 0}\n`;
    message += `‚Ä¢ ü§î –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ${feedbackStats.hard_questions || 0}\n`;
    message += `‚Ä¢ üò¥ –°–ª–∏—à–∫–æ–º –ª–µ–≥–∫–æ: ${feedbackStats.easy_questions || 0}\n`;
    message += `‚Ä¢ ‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${feedbackStats.comments || 0}\n\n`;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º
    if (sessions && sessions.length > 0) {
      message += `üìà <b>–ü–æ —Ç–∏–ø–∞–º —Å–µ—Å—Å–∏–π:</b>\n`;
      sessions.forEach(session => {
        const accuracy = session.avg_accuracy ? Math.round(session.avg_accuracy) : 0;
        message += `‚Ä¢ ${session.session_type}: ${session.total_sessions} —Å–µ—Å—Å–∏–π, ${accuracy}% —Ç–æ—á–Ω–æ—Å—Ç—å\n`;
      });
      message += '\n';
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
    if (recent && recent.length > 0) {
      message += `üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n`;
      recent.slice(0, 5).forEach((feedback, index) => {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let username = '';
        if (feedback.username) {
          username = `@${feedback.username}`;
        } else if (feedback.first_name && feedback.last_name) {
          username = `${feedback.first_name} ${feedback.last_name}`;
        } else if (feedback.first_name) {
          username = feedback.first_name;
        } else {
          username = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${feedback.chat_id}`;
        }
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log(`[DEBUG] Feedback ${index}:`, {
          chat_id: feedback.chat_id,
          username: feedback.username,
          first_name: feedback.first_name,
          last_name: feedback.last_name,
          final_username: username
        });
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –¥–ª—è Markdown
        const safeUsername = this.telegram.escapeUserText(username);
        const type = this.getFeedbackTypeEmoji(feedback.feedback_type);
        const date = new Date(feedback.created_at).toLocaleDateString('ru-RU');
        
        const line = `${type} ${safeUsername} \\(${date}\\)\n`;
        console.log(`[DEBUG] Line ${index}:`, line);
        message += line;
        
        if (feedback.feedback_text) {
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–∞
          const safeText = this.telegram.escapeUserText(feedback.feedback_text).substring(0, 50);
          const feedbackLine = `   "${safeText}..."\n`;
          console.log(`[DEBUG] Feedback text ${index}:`, feedbackLine);
          message += feedbackLine;
        }
      });
    }

    console.log(`[DEBUG] Final message length:`, message.length);
    console.log(`[DEBUG] Final message:`, message);
    
    return message;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–∑—ã–≤–∞
  getFeedbackTypeEmoji(type) {
    const emojis = {
      'like': 'üëç',
      'hard': 'ü§î',
      'easy': 'üò¥',
      'comment': '‚úçÔ∏è'
    };
    return emojis[type] || 'üìù';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
  formatDetailedFeedback(feedback) {
    let message = 'üìù *–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã*\n\n';
    
    feedback.forEach(item => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let username = '';
      if (item.username) {
        username = `@${item.username}`;
      } else if (item.first_name && item.last_name) {
        username = `${item.first_name} ${item.last_name}`;
      } else if (item.first_name) {
        username = item.first_name;
      } else {
        username = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${item.chat_id}`;
      }
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –¥–ª—è Markdown
      const safeUsername = this.telegram.escapeUserText(username);
      const type = this.getFeedbackTypeEmoji(item.feedback_type);
      const date = new Date(item.created_at).toLocaleDateString('ru-RU');
      const time = new Date(item.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      
      message += `${type} *${safeUsername}* (${date} ${time})\n`;
      message += `–¢–∏–ø: ${item.feedback_type}\n`;
      message += `–°–µ—Å—Å–∏—è: ${item.session_type}\n`;
      message += `–í–æ–ø—Ä–æ—Å–æ–≤: ${item.question_count}, –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${item.correct_answers}\n`;
      
      if (item.feedback_text) {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–∞
        const safeText = this.telegram.escapeUserText(item.feedback_text);
        message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${safeText}"\n`;
      }
      message += '\n';
    });

    return message;
  }
} 
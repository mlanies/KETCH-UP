// src/admin/handlers/analytics.js
// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è

import { DatabaseManager } from '../../handlers/database.js';
import { TelegramHandler } from './telegram.js';

export class AnalyticsHandler {
  constructor(env) {
    this.env = env;
    this.database = new DatabaseManager(env);
    this.telegram = new TelegramHandler(env);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  async getGeneralAnalytics() {
    try {
      const db = this.database.db;
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userStats = await db.prepare(`
        SELECT 
          COUNT(*) as total_users,
          COUNT(CASE WHEN last_activity >= datetime('now', '-7 days') THEN 1 END) as active_7d,
          COUNT(CASE WHEN last_activity >= datetime('now', '-30 days') THEN 1 END) as active_30d,
          AVG(total_score) as avg_score,
          AVG(total_questions) as avg_questions,
          AVG(CAST(total_correct AS FLOAT) / total_questions * 100) as avg_accuracy
        FROM users
        WHERE total_questions > 0
      `).first();

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
      const sessionStats = await db.prepare(`
        SELECT 
          COUNT(*) as total_sessions,
          COUNT(CASE WHEN start_time >= datetime('now', '-7 days') THEN 1 END) as sessions_7d,
          COUNT(CASE WHEN start_time >= datetime('now', '-30 days') THEN 1 END) as sessions_30d,
          AVG(total_questions) as avg_questions_per_session,
          AVG(CAST(correct_answers AS FLOAT) / total_questions * 100) as avg_session_accuracy
        FROM learning_sessions
        WHERE total_questions > 0
      `).first();

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoryStats = await db.prepare(`
        SELECT 
          category,
          COUNT(*) as total_questions,
          SUM(CASE WHEN is_correct THEN 1 ELSE 0 END) as correct_answers,
          ROUND(CAST(SUM(CASE WHEN is_correct THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) * 100, 1) as accuracy
        FROM user_answers
        WHERE category IS NOT NULL
        GROUP BY category
        ORDER BY total_questions DESC
        LIMIT 10
      `).all();

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
      const questionTypeStats = await db.prepare(`
        SELECT 
          question_type,
          COUNT(*) as total_questions,
          SUM(CASE WHEN is_correct THEN 1 ELSE 0 END) as correct_answers,
          ROUND(CAST(SUM(CASE WHEN is_correct THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) * 100, 1) as accuracy
        FROM user_answers
        WHERE question_type IS NOT NULL
        GROUP BY question_type
        ORDER BY total_questions DESC
        LIMIT 10
      `).all();

      return {
        success: true,
        data: {
          users: userStats,
          sessions: sessionStats,
          categories: categoryStats.results,
          questionTypes: questionTypeStats.results
        }
      };
    } catch (error) {
      console.error('[ANALYTICS] Error getting general analytics:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  async getUserAnalytics() {
    try {
      const db = this.database.db;
      
      // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const topUsers = await db.prepare(`
        SELECT 
          u.chat_id,
          u.username,
          u.first_name,
          u.total_score,
          u.total_questions,
          u.total_correct,
          u.experience_points,
          u.learning_streak,
          ROUND(CAST(u.total_correct AS FLOAT) / u.total_questions * 100, 1) as accuracy,
          u.last_activity
        FROM users u
        WHERE u.total_questions > 0
        ORDER BY u.total_score DESC
        LIMIT 10
      `).all();

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      const difficultyStats = await db.prepare(`
        SELECT 
          difficulty_level,
          COUNT(*) as user_count,
          AVG(total_score) as avg_score,
          AVG(total_questions) as avg_questions,
          AVG(CAST(total_correct AS FLOAT) / total_questions * 100) as avg_accuracy
        FROM users
        WHERE total_questions > 0
        GROUP BY difficulty_level
      `).all();

      // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const newUsers = await db.prepare(`
        SELECT 
          COUNT(*) as new_users_30d,
          COUNT(CASE WHEN created_at >= datetime('now', '-7 days') THEN 1 END) as new_users_7d
        FROM users
        WHERE created_at >= datetime('now', '-30 days')
      `).first();

      return {
        success: true,
        data: {
          topUsers: topUsers.results,
          difficultyStats: difficultyStats.results,
          newUsers: newUsers
        }
      };
    } catch (error) {
      console.error('[ANALYTICS] Error getting user analytics:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  async getTimeAnalytics() {
    try {
      const db = this.database.db;
      
      // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
      const dailyActivity = await db.prepare(`
        SELECT 
          strftime('%w', start_time) as day_of_week,
          COUNT(*) as sessions_count,
          AVG(total_questions) as avg_questions,
          AVG(CAST(correct_answers AS FLOAT) / total_questions * 100) as avg_accuracy
        FROM learning_sessions
        WHERE start_time >= datetime('now', '-30 days')
        GROUP BY strftime('%w', start_time)
        ORDER BY day_of_week
      `).all();

      // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
      const hourlyActivity = await db.prepare(`
        SELECT 
          strftime('%H', start_time) as hour,
          COUNT(*) as sessions_count
        FROM learning_sessions
        WHERE start_time >= datetime('now', '-30 days')
        GROUP BY strftime('%H', start_time)
        ORDER BY hour
      `).all();

      // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
      const sessionDuration = await db.prepare(`
        SELECT 
          AVG(CAST((julianday(end_time) - julianday(start_time)) * 24 * 60 AS INTEGER)) as avg_duration_minutes,
          MIN(CAST((julianday(end_time) - julianday(start_time)) * 24 * 60 AS INTEGER)) as min_duration_minutes,
          MAX(CAST((julianday(end_time) - julianday(start_time)) * 24 * 60 AS INTEGER)) as max_duration_minutes
        FROM learning_sessions
        WHERE end_time IS NOT NULL
        AND start_time >= datetime('now', '-30 days')
      `).first();

      return {
        success: true,
        data: {
          dailyActivity: dailyActivity.results,
          hourlyActivity: hourlyActivity.results,
          sessionDuration: sessionDuration
        }
      };
    } catch (error) {
      console.error('[ANALYTICS] Error getting time analytics:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Telegram
  formatGeneralAnalytics(analytics) {
    const { users, sessions, categories, questionTypes } = analytics;
    
    let message = 'üìä *–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    message += `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ: ${users.total_users || 0}\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: ${users.active_7d || 0}\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: ${users.active_30d || 0}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç: ${Math.round(users.avg_score || 0)}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${Math.round(users.avg_accuracy || 0)}%\n\n`;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
    message += `üìà *–°–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${sessions.total_sessions || 0}\n`;
    message += `‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: ${sessions.sessions_7d || 0}\n`;
    message += `‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: ${sessions.sessions_30d || 0}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤–æ–ø—Ä–æ—Å–æ–≤/—Å–µ—Å—Å–∏—è: ${Math.round(sessions.avg_questions_per_session || 0)}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π: ${Math.round(sessions.avg_session_accuracy || 0)}%\n\n`;

    // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categories && categories.length > 0) {
      message += `üèÜ *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n`;
      categories.slice(0, 5).forEach(cat => {
        message += `‚Ä¢ ${cat.category}: ${cat.total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤, ${cat.accuracy}% —Ç–æ—á–Ω–æ—Å—Ç—å\n`;
      });
      message += '\n';
    }

    return message;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  formatUserAnalytics(analytics) {
    const { topUsers, difficultyStats, newUsers } = analytics;
    
    let message = 'üë• *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n';
    
    // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    message += `üÜï *–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n`;
    message += `‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: ${newUsers.new_users_7d || 0}\n`;
    message += `‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: ${newUsers.new_users_30d || 0}\n\n`;

    // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (topUsers && topUsers.length > 0) {
      message += `üèÜ *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n`;
      topUsers.slice(0, 5).forEach((user, index) => {
        const username = user.username || user.first_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${user.chat_id}`;
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –¥–ª—è Markdown
        const safeUsername = this.telegram.escapeUserText(username);
        message += `${index + 1}. ${safeUsername}\n`;
        message += `   –°—á–µ—Ç: ${user.total_score}, –í–æ–ø—Ä–æ—Å–æ–≤: ${user.total_questions}\n`;
        message += `   –¢–æ—á–Ω–æ—Å—Ç—å: ${user.accuracy}%, –û–ø—ã—Ç: ${user.experience_points}\n\n`;
      });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    if (difficultyStats && difficultyStats.length > 0) {
      message += `üìä *–ü–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:*\n`;
      difficultyStats.forEach(level => {
        message += `‚Ä¢ ${level.difficulty_level}: ${level.user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
        message += `  –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç: ${Math.round(level.avg_score || 0)}\n`;
        message += `  –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${Math.round(level.avg_accuracy || 0)}%\n\n`;
      });
    }

    return message;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  formatTimeAnalytics(analytics) {
    const { dailyActivity, hourlyActivity, sessionDuration } = analytics;
    
    let message = '‚è∞ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n';
    
    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
    message += `‚è±Ô∏è *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π:*\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è: ${Math.round(sessionDuration.avg_duration_minutes || 0)} –º–∏–Ω\n`;
    message += `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${Math.round(sessionDuration.min_duration_minutes || 0)} –º–∏–Ω\n`;
    message += `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${Math.round(sessionDuration.max_duration_minutes || 0)} –º–∏–Ω\n\n`;

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    if (dailyActivity && dailyActivity.length > 0) {
      const dayNames = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
      message += `üìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:*\n`;
      dailyActivity.forEach(day => {
        const dayName = dayNames[parseInt(day.day_of_week)];
        message += `‚Ä¢ ${dayName}: ${day.sessions_count} —Å–µ—Å—Å–∏–π\n`;
      });
      message += '\n';
    }

    // –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
    if (hourlyActivity && hourlyActivity.length > 0) {
      const peakHours = hourlyActivity
        .sort((a, b) => b.sessions_count - a.sessions_count)
        .slice(0, 3);
      
      message += `üïê *–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã:*\n`;
      peakHours.forEach(hour => {
        message += `‚Ä¢ ${hour.hour}:00 - ${hour.sessions_count} —Å–µ—Å—Å–∏–π\n`;
      });
    }

    return message;
  }
} 
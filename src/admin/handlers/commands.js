// src/admin/handlers/commands.js
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–±–æ—Ç–∞

import { FeedbackHandler } from './feedback.js';
import { AnalyticsHandler } from './analytics.js';
import { UsersHandler } from './users.js';
import { TelegramHandler } from './telegram.js';

// Cloudflare KV state helpers
async function getUserState(chatId, env) {
  const raw = await env.WINE_CACHE.get(`admin_state_${chatId}`);
  return raw ? JSON.parse(raw) : null;
}
async function setUserState(chatId, state, env) {
  await env.WINE_CACHE.put(`admin_state_${chatId}`, JSON.stringify(state));
}
async function clearUserState(chatId, env) {
  await env.WINE_CACHE.delete(`admin_state_${chatId}`);
}

export class CommandsHandler {
  constructor(env) {
    this.env = env;
    this.telegram = new TelegramHandler(env);
    this.feedback = new FeedbackHandler(env);
    this.analytics = new AnalyticsHandler(env);
    this.users = new UsersHandler(env);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    // this.userStates = new Map(); // –£–¥–∞–ª–µ–Ω–æ, –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ KV
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(chatId) {
    const message = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>

üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>

üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üìù <b>–û—Ç–∑—ã–≤—ã</b> - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
üéÅ <b>–ü—Ä–∏–∑—ã</b> - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤ –∑–∞ XP
üîç <b>–ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ

üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!</b>`;

    const keyboard = this.telegram.createInlineKeyboard([
      [
        { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' },
        { text: 'üìù –û—Ç–∑—ã–≤—ã', callback_data: 'admin_feedback' }
      ],
      [
        { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' },
        { text: 'üéÅ –ü—Ä–∏–∑—ã', callback_data: 'admin_rewards' }
      ],
      [
        { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'admin_search' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'admin_help' }
      ]
    ]);

    await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analytics
  async handleAnalytics(chatId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!this.analytics.database.db) {
        await this.telegram.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
        return;
      }

      const analytics = await this.analytics.getGeneralAnalytics();
      
      if (!analytics.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${analytics.error}`);
        return;
      }

      const message = this.analytics.formatGeneralAnalytics(analytics.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_analytics_users' },
          { text: '‚è∞ –í—Ä–µ–º—è', callback_data: 'admin_analytics_time' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleAnalytics:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /feedback
  async handleFeedback(chatId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!this.feedback.database.db) {
        await this.telegram.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
        return;
      }

      const feedback = await this.feedback.getFeedbackStats();
      
      if (!feedback.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: ${feedback.error}`);
        return;
      }

      const message = this.feedback.formatFeedbackStats(feedback.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üìã –î–µ—Ç–∞–ª—å–Ω–æ', callback_data: 'admin_feedback_detailed' },
          { text: 'üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', callback_data: 'admin_feedback_likes' }
        ],
        [
          { text: 'ü§î –°–ª–æ–∂–Ω–æ', callback_data: 'admin_feedback_hard' },
          { text: 'üò¥ –õ–µ–≥–∫–æ', callback_data: 'admin_feedback_easy' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleFeedback:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /users
  async handleUsers(chatId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!this.users.database.db) {
        await this.telegram.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
        return;
      }

      const users = await this.users.getUsersList(10);
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üèÜ –¢–æ–ø', callback_data: 'admin_users_top' },
          { text: 'üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ', callback_data: 'admin_users_inactive' }
        ],
        [
          { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'admin_search_user' },
          { text: 'üìã –í—Å–µ', callback_data: 'admin_users_all' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsers:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /user_info
  async handleUserInfo(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /user_info <ID>');
      return;
    }

    const userId = parseInt(args[0]);
    if (isNaN(userId)) {
      await this.telegram.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    try {
      const userInfo = await this.users.getUserInfo(userId);
      
      if (!userInfo.success) {
        await this.telegram.sendMessage(chatId, `‚ùå ${userInfo.error}`);
        return;
      }

      const message = this.users.formatUserInfo(userInfo.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_block_user_${userId}` },
          { text: '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_unblock_user_${userId}` }
        ],
        [
          { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: `admin_reset_user_${userId}` }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUserInfo:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search_user
  async handleSearchUser(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: /search_user <–∏–º—è>');
      return;
    }

    const query = args.join(' ');
    
    try {
      const users = await this.users.searchUsers(query);
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${users.error}`);
        return;
      }

      if (users.data.length === 0) {
        await this.telegram.sendMessage(chatId, `üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleSearchUser:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /block_user
  async handleBlockUser(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /block_user <ID>');
      return;
    }
    const userId = parseInt(args[0]);
    if (isNaN(userId)) {
      await this.telegram.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    try {
      const result = await this.users.blockUser(userId);
      if (result.success) {
        await this.telegram.sendMessage(chatId, `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      } else {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${result.error}`);
      }
    } catch (error) {
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unblock_user
  async handleUnblockUser(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unblock_user <ID>');
      return;
    }
    const userId = parseInt(args[0]);
    if (isNaN(userId)) {
      await this.telegram.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    try {
      const result = await this.users.unblockUser(userId);
      if (result.success) {
        await this.telegram.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      } else {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${result.error}`);
      }
    } catch (error) {
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset_user
  async handleResetUser(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /reset_user <ID>');
      return;
    }
    const userId = parseInt(args[0]);
    if (isNaN(userId)) {
      await this.telegram.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    try {
      const result = await this.users.resetUserProgress(userId);
      if (result.success) {
        await this.telegram.sendMessage(chatId, `üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω.`);
      } else {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${result.error}`);
      }
    } catch (error) {
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleBroadcast(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: /broadcast <—Ç–µ–∫—Å—Ç>');
      return;
    }
    const text = args.join(' ');
    try {
      const usersResult = await this.users.getUsersList(1000); // –¥–æ 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!usersResult.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResult.error}`);
        return;
      }
      const users = usersResult.data.filter(u => !u.is_blocked);
      let sent = 0, failed = 0;
      for (const user of users) {
        try {
          await this.telegram.sendMessage(user.chat_id, text);
          sent++;
        } catch (e) {
          failed++;
        }
        // –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤ Telegram
        await new Promise(r => setTimeout(r, 40));
      }
      await this.telegram.sendMessage(chatId, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${sent}, –æ—à–∏–±–æ–∫: ${failed}`);
    } catch (error) {
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /broadcast
  async handleMessage(chatId, text) {
    if (text.startsWith('/broadcast')) {
      const args = text.split(' ').slice(1);
      await this.handleBroadcast(chatId, args);
      return true;
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞
    if (await this.handleTextForReward(chatId, text)) return true;
    return false;
  }

  // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤
  async handleReplyFeedback(chatId, args) {
    if (!args || args.length < 2) {
      await this.telegram.sendMessage(chatId, '‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_feedback <feedback_id> <—Ç–µ–∫—Å—Ç>');
      return;
    }
    const feedbackId = parseInt(args[0]);
    if (isNaN(feedbackId)) {
      await this.telegram.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞');
      return;
    }
    const text = args.slice(1).join(' ');
    try {
      const result = await this.feedback.replyToFeedback(feedbackId, text);
      if (result.success) {
        await this.telegram.sendMessage(chatId, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`);
      } else {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error}`);
      }
    } catch (error) {
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞');
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
  async handleMarkFeedbackProcessed(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞: /mark_feedback <feedback_id>');
      return;
    }
    const feedbackId = parseInt(args[0]);
    if (isNaN(feedbackId)) {
      await this.telegram.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞');
      return;
    }
    try {
      const result = await this.feedback.markFeedbackProcessed(feedbackId);
      if (result.success) {
        await this.telegram.sendMessage(chatId, `‚úÖ –û—Ç–∑—ã–≤ ${feedbackId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π.`);
      } else {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error) {
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
  async handleCallbackQuery(chatId, callbackData, messageId) {
    try {
      console.log('[COMMANDS] handleCallbackQuery called with:', callbackData);
      
      // –ü–∞—Ä—Å–∏–º callback data –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const parts = callbackData.split('_');
      const prefix = parts[0];
      
      if (prefix !== 'admin') {
        console.log('[COMMANDS] Not admin callback, ignoring');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ admin_)
      const fullAction = parts.slice(1).join('_');
      console.log('[COMMANDS] Full action:', fullAction);

      // –ù–æ–≤—ã–π switch (true) –¥–ª—è startsWith
      switch (true) {
        case fullAction === 'main_menu':
          await this.handleStart(chatId);
          break;
        case fullAction === 'analytics':
          await this.handleAnalytics(chatId);
          break;
        case fullAction === 'analytics_users':
          await this.handleAnalyticsUsers(chatId);
          break;
        case fullAction === 'analytics_time':
          await this.handleAnalyticsTime(chatId);
          break;
        case fullAction === 'feedback':
          await this.handleFeedback(chatId);
          break;
        case fullAction === 'feedback_detailed':
          await this.handleFeedbackDetailed(chatId);
          break;
        case fullAction === 'feedback_likes':
          await this.handleFeedbackByType(chatId, 'like');
          break;
        case fullAction === 'feedback_hard':
          await this.handleFeedbackByType(chatId, 'hard');
          break;
        case fullAction === 'feedback_easy':
          await this.handleFeedbackByType(chatId, 'easy');
          break;
        case fullAction === 'users':
          await this.handleUsers(chatId);
          break;
        case fullAction === 'users_top':
          await this.handleUsersTop(chatId);
          break;
        case fullAction === 'users_inactive':
          await this.handleUsersInactive(chatId);
          break;
        case fullAction === 'users_all':
          await this.handleUsersAll(chatId);
          break;
        case fullAction === 'search':
          await this.handleSearchMenu(chatId);
          break;
        case fullAction === 'search_user':
          await this.handleSearchUserPrompt(chatId);
          break;
        case fullAction.startsWith('user_info_'):
          const userId = fullAction.replace('user_info_', '');
          if (userId) {
            await this.handleUserInfo(chatId, [userId]);
          } else {
            await this.telegram.sendMessage(chatId, '‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
          }
          break;
        case fullAction.startsWith('block_user_'):
          await this.handleBlockUser(chatId, [fullAction.replace('block_user_', '')]);
          break;
        case fullAction.startsWith('unblock_user_'):
          await this.handleUnblockUser(chatId, [fullAction.replace('unblock_user_', '')]);
          break;
        case fullAction.startsWith('reset_user_'):
          await this.handleResetUser(chatId, [fullAction.replace('reset_user_', '')]);
          break;
        case fullAction.startsWith('reply_feedback_'):
          await this.handleReplyFeedback(chatId, [fullAction.replace('reply_feedback_', '')]);
          break;
        case fullAction.startsWith('mark_feedback_'):
          await this.handleMarkFeedbackProcessed(chatId, [fullAction.replace('mark_feedback_', '')]);
          break;
        case fullAction === 'rewards':
          await this.handleRewards(chatId);
          break;
        case fullAction === 'add_reward':
          await this.handleAddReward(chatId);
          break;
        case fullAction.startsWith('delete_reward_'):
          await this.handleDeleteReward(chatId, fullAction.replace('delete_reward_', ''));
          break;
        case fullAction === 'help':
          await this.handleHelp(chatId);
          break;
        default:
          console.log(`[COMMANDS] Unknown callback data: ${callbackData}`);
          await this.handleStart(chatId);
      }
    } catch (error) {
      console.error('[COMMANDS] Error in handleCallbackQuery:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  async handleAnalyticsUsers(chatId) {
    try {
      const analytics = await this.analytics.getUserAnalytics();
      
      if (!analytics.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${analytics.error}`);
        return;
      }

      const message = this.analytics.formatUserAnalytics(analytics.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', callback_data: 'admin_analytics' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleAnalyticsUsers:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleAnalyticsTime(chatId) {
    try {
      const analytics = await this.analytics.getTimeAnalytics();
      
      if (!analytics.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${analytics.error}`);
        return;
      }

      const message = this.analytics.formatTimeAnalytics(analytics.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', callback_data: 'admin_analytics' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleAnalyticsTime:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  }

  // –í –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç–∑—ã–≤–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
  async handleFeedbackDetailed(chatId) {
    try {
      const feedback = await this.feedback.getDetailedFeedback(10);
      if (!feedback.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${feedback.error}`);
        return;
      }
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
      for (const item of feedback.data) {
        const message = this.feedback.formatDetailedFeedback([item]);
        const keyboard = this.telegram.createInlineKeyboard([
          [
            { text: '‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `admin_reply_feedback_${item.id}` },
            { text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_feedback_${item.id}` }
          ]
        ]);
        await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
      }
    } catch (error) {
      console.error('[COMMANDS] Error in handleFeedbackDetailed:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤');
    }
  }

  async handleFeedbackByType(chatId, type) {
    try {
      const feedback = await this.feedback.getFeedbackByType(type);
      
      if (!feedback.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: ${feedback.error}`);
        return;
      }

      const message = this.feedback.formatDetailedFeedback(feedback.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–∑—ã–≤–∞–º', callback_data: 'admin_feedback' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleFeedbackByType:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤');
    }
  }

  async handleUsersTop(chatId) {
    try {
      const users = await this.users.getTopUsers(10, 'total_score');
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatTopUsers(users.data, 'total_score');
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsersTop:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleUsersInactive(chatId) {
    try {
      const users = await this.users.getInactiveUsers(7);
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsersInactive:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleUsersAll(chatId) {
    try {
      const users = await this.users.getUsersList(50); // –ë–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsersAll:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleSearchMenu(chatId) {
    const message = `üîç <b>–ü–æ–∏—Å–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:`;

    const keyboard = this.telegram.createInlineKeyboard([
      [
        { text: 'üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_search_user' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
      ]
    ]);

    await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  async handleSearchUserPrompt(chatId) {
    try {
      console.log('[COMMANDS] handleSearchUserPrompt called for chatId:', chatId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await this.users.getUsersList(10);
      console.log('[COMMANDS] getUsersList result:', users);
      
      if (!users.success) {
        console.log('[COMMANDS] getUsersList failed:', users.error);
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      console.log('[COMMANDS] Users found:', users.data.length);
      console.log('[COMMANDS] Users data:', users.data);

      const message = `üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const buttons = users.data.map(user => {
        const displayName = this.users.formatUserName(user);
        console.log('[COMMANDS] Creating button for user:', user.chat_id, displayName);
        return [{ text: displayName, callback_data: `admin_user_info_${user.chat_id}` }];
      });

      console.log('[COMMANDS] Created buttons:', buttons);

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_search' }]);

      const keyboard = this.telegram.createInlineKeyboard(buttons);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
      console.log('[COMMANDS] Message sent successfully');
    } catch (error) {
      console.error('[COMMANDS] Error in handleSearchUserPrompt:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleHelp(chatId) {
    const message = `‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>

üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /feedback - –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç <b>–ü–æ–∏—Å–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ /user_info &lt;ID&gt; - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ /search_user &lt;–∏–º—è&gt; - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ "üîô –ù–∞–∑–∞–¥"`;

    const keyboard = this.telegram.createInlineKeyboard([
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_main_menu' }
      ]
    ]);

    await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∏–∑–æ–≤
  async handleRewards(chatId) {
    const db = this.env.DB;
    const rewards = await db.prepare('SELECT * FROM reward_shop ORDER BY price_xp ASC').all();
    let message = '<b>üéÅ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤</b>\n\n';
    if (rewards.results.length === 0) {
      message += '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.';
    } else {
      for (const r of rewards.results) {
        message += `‚Ä¢ <b>${r.name}</b> ‚Äî ${r.price_xp} XP\n` +
          `ID: ${r.id} | –í—Å–µ–≥–æ: ${r.quantity} | –û—Å—Ç–∞–ª–æ—Å—å: ${r.quantity_left} | –ê–∫—Ç–∏–≤–µ–Ω: ${r.is_active ? '–î–∞' : '–ù–µ—Ç'}\n` +
          `${r.description || ''}\n\n`;
      }
    }
    const keyboard = this.telegram.createInlineKeyboard([
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑', callback_data: 'admin_add_reward' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }]
    ]);
    await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞ (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ)
  async handleAddReward(chatId) {
    await setUserState(chatId, { step: 'awaiting_reward_name' }, this.env);
    await this.telegram.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞:');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞
  async handleTextForReward(chatId, text) {
    const state = await getUserState(chatId, this.env);
    if (!state) return false;
    const db = this.env.DB;
    if (state.step === 'awaiting_reward_name') {
      state.name = text;
      state.step = 'awaiting_reward_price';
      await setUserState(chatId, state, this.env);
      await this.telegram.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–∞ –≤ XP:');
      return true;
    }
    if (state.step === 'awaiting_reward_price') {
      const price = parseInt(text);
      if (isNaN(price) || price <= 0) {
        await this.telegram.sendMessage(chatId, '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:');
        return true;
      }
      state.price_xp = price;
      state.step = 'awaiting_reward_quantity';
      await setUserState(chatId, state, this.env);
      await this.telegram.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0):');
      return true;
    }
    if (state.step === 'awaiting_reward_quantity') {
      const quantity = parseInt(text);
      if (isNaN(quantity) || quantity <= 0) {
        await this.telegram.sendMessage(chatId, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:');
        return true;
      }
      state.quantity = quantity;
      state.step = 'awaiting_reward_desc';
      await setUserState(chatId, state, this.env);
      await this.telegram.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ (–∏–ª–∏ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):');
      return true;
    }
    if (state.step === 'awaiting_reward_desc') {
      const desc = text === '-' ? '' : text;
      await db.prepare('INSERT INTO reward_shop (name, description, price_xp, quantity, quantity_left, is_active) VALUES (?, ?, ?, ?, ?, 1)')
        .bind(state.name, desc, state.price_xp, state.quantity, state.quantity).run();
      await clearUserState(chatId, this.env);
      await this.telegram.sendMessage(chatId, '‚úÖ –ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω!');
      await this.handleRewards(chatId);
      return true;
    }
    return false;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è) –ø—Ä–∏–∑–∞
  async handleDeleteReward(chatId, rewardId) {
    const db = this.env.DB;
    await db.prepare('UPDATE reward_shop SET is_active = 0 WHERE id = ?').bind(rewardId).run();
    await this.telegram.sendMessage(chatId, '–ü—Ä–∏–∑ —É–¥–∞–ª—ë–Ω.');
    await this.handleRewards(chatId);
  }
} 
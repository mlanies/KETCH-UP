// src/admin/handlers/commands.js
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–±–æ—Ç–∞

import { FeedbackHandler } from './feedback.js';
import { AnalyticsHandler } from './analytics.js';
import { UsersHandler } from './users.js';
import { TelegramHandler } from './telegram.js';

export class CommandsHandler {
  constructor(env) {
    this.env = env;
    this.telegram = new TelegramHandler(env);
    this.feedback = new FeedbackHandler(env);
    this.analytics = new AnalyticsHandler(env);
    this.users = new UsersHandler(env);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    this.userStates = new Map();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(chatId) {
    const message = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>

üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>

üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üìù <b>–û—Ç–∑—ã–≤—ã</b> - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
üîç <b>–ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ

üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!</b>`;

          const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' },
          { text: 'üìù –û—Ç–∑—ã–≤—ã', callback_data: 'admin_feedback' }
        ],
        [
          { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' },
          { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'admin_search' }
        ],
        [
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'admin_help' }
        ]
      ]);

    await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analytics
  async handleAnalytics(chatId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!this.analytics.database.db) {
        await this.telegram.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
        return;
      }

      const analytics = await this.analytics.getGeneralAnalytics();
      
      if (!analytics.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${analytics.error}`);
        return;
      }

      const message = this.analytics.formatGeneralAnalytics(analytics.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_analytics_users' },
          { text: '‚è∞ –í—Ä–µ–º—è', callback_data: 'admin_analytics_time' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleAnalytics:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /feedback
  async handleFeedback(chatId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!this.feedback.database.db) {
        await this.telegram.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
        return;
      }

      const feedback = await this.feedback.getFeedbackStats();
      
      if (!feedback.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: ${feedback.error}`);
        return;
      }

      const message = this.feedback.formatFeedbackStats(feedback.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üìã –î–µ—Ç–∞–ª—å–Ω–æ', callback_data: 'admin_feedback_detailed' },
          { text: 'üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', callback_data: 'admin_feedback_likes' }
        ],
        [
          { text: 'ü§î –°–ª–æ–∂–Ω–æ', callback_data: 'admin_feedback_hard' },
          { text: 'üò¥ –õ–µ–≥–∫–æ', callback_data: 'admin_feedback_easy' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleFeedback:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /users
  async handleUsers(chatId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!this.users.database.db) {
        await this.telegram.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
        return;
      }

      const users = await this.users.getUsersList(10);
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üèÜ –¢–æ–ø', callback_data: 'admin_users_top' },
          { text: 'üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ', callback_data: 'admin_users_inactive' }
        ],
        [
          { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'admin_search_user' },
          { text: 'üìã –í—Å–µ', callback_data: 'admin_users_all' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsers:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /user_info
  async handleUserInfo(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /user_info <ID>');
      return;
    }

    const userId = parseInt(args[0]);
    if (isNaN(userId)) {
      await this.telegram.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    try {
      const userInfo = await this.users.getUserInfo(userId);
      
      if (!userInfo.success) {
        await this.telegram.sendMessage(chatId, `‚ùå ${userInfo.error}`);
        return;
      }

      const message = this.users.formatUserInfo(userInfo.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUserInfo:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search_user
  async handleSearchUser(chatId, args) {
    if (!args || args.length === 0) {
      await this.telegram.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: /search_user <–∏–º—è>');
      return;
    }

    const query = args.join(' ');
    
    try {
      const users = await this.users.searchUsers(query);
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${users.error}`);
        return;
      }

      if (users.data.length === 0) {
        await this.telegram.sendMessage(chatId, `üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleSearchUser:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
  async handleCallbackQuery(chatId, callbackData, messageId) {
    try {
      console.log('[COMMANDS] handleCallbackQuery called with:', callbackData);
      
      // –ü–∞—Ä—Å–∏–º callback data –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const parts = callbackData.split('_');
      const prefix = parts[0];
      
      if (prefix !== 'admin') {
        console.log('[COMMANDS] Not admin callback, ignoring');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ admin_)
      const fullAction = parts.slice(1).join('_');
      console.log('[COMMANDS] Full action:', fullAction);

      // –ù–æ–≤—ã–π switch (true) –¥–ª—è startsWith
      switch (true) {
        case fullAction === 'main_menu':
          await this.handleStart(chatId);
          break;
        case fullAction === 'analytics':
          await this.handleAnalytics(chatId);
          break;
        case fullAction === 'analytics_users':
          await this.handleAnalyticsUsers(chatId);
          break;
        case fullAction === 'analytics_time':
          await this.handleAnalyticsTime(chatId);
          break;
        case fullAction === 'feedback':
          await this.handleFeedback(chatId);
          break;
        case fullAction === 'feedback_detailed':
          await this.handleFeedbackDetailed(chatId);
          break;
        case fullAction === 'feedback_likes':
          await this.handleFeedbackByType(chatId, 'like');
          break;
        case fullAction === 'feedback_hard':
          await this.handleFeedbackByType(chatId, 'hard');
          break;
        case fullAction === 'feedback_easy':
          await this.handleFeedbackByType(chatId, 'easy');
          break;
        case fullAction === 'users':
          await this.handleUsers(chatId);
          break;
        case fullAction === 'users_top':
          await this.handleUsersTop(chatId);
          break;
        case fullAction === 'users_inactive':
          await this.handleUsersInactive(chatId);
          break;
        case fullAction === 'users_all':
          await this.handleUsersAll(chatId);
          break;
        case fullAction === 'search':
          await this.handleSearchMenu(chatId);
          break;
        case fullAction === 'search_user':
          await this.handleSearchUserPrompt(chatId);
          break;
        case fullAction.startsWith('user_info_'):
          const userId = fullAction.replace('user_info_', '');
          if (userId) {
            await this.handleUserInfo(chatId, [userId]);
          } else {
            await this.telegram.sendMessage(chatId, '‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
          }
          break;
        case fullAction === 'help':
          await this.handleHelp(chatId);
          break;
        default:
          console.log(`[COMMANDS] Unknown callback data: ${callbackData}`);
          await this.handleStart(chatId);
      }
    } catch (error) {
      console.error('[COMMANDS] Error in handleCallbackQuery:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  async handleAnalyticsUsers(chatId) {
    try {
      const analytics = await this.analytics.getUserAnalytics();
      
      if (!analytics.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${analytics.error}`);
        return;
      }

      const message = this.analytics.formatUserAnalytics(analytics.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', callback_data: 'admin_analytics' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleAnalyticsUsers:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleAnalyticsTime(chatId) {
    try {
      const analytics = await this.analytics.getTimeAnalytics();
      
      if (!analytics.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${analytics.error}`);
        return;
      }

      const message = this.analytics.formatTimeAnalytics(analytics.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', callback_data: 'admin_analytics' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleAnalyticsTime:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  }

  async handleFeedbackDetailed(chatId) {
    try {
      const feedback = await this.feedback.getDetailedFeedback(10);
      
      if (!feedback.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${feedback.error}`);
        return;
      }

      const message = this.feedback.formatDetailedFeedback(feedback.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–∑—ã–≤–∞–º', callback_data: 'admin_feedback' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleFeedbackDetailed:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤');
    }
  }

  async handleFeedbackByType(chatId, type) {
    try {
      const feedback = await this.feedback.getFeedbackByType(type);
      
      if (!feedback.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: ${feedback.error}`);
        return;
      }

      const message = this.feedback.formatDetailedFeedback(feedback.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–∑—ã–≤–∞–º', callback_data: 'admin_feedback' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleFeedbackByType:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤');
    }
  }

  async handleUsersTop(chatId) {
    try {
      const users = await this.users.getTopUsers(10, 'total_score');
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatTopUsers(users.data, 'total_score');
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsersTop:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleUsersInactive(chatId) {
    try {
      const users = await this.users.getInactiveUsers(7);
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsersInactive:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleUsersAll(chatId) {
    try {
      const users = await this.users.getUsersList(50); // –ë–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      
      if (!users.success) {
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      const message = this.users.formatUsersList(users.data);
      
      const keyboard = this.telegram.createInlineKeyboard([
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin_users' }
        ]
      ]);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      console.error('[COMMANDS] Error in handleUsersAll:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleSearchMenu(chatId) {
    const message = `üîç <b>–ü–æ–∏—Å–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:`;

    const keyboard = this.telegram.createInlineKeyboard([
      [
        { text: 'üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_search_user' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main_menu' }
      ]
    ]);

    await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  async handleSearchUserPrompt(chatId) {
    try {
      console.log('[COMMANDS] handleSearchUserPrompt called for chatId:', chatId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await this.users.getUsersList(10);
      console.log('[COMMANDS] getUsersList result:', users);
      
      if (!users.success) {
        console.log('[COMMANDS] getUsersList failed:', users.error);
        await this.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.error}`);
        return;
      }

      console.log('[COMMANDS] Users found:', users.data.length);
      console.log('[COMMANDS] Users data:', users.data);

      const message = `üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const buttons = users.data.map(user => {
        const displayName = this.users.formatUserName(user);
        console.log('[COMMANDS] Creating button for user:', user.chat_id, displayName);
        return [{ text: displayName, callback_data: `admin_user_info_${user.chat_id}` }];
      });

      console.log('[COMMANDS] Created buttons:', buttons);

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_search' }]);

      const keyboard = this.telegram.createInlineKeyboard(buttons);

      await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
      console.log('[COMMANDS] Message sent successfully');
    } catch (error) {
      console.error('[COMMANDS] Error in handleSearchUserPrompt:', error);
      await this.telegram.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async handleHelp(chatId) {
    const message = `‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>

üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /feedback - –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç <b>–ü–æ–∏—Å–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ /user_info &lt;ID&gt; - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ /search_user &lt;–∏–º—è&gt; - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ "üîô –ù–∞–∑–∞–¥"`;

    const keyboard = this.telegram.createInlineKeyboard([
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'admin_main_menu' }
      ]
    ]);

    await this.telegram.sendMessageWithKeyboard(chatId, message, keyboard);
  }
} 
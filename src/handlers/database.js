// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cloudflare D1

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export const ACHIEVEMENT_TYPES = {
  // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  FIRST_TEST: {
    id: 'first_test_completed',
    name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
    description: '–ü—Ä–æ–π–¥–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç',
    icon: 'üéØ',
    points: 50,
    type: 'basic'
  },
  
  // –°–µ—Ä–∏–∏ –∏ —Å—Ç—Ä–∏–∫–∏
  STREAK_3_DAYS: {
    id: 'streak_3_days',
    name: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
    description: '–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
    icon: 'üî•',
    points: 100,
    type: 'streak'
  },
  STREAK_7_DAYS: {
    id: 'streak_7_days',
    name: '–ù–µ–¥–µ–ª—å–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω',
    description: '–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üèÉ‚Äç‚ôÇÔ∏è',
    points: 250,
    type: 'streak'
  },
  
  // –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
  PERFECT_SCORE: {
    id: 'perfect_score',
    name: '–û—Ç–ª–∏—á–Ω–∏–∫',
    description: '–ü–æ–ª—É—á–∏—Ç–µ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
    icon: '‚≠ê',
    points: 200,
    type: 'quality'
  },
  SPEED_DEMON: {
    id: 'speed_demon',
    name: '–°–∫–æ—Ä–æ—Å—Ç—å',
    description: '–û—Ç–≤–µ—á–∞–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ 10 —Å–µ–∫—É–Ω–¥',
    icon: '‚ö°',
    points: 75,
    type: 'speed'
  },
  
  // –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  CATEGORY_MASTER: {
    id: 'category_master',
    name: '–ú–∞—Å—Ç–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 90%+ –≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    icon: 'üëë',
    points: 300,
    type: 'mastery'
  },
  
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  HELPER: {
    id: 'helper',
    name: '–ü–æ–º–æ—â–Ω–∏–∫',
    description: '–ü–æ–º–æ–≥–∏—Ç–µ 5 –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
    icon: 'ü§ù',
    points: 150,
    type: 'social'
  },
  
  // –£—Ä–æ–≤–Ω–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  LEVEL_5: {
    id: 'level_5',
    name: '–û–ø—ã—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è',
    icon: 'üìö',
    points: 500,
    type: 'level'
  },
  LEVEL_10: {
    id: 'level_10',
    name: '–ó–Ω–∞—Ç–æ–∫',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
    icon: 'üéì',
    points: 1000,
    type: 'level'
  },
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  WEEKLY_CHAMPION: {
    id: 'weekly_champion',
    name: '–ß–µ–º–ø–∏–æ–Ω –Ω–µ–¥–µ–ª–∏',
    description: '–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–µ–ª–∏',
    icon: 'üèÜ',
    points: 750,
    type: 'special'
  },
  
  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  FIRST_STEPS: {
    id: 'first_steps',
    name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤',
    icon: 'üë£',
    points: 25,
    type: 'legacy'
  },
  STREAK_MASTER: {
    id: 'streak_master',
    name: '–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–π',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–µ—Ä–∏–∏ –∏–∑ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
    icon: 'üî•',
    points: 50,
    type: 'legacy'
  },
  SCORE_100: {
    id: 'score_100',
    name: '–°–æ—Ç–Ω—è',
    description: '–ù–∞–±–µ—Ä–∏—Ç–µ 100 –æ—á–∫–æ–≤',
    icon: 'üíØ',
    points: 100,
    type: 'legacy'
  },
  AI_MASTER: {
    id: 'ai_master',
    name: '–ò–ò –ú–∞—Å—Ç–µ—Ä',
    description: '–ó–∞–¥–∞–π—Ç–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ò–ò',
    icon: 'ü§ñ',
    points: 75,
    type: 'legacy'
  },
  CATEGORY_EXPERT: {
    id: 'category_expert',
    name: '–≠–∫—Å–ø–µ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
    description: '–ò–∑—É—á–∏—Ç–µ 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
    icon: 'üìö',
    points: 150,
    type: 'legacy'
  },
  CHAMPION: {
    id: 'champion',
    name: '–ß–µ–º–ø–∏–æ–Ω',
    description: '–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –æ—á–∫–æ–≤',
    icon: 'üèÜ',
    points: 500,
    type: 'legacy'
  }
};

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
export const LEVEL_SYSTEM = {
  levels: [
    { level: 1, name: '–ù–æ–≤–∏—á–æ–∫', minExperience: 0, icon: 'üå±', color: '#6B7280', rewards: { unlockFeatures: ['basic_tests'] } },
    { level: 2, name: '–£—á–µ–Ω–∏–∫', minExperience: 100, icon: 'üìö', color: '#3B82F6', rewards: { unlockFeatures: ['daily_challenges'] } },
    { level: 3, name: '–ó–Ω–∞—Ç–æ–∫', minExperience: 300, icon: 'üéì', color: '#10B981', rewards: { unlockFeatures: ['advanced_tests'] } },
    { level: 4, name: '–≠–∫—Å–ø–µ—Ä—Ç', minExperience: 600, icon: 'üèÜ', color: '#F59E0B', rewards: { unlockFeatures: ['ai_consultations'] } },
    { level: 5, name: '–ú–∞—Å—Ç–µ—Ä', minExperience: 1000, icon: 'üëë', color: '#EF4444', rewards: { unlockFeatures: ['mentor_mode'] } },
    { level: 6, name: '–ì—É—Ä—É', minExperience: 1500, icon: 'üåü', color: '#8B5CF6', rewards: { unlockFeatures: ['custom_tests'] } },
    { level: 7, name: '–õ–µ–≥–µ–Ω–¥–∞', minExperience: 2500, icon: 'üíé', color: '#06B6D4', rewards: { unlockFeatures: ['all_features'] } }
  ],
  
  getLevel(experience) {
    return this.levels.reduce((current, level) => {
      return experience >= level.minExperience ? level : current;
    });
  },
  
  getProgress(experience) {
    const currentLevel = this.getLevel(experience);
    const nextLevel = this.levels.find(l => l.minExperience > experience);
    
    if (!nextLevel) return 100;
    
    const currentLevelExp = currentLevel.minExperience;
    const nextLevelExp = nextLevel.minExperience;
    const userProgress = experience - currentLevelExp;
    const levelRange = nextLevelExp - currentLevelExp;
    
    return Math.round((userProgress / levelRange) * 100);
  },
  
  getNextLevel(experience) {
    return this.levels.find(l => l.minExperience > experience);
  }
};

// –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞
export const EXPERIENCE_SYSTEM = {
  rewards: {
    test_completed: 10,
    correct_answer: 5,
    perfect_score: 50,
    daily_streak: 25,
    achievement_unlocked: 100,
    helping_others: 15,
    category_mastery: 200,
    speed_bonus: 2,
    weekend_bonus: 1.5
  },
  
  multipliers: {
    weekend: 1.5,
    firstSessionOfDay: 2.0,
    consecutiveDay: 1.1,
    levelUp: 1.5
  },
  
  calculateExperience(action, context = {}) {
    let baseExp = this.rewards[action] || 0;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
    if (context.isWeekend) baseExp *= this.multipliers.weekend;
    if (context.isFirstSession) baseExp *= this.multipliers.firstSessionOfDay;
    if (context.consecutiveDays > 1) {
      baseExp *= Math.pow(this.multipliers.consecutiveDay, Math.min(context.consecutiveDays - 1, 7));
    }
    if (context.isLevelUp) baseExp *= this.multipliers.levelUp;
    
    return Math.round(baseExp);
  }
};

export class DatabaseManager {
  constructor(env) {
    this.env = env;
    this.db = env.DB;
    
    console.log('[DatabaseManager] Constructor called');
    console.log('[DatabaseManager] env:', env ? 'present' : 'missing');
    console.log('[DatabaseManager] env.DB:', env?.DB ? 'present' : 'missing');
    console.log('[DatabaseManager] this.db:', this.db ? 'present' : 'missing');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ env
    if (env) {
      console.log('[DatabaseManager] env keys:', Object.keys(env));
      console.log('[DatabaseManager] env.WINE_CACHE:', env.WINE_CACHE ? 'present' : 'missing');
      console.log('[DatabaseManager] env.WORKER_URL:', env.WORKER_URL ? 'present' : 'missing');
      console.log('[DatabaseManager] env.DB type:', typeof env.DB);
      console.log('[DatabaseManager] env.DB constructor:', env.DB?.constructor?.name);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  prepare(sql) {
    console.log('[DatabaseManager] prepare called with sql:', sql.substring(0, 50) + '...');
    console.log('[DatabaseManager] this.db:', this.db ? 'present' : 'missing');
    
    if (!this.db) {
      console.error('[DatabaseManager] Database not available in prepare method');
      throw new Error('Database not available');
    }
    
    console.log('[DatabaseManager] Calling this.db.prepare...');
    return this.db.prepare(sql);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async initUser(chatId, telegramUser = null) {
    try {
      console.log('[DatabaseManager] initUser called with chatId:', chatId);
      
      if (!this.db) {
        console.error('[DatabaseManager] Database not available');
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      console.log('[DatabaseManager] Checking if user exists...');
      let existingUser = null;
      try {
        existingUser = await this.db.prepare(
          'SELECT chat_id FROM users WHERE chat_id = ?'
        ).bind(chatId).first();
        console.log('[DatabaseManager] After SELECT chat_id');
        console.log('[DatabaseManager] existingUser:', existingUser);
      } catch (e) {
        console.error('[DatabaseManager] Error in SELECT chat_id:', e);
        throw e;
      }

      if (!existingUser) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('[DatabaseManager] Creating new user...');
        const username = telegramUser?.username || null;
        const firstName = telegramUser?.first_name || null;
        const lastName = telegramUser?.last_name || null;

        await this.db.prepare(`
          INSERT INTO users (chat_id, username, first_name, last_name, created_at, last_activity)
          VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        `).bind(chatId, username, firstName, lastName).run();

        console.log(`[DatabaseManager] Created new user: ${chatId}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        console.log('[DatabaseManager] Updating user activity...');
        await this.db.prepare(`
          UPDATE users SET last_activity = CURRENT_TIMESTAMP
          WHERE chat_id = ?
        `).bind(chatId).run();
        console.log('[DatabaseManager] User activity updated');
      }

      console.log('[DatabaseManager] initUser completed successfully');
      return true;
    } catch (error) {
      console.error('[DatabaseManager] Error initializing user:', error);
      console.error('[DatabaseManager] Error stack:', error.stack);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUser(chatId) {
    try {
      console.log('[DatabaseManager] getUser called with chatId:', chatId);
      
      if (!this.db) {
        console.error('[DatabaseManager] Database not available in getUser');
        return null;
      }
      
      const user = await this.db.prepare(`
        SELECT * FROM users WHERE chat_id = ?
      `).bind(chatId).first();
      
      console.log('[DatabaseManager] getUser result:', user);
      return user;
    } catch (error) {
      console.error('[DatabaseManager] Error getting user:', error);
      console.error('[DatabaseManager] Error stack:', error.stack);
      return null;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserStats(chatId, stats) {
    try {
      const {
        totalScore = 0,
        totalQuestions = 0,
        totalCorrect = 0,
        learningStreak = 0,
        maxStreak = 0,
        difficultyLevel = 'beginner',
        experiencePoints = 0,
        consecutiveDays = 0
      } = stats;

      await this.db.prepare(`
        UPDATE users SET 
          total_score = total_score + ?,
          total_questions = total_questions + ?,
          total_correct = total_correct + ?,
          learning_streak = ?,
          max_streak = CASE WHEN ? > max_streak THEN ? ELSE max_streak END,
          difficulty_level = ?,
          experience_points = experience_points + ?,
          consecutive_days = ?,
          last_activity = CURRENT_TIMESTAMP
        WHERE chat_id = ?
      `).bind(
        totalScore, totalQuestions, totalCorrect, 
        learningStreak, maxStreak, maxStreak,
        difficultyLevel, experiencePoints, consecutiveDays, chatId
      ).run();

      return true;
    } catch (error) {
      console.error('Error updating user stats:', error);
      return false;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
  async createLearningSession(chatId, sessionType) {
    try {
      const result = await this.db.prepare(`
        INSERT INTO learning_sessions (chat_id, session_type, start_time)
        VALUES (?, ?, CURRENT_TIMESTAMP)
      `).bind(chatId, sessionType).run();

      return result.meta.last_row_id;
    } catch (error) {
      console.error('Error creating learning session:', error);
      return null;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
  async startQuickTestSession(chatId) {
    try {
      const result = await this.db.prepare(`
        INSERT INTO learning_sessions (chat_id, session_type, start_time)
        VALUES (?, 'quick_test', CURRENT_TIMESTAMP)
      `).bind(chatId).run();

      return {
        id: result.meta.last_row_id,
        sessionType: 'quick_test',
        startTime: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error starting quick test session:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
  async getTestQuestion(sessionId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
      const session = await this.db.prepare(`
        SELECT chat_id, session_type FROM learning_sessions WHERE id = ?
      `).bind(sessionId).first();

      if (!session) {
        return null;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
      const question = {
        id: `question_${Date.now()}`,
        question: "–ö–∞–∫–æ–π —Ç–∏–ø –≤–∏–Ω–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –∫—Ä–∞—Å–Ω—ã–º –º—è—Å–æ–º?",
        options: {
          A: "–ë–µ–ª–æ–µ —Å—É—Ö–æ–µ –≤–∏–Ω–æ",
          B: "–ö—Ä–∞—Å–Ω–æ–µ —Å—É—Ö–æ–µ –≤–∏–Ω–æ", 
          C: "–†–æ–∑–æ–≤–æ–µ –≤–∏–Ω–æ",
          D: "–ò–≥—Ä–∏—Å—Ç–æ–µ –≤–∏–Ω–æ"
        },
        correctAnswer: "B",
        explanation: "–ö—Ä–∞—Å–Ω–æ–µ —Å—É—Ö–æ–µ –≤–∏–Ω–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –∫—Ä–∞—Å–Ω—ã–º –º—è—Å–æ–º –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–Ω–∏–Ω–∞–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.",
        category: "–í–∏–Ω–∞",
        difficulty: "beginner"
      };

      return question;
    } catch (error) {
      console.error('Error getting test question:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
  async submitTestAnswer(sessionId, questionId, answer, isCorrect) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
      const session = await this.db.prepare(`
        SELECT chat_id, session_type FROM learning_sessions WHERE id = ?
      `).bind(sessionId).first();

      if (!session) {
        return null;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      await this.db.prepare(`
        INSERT INTO user_answers (
          chat_id, session_id, question_text, user_answer, correct_answer,
          is_correct, category, question_type, response_time_ms
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `).bind(
        session.chat_id, 
        sessionId, 
        `Question ${questionId}`, 
        answer, 
        isCorrect ? answer : 'unknown',
        isCorrect ? 1 : 0, 
        'General', 
        'test_question',
        Date.now()
      ).run();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
      const result = await this.db.prepare(`
        UPDATE learning_sessions SET 
          total_questions = total_questions + 1,
          correct_answers = correct_answers + ?
        WHERE id = ?
      `).bind(isCorrect ? 1 : 0, sessionId).run();

      return {
        sessionId,
        questionId,
        answer,
        isCorrect,
        updated: true
      };
    } catch (error) {
      console.error('Error submitting test answer:', error);
      return null;
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
  async finishLearningSession(sessionId, stats) {
    try {
      const {
        totalQuestions = 0,
        correctAnswers = 0,
        score = 0,
        experienceGained = 0
      } = stats;

      await this.db.prepare(`
        UPDATE learning_sessions SET 
          end_time = CURRENT_TIMESTAMP,
          total_questions = ?,
          correct_answers = ?,
          score = ?,
          experience_gained = ?
        WHERE id = ?
      `).bind(totalQuestions, correctAnswers, score, experienceGained, sessionId).run();

      return true;
    } catch (error) {
      console.error('Error finishing learning session:', error);
      return false;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveAnswer(chatId, sessionId, answerData) {
    try {
      const {
        questionText,
        userAnswer,
        correctAnswer,
        isCorrect,
        category,
        questionType,
        wineId,
        responseTimeMs
      } = answerData;

      await this.db.prepare(`
        INSERT INTO user_answers (
          chat_id, session_id, question_text, user_answer, correct_answer,
          is_correct, category, question_type, wine_id, response_time_ms
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `).bind(
        chatId, sessionId, questionText, userAnswer, correctAnswer,
        isCorrect ? 1 : 0, category, questionType, wineId, responseTimeMs
      ).run();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      await this.updateCategoryStats(chatId, category, isCorrect);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
      await this.updateQuestionTypeStats(chatId, questionType, isCorrect);

      return true;
    } catch (error) {
      console.error('Error saving answer:', error);
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  async updateCategoryStats(chatId, category, isCorrect) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
      const existing = await this.db.prepare(`
        SELECT id FROM category_stats WHERE chat_id = ? AND category = ?
      `).bind(chatId, category).first();

      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        await this.db.prepare(`
          UPDATE category_stats SET 
            total_questions = total_questions + 1,
            correct_answers = correct_answers + ?,
            last_activity = CURRENT_TIMESTAMP
          WHERE chat_id = ? AND category = ?
        `).bind(isCorrect ? 1 : 0, chatId, category).run();
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await this.db.prepare(`
          INSERT INTO category_stats (chat_id, category, total_questions, correct_answers)
          VALUES (?, ?, 1, ?)
        `).bind(chatId, category, isCorrect ? 1 : 0).run();
      }
    } catch (error) {
      console.error('Error updating category stats:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
  async updateQuestionTypeStats(chatId, questionType, isCorrect) {
    try {
      const existing = await this.db.prepare(`
        SELECT id FROM question_type_stats WHERE chat_id = ? AND question_type = ?
      `).bind(chatId, questionType).first();

      if (existing) {
        await this.db.prepare(`
          UPDATE question_type_stats SET 
            total_questions = total_questions + 1,
            correct_answers = correct_answers + ?,
            last_activity = CURRENT_TIMESTAMP
          WHERE chat_id = ? AND question_type = ?
        `).bind(isCorrect ? 1 : 0, chatId, questionType).run();
      } else {
        await this.db.prepare(`
          INSERT INTO question_type_stats (chat_id, question_type, total_questions, correct_answers)
          VALUES (?, ?, 1, ?)
        `).bind(chatId, questionType, isCorrect ? 1 : 0).run();
      }
    } catch (error) {
      console.error('Error updating question type stats:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserStats(chatId) {
    try {
      console.log('[DatabaseManager] getUserStats called with chatId:', chatId);
      
      if (!this.db) {
        console.error('[DatabaseManager] Database not available in getUserStats');
        return null;
      }
      
      console.log('[DatabaseManager] Getting user data...');
      const user = await this.getUser(chatId);
      console.log('[DatabaseManager] User data:', user);
      
      if (!user) {
        console.log('[DatabaseManager] User not found, returning null');
        return null;
      }

      console.log('[DatabaseManager] Getting category stats...');
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoryStats = await this.db.prepare(`
        SELECT category, total_questions, correct_answers,
               ROUND(CAST(correct_answers AS FLOAT) / total_questions * 100, 1) as accuracy
        FROM category_stats 
        WHERE chat_id = ?
        ORDER BY total_questions DESC
      `).bind(chatId).all();
      console.log('[DatabaseManager] Category stats:', categoryStats);

      console.log('[DatabaseManager] Getting question type stats...');
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
      const questionTypeStats = await this.db.prepare(`
        SELECT question_type, total_questions, correct_answers,
               ROUND(CAST(correct_answers AS FLOAT) / total_questions * 100, 1) as accuracy
        FROM question_type_stats 
        WHERE chat_id = ?
        ORDER BY total_questions DESC
      `).bind(chatId).all();
      console.log('[DatabaseManager] Question type stats:', questionTypeStats);

      console.log('[DatabaseManager] Getting recent sessions...');
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      const recentSessions = await this.db.prepare(`
        SELECT session_type, total_questions, correct_answers, score, start_time
        FROM learning_sessions 
        WHERE chat_id = ? AND end_time IS NOT NULL
        ORDER BY start_time DESC 
        LIMIT 10
      `).bind(chatId).all();
      console.log('[DatabaseManager] Recent sessions:', recentSessions);

      const result = {
        user,
        categoryStats: categoryStats.results,
        questionTypeStats: questionTypeStats.results,
        recentSessions: recentSessions.results
      };
      
      console.log('[DatabaseManager] Final getUserStats result:', result);
      return result;
    } catch (error) {
      console.error('[DatabaseManager] Error getting user stats:', error);
      console.error('[DatabaseManager] Error stack:', error.stack);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getAchievements(chatId) {
    try {
      const achievements = await this.db.prepare(`
        SELECT achievement_type, achievement_name, description, 
               unlocked_at, progress_value, icon, points
        FROM achievements 
        WHERE chat_id = ?
        ORDER BY unlocked_at DESC
      `).bind(chatId).all();

      return achievements.results;
    } catch (error) {
      console.error('Error getting achievements:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async checkAndAwardAchievements(chatId, stats) {
    try {
      const user = await this.getUser(chatId);
      if (!user) return [];

      const newAchievements = [];
      const existingAchievements = await this.getAchievements(chatId);
      const existingTypes = existingAchievements.map(a => a.achievement_type);

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const categoryStats = await this.db.prepare(`
        SELECT category, total_questions, correct_answers,
               ROUND(CAST(correct_answers AS FLOAT) / total_questions * 100, 1) as accuracy
        FROM category_stats 
        WHERE chat_id = ?
      `).bind(chatId).all();

      const recentAnswers = await this.db.prepare(`
        SELECT response_time_ms, is_correct
        FROM user_answers 
        WHERE chat_id = ? 
        ORDER BY answered_at DESC 
        LIMIT 10
      `).bind(chatId).all();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      for (const [type, achievement] of Object.entries(ACHIEVEMENT_TYPES)) {
        if (existingTypes.includes(achievement.id)) continue;

        let shouldAward = false;
        let progressValue = 0;

        switch (achievement.id) {
          case 'first_test_completed':
            shouldAward = (user.total_questions || 0) >= 1;
            progressValue = user.total_questions || 0;
            break;

          case 'streak_3_days':
            shouldAward = (user.consecutive_days || 0) >= 3;
            progressValue = user.consecutive_days || 0;
            break;

          case 'streak_7_days':
            shouldAward = (user.consecutive_days || 0) >= 7;
            progressValue = user.consecutive_days || 0;
            break;

          case 'perfect_score':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –Ω–∞ 100% —Ç–æ—á–Ω–æ—Å—Ç—å
            const lastSession = await this.db.prepare(`
              SELECT total_questions, correct_answers
              FROM learning_sessions 
              WHERE chat_id = ? AND end_time IS NOT NULL
              ORDER BY end_time DESC 
              LIMIT 1
            `).bind(chatId).first();
            
            if (lastSession && lastSession.total_questions >= 5) {
              const accuracy = (lastSession.correct_answers / lastSession.total_questions) * 100;
              shouldAward = accuracy === 100;
              progressValue = Math.round(accuracy);
            }
            break;

          case 'speed_demon':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (–º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥)
            const fastAnswers = recentAnswers.results.filter(a => 
              a.response_time_ms && a.response_time_ms < 10000 && a.is_correct
            ).length;
            shouldAward = fastAnswers >= 5;
            progressValue = fastAnswers;
            break;

          case 'category_master':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (90%+ —Ç–æ—á–Ω–æ—Å—Ç—å)
            const masterCategories = categoryStats.results.filter(c => 
              c.total_questions >= 10 && c.accuracy >= 90
            ).length;
            shouldAward = masterCategories >= 1;
            progressValue = masterCategories;
            break;

          case 'level_5':
            const currentLevel = LEVEL_SYSTEM.getLevel(user.experience_points || 0);
            shouldAward = currentLevel.level >= 5;
            progressValue = currentLevel.level;
            break;

          case 'level_10':
            const userLevel = LEVEL_SYSTEM.getLevel(user.experience_points || 0);
            shouldAward = userLevel.level >= 10;
            progressValue = userLevel.level;
            break;

          // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          case 'first_steps':
            shouldAward = (user.total_questions || 0) >= 10;
            progressValue = user.total_questions || 0;
            break;

          case 'streak_master':
            shouldAward = (user.max_streak || 0) >= 5;
            progressValue = user.max_streak || 0;
            break;

          case 'score_100':
            shouldAward = (user.total_score || 0) >= 100;
            progressValue = user.total_score || 0;
            break;

          case 'champion':
            shouldAward = (user.total_score || 0) >= 1000;
            progressValue = user.total_score || 0;
            break;

          default:
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
            shouldAward = false;
            break;
        }

        if (shouldAward) {
          // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º
          await this.db.prepare(`
            INSERT INTO achievements (
              chat_id, achievement_type, achievement_name, description, 
              progress_value, icon, points
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
          `).bind(
            chatId, achievement.id, achievement.name, achievement.description,
            progressValue, achievement.icon, achievement.points
          ).run();

          // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ–ø—ã—Ç–∞
          await this.updateUserStats(chatId, {
            experiencePoints: achievement.points
          });

          // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          await this.logActivity(
            chatId, 
            'achievement_unlocked', 
            `–ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}`,
            achievement.points,
            achievement.points
          );

          newAchievements.push(achievement);
        }
      }

      return newAchievements;
    } catch (error) {
      console.error('Error checking achievements:', error);
      return [];
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  async logActivity(chatId, activityType, description, pointsEarned = 0, experienceEarned = 0) {
    try {
      await this.db.prepare(`
        INSERT INTO activity_log (chat_id, activity_type, description, points_earned, experience_earned)
        VALUES (?, ?, ?, ?, ?)
      `).bind(chatId, activityType, description, pointsEarned, experienceEarned).run();
    } catch (error) {
      console.error('Error logging activity:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  async getActivityHistory(chatId, limit = 20) {
    try {
      const activities = await this.db.prepare(`
        SELECT activity_type, description, points_earned, experience_earned, created_at
        FROM activity_log 
        WHERE chat_id = ?
        ORDER BY created_at DESC 
        LIMIT ?
      `).bind(chatId, limit).all();

      return activities.results;
    } catch (error) {
      console.error('Error getting activity history:', error);
      return [];
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async exportUserData(chatId) {
    try {
      const user = await this.getUser(chatId);
      const achievements = await this.getAchievements(chatId);
      const activityHistory = await this.getActivityHistory(chatId, 100);
      const stats = await this.getUserStats(chatId);

      return {
        user,
        achievements,
        activityHistory,
        stats,
        exportDate: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error exporting user data:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserLevel(chatId) {
    try {
      const user = await this.getUser(chatId);
      if (!user) return null;

      const currentLevel = LEVEL_SYSTEM.getLevel(user.experience_points || 0);
      const progress = LEVEL_SYSTEM.getProgress(user.experience_points || 0);
      const nextLevel = LEVEL_SYSTEM.getNextLevel(user.experience_points || 0);

      return {
        currentLevel,
        progress,
        nextLevel,
        experiencePoints: user.experience_points || 0
      };
    } catch (error) {
      console.error('Error getting user level:', error);
      return null;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async addExperience(chatId, action, context = {}) {
    try {
      const experienceGained = EXPERIENCE_SYSTEM.calculateExperience(action, context);
      
      if (experienceGained > 0) {
        const user = await this.getUser(chatId);
        const oldExperience = user.experience_points || 0;
        const newExperience = oldExperience + experienceGained;

        await this.updateUserStats(chatId, {
          experiencePoints: experienceGained
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        const oldLevel = LEVEL_SYSTEM.getLevel(oldExperience);
        const newLevel = LEVEL_SYSTEM.getLevel(newExperience);

        if (newLevel.level > oldLevel.level) {
          // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
          await this.logActivity(
            chatId,
            'level_up',
            `–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: ${oldLevel.name} ‚Üí ${newLevel.name}`,
            newLevel.level * 50,
            newLevel.level * 25
          );

          return {
            levelUp: true,
            oldLevel,
            newLevel,
            experienceGained
          };
        }

        return {
          levelUp: false,
          experienceGained
        };
      }

      return { levelUp: false, experienceGained: 0 };
    } catch (error) {
      console.error('Error adding experience:', error);
      return { levelUp: false, experienceGained: 0 };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
  async getAchievementProgress(chatId) {
    try {
      const user = await this.getUser(chatId);
      if (!user) return [];

      const achievements = await this.getAchievements(chatId);
      const unlockedTypes = achievements.map(a => a.achievement_type);

      const progress = [];
      
      for (const [type, achievement] of Object.entries(ACHIEVEMENT_TYPES)) {
        const isUnlocked = unlockedTypes.includes(achievement.id);
        const currentValue = this.getCurrentProgressValue(achievement.id, user);
        const targetValue = this.getTargetValue(achievement.id);
        const progressPercent = Math.min(Math.round((currentValue / targetValue) * 100), 100);

        progress.push({
          type,
          achievement,
          isUnlocked,
          currentValue,
          targetValue,
          progressPercent
        });
      }

      return progress;
    } catch (error) {
      console.error('Error getting achievement progress:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getCurrentProgressValue(achievementId, user) {
    switch (achievementId) {
      case 'first_test_completed':
        return user.total_questions || 0;
      case 'streak_3_days':
      case 'streak_7_days':
        return user.consecutive_days || 0;
      case 'perfect_score':
        return 0; // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      case 'speed_demon':
        return 0; // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      case 'category_master':
        return 0; // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      case 'level_5':
      case 'level_10':
        const currentLevel = LEVEL_SYSTEM.getLevel(user.experience_points || 0);
        return currentLevel.level;
      case 'first_steps':
        return user.total_questions || 0;
      case 'streak_master':
        return user.max_streak || 0;
      case 'score_100':
      case 'champion':
        return user.total_score || 0;
      default:
        return 0;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getTargetValue(achievementId) {
    switch (achievementId) {
      case 'first_test_completed':
        return 1;
      case 'streak_3_days':
        return 3;
      case 'streak_7_days':
        return 7;
      case 'perfect_score':
        return 100;
      case 'speed_demon':
        return 5;
      case 'category_master':
        return 1;
      case 'level_5':
        return 5;
      case 'level_10':
        return 10;
      case 'first_steps':
        return 10;
      case 'streak_master':
        return 5;
      case 'score_100':
        return 100;
      case 'champion':
        return 1000;
      default:
        return 1;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  async getAllUserChatIds() {
    if (!this.db) {
      console.error('[DatabaseManager] Database not available in getAllUserChatIds');
      return [];
    }
    const result = await this.db.prepare(`
      SELECT 
        chat_id as chatId,
        last_learning_date as lastLearningDate,
        last_activity as lastActiveDate
      FROM users
    `).all();
    return result.results || [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏
  async getLastMotivationSent(chatId) {
    if (!this.db) return null;
    const result = await this.db.prepare('SELECT last_motivation_sent FROM users WHERE chat_id = ?').bind(chatId).first();
    return result?.last_motivation_sent || null;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏
  async updateLastMotivationSent(chatId, date) {
    if (!this.db) return false;
    await this.db.prepare('UPDATE users SET last_motivation_sent = ? WHERE chat_id = ?').bind(date.toISOString(), chatId).run();
    return true;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getRecentAchievements(chatId, limit = 3) {
    if (!this.db) return [];
    const result = await this.db.prepare('SELECT achievement_name FROM achievements WHERE chat_id = ? ORDER BY unlocked_at DESC LIMIT ?').bind(chatId, limit).all();
    return result.results?.map(r => r.achievement_name) || [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
  async getProgressDynamics(chatId) {
    if (!this.db) return 0;
    // –ü–æ–ª—É—á–∞–µ–º XP –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥ –∏ —Å–µ–π—á–∞—Å
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();
    const xpWeekAgoResult = await this.db.prepare('SELECT experience_points FROM users WHERE chat_id = ? AND last_activity <= ? ORDER BY last_activity DESC LIMIT 1').bind(chatId, weekAgo).first();
    const xpNowResult = await this.db.prepare('SELECT experience_points FROM users WHERE chat_id = ?').bind(chatId).first();
    const xpWeekAgo = xpWeekAgoResult?.experience_points || 0;
    const xpNow = xpNowResult?.experience_points || 0;
    return xpNow - xpWeekAgo;
  }
} 
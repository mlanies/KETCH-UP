// –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
import { sendMessage } from './telegramApi.js';

export const CHALLENGE_PERIODS = {
  WEEKLY: 'weekly',
  MONTHLY: 'monthly'
};

export class ChallengeSystem {
  constructor(database, env) {
    this.database = database;
    this.env = env;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü)
  async generatePeriodicChallenges(period = CHALLENGE_PERIODS.WEEKLY) {
    // –ü—Ä–∏–º–µ—Ä—ã —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    const challengeTemplates = [
      {
        type: 'lessons',
        description: '–ü—Ä–æ–π–¥–∏ 3 —É—Ä–æ–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é',
        period: CHALLENGE_PERIODS.WEEKLY,
        reward: '50 XP',
        target: 3
      },
      {
        type: 'accuracy',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏ 80% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü',
        period: CHALLENGE_PERIODS.MONTHLY,
        reward: '100 XP',
        target: 0.8
      },
      {
        type: 'streak',
        description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤',
        period: CHALLENGE_PERIODS.WEEKLY,
        reward: '70 XP',
        target: 7
      }
    ];
    const now = new Date();
    let startDate, endDate;
    if (period === CHALLENGE_PERIODS.WEEKLY) {
      // –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
      const day = now.getDay() || 7;
      startDate = new Date(now);
      startDate.setDate(now.getDate() - day + 1);
      endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 6);
    } else {
      // –ú–µ—Å—è—Ü
      startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    }
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: —Å–æ–∑–¥–∞—ë–º –ø–æ –æ–¥–Ω–æ–º—É —á–µ–ª–ª–µ–Ω–¥–∂—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    for (const tpl of challengeTemplates.filter(t => t.period === period)) {
      await this.database.prepare(
        'INSERT INTO challenges (type, description, period, reward, start_date, end_date) VALUES (?, ?, ?, ?, ?, ?)'
      ).bind(
        tpl.type, tpl.description, tpl.period, tpl.reward,
        startDate.toISOString().split('T')[0], endDate.toISOString().split('T')[0]
      ).run();
    }
  }

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  async autoAssignChallengesToAllUsers(period = CHALLENGE_PERIODS.WEEKLY) {
    const users = await this.database.getAllUserChatIds();
    const now = new Date();
    const challenges = await this.database.prepare(
      'SELECT * FROM challenges WHERE period = ? AND start_date <= ? AND end_date >= ?'
    ).bind(period, now.toISOString().split('T')[0], now.toISOString().split('T')[0]).all();
    for (const user of users) {
      for (const challenge of challenges.results) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å
        const exists = await this.database.prepare(
          'SELECT id FROM challenge_progress WHERE user_id = ? AND challenge_id = ?'
        ).bind(user.chatId, challenge.id).first();
        if (!exists) {
          await this.database.prepare(
            'INSERT INTO challenge_progress (user_id, challenge_id, progress, completed) VALUES (?, ?, 0, 0)'
          ).bind(user.chatId, challenge.id).run();
        }
      }
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getUserChallenges(chatId, period = CHALLENGE_PERIODS.WEEKLY) {
    const now = new Date();
    const challenges = await this.database.prepare(
      `SELECT c.*, cp.progress, cp.completed, cp.completed_at
       FROM challenges c
       JOIN challenge_progress cp ON c.id = cp.challenge_id
       WHERE cp.user_id = ? AND c.period = ? AND c.start_date <= ? AND c.end_date >= ?`
    ).bind(chatId, period, now.toISOString().split('T')[0], now.toISOString().split('T')[0]).all();
    return challenges.results;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —á–µ–ª–ª–µ–Ω–¥–∂—É
  async updateChallengeProgress(chatId, challengeId, value) {
    await this.database.prepare(
      'UPDATE challenge_progress SET progress = ? WHERE user_id = ? AND challenge_id = ?'
    ).bind(value, chatId, challengeId).run();
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂, –≤—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∏ —É–≤–µ–¥–æ–º–∏—Ç—å
  async completeChallenge(chatId, challengeId) {
    await this.database.prepare(
      'UPDATE challenge_progress SET completed = 1, completed_at = CURRENT_TIMESTAMP WHERE user_id = ? AND challenge_id = ?'
    ).bind(chatId, challengeId).run();
    // –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂
    const challenge = await this.database.prepare(
      'SELECT * FROM challenges WHERE id = ?'
    ).bind(challengeId).first();
    // –í—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É (–ø—Ä–∏–º–µ—Ä: –æ–ø—ã—Ç)
    if (challenge && challenge.reward) {
      // –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–ø—ã—Ç–∞/–∞—á–∏–≤–æ–∫
      await sendMessage(chatId, `üéâ –ß–µ–ª–ª–µ–Ω–¥–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n${challenge.description}\n\nüèÜ –ù–∞–≥—Ä–∞–¥–∞: ${challenge.reward}`);
    }
  }
} 
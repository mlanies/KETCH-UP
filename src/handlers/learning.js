// –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ —Å –ò–ò

import { getWineData } from './data.js';
import { sendMessage, sendMessageWithKeyboard, editMessage, answerCallbackQuery } from './telegramApi.js';
import { askCloudflareAI } from './ai.js';
import { 
  updateAnalytics, 
  startLearningSession, 
  generatePersonalizedReport,
  generatePersonalizedAIQuestion,
  showDetailedAnalytics,
  exportUserData,
  getUserAnalytics
} from './learningAnalytics.js';
import { DatabaseManager } from './database.js';
import { AchievementSystem } from './achievements.js';
import { DailyChallengeSystem } from './dailyChallenges.js';
import { ChallengeSystem, CHALLENGE_PERIODS } from './challenges.js';
import { generateAdviceForWeakTopics } from './ai.js';

// –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const learningStates = new Map();

// –ö—ç—à –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
const questionCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
const QUESTION_TYPES = {
  WINE_PAIRING: 'wine_pairing',
  SERVING_TEMP: 'serving_temp',
  GLASSWARE: 'glassware',
  DESCRIPTION: 'description',
  COUNTRY: 'country',
  ALCOHOL_CONTENT: 'alcohol_content',
  INGREDIENTS: 'ingredients',
  METHOD: 'method'
};

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
class LearningState {
  constructor() {
    this.currentLesson = null;
    this.currentQuestion = null;
    this.score = 0;
    this.totalQuestions = 0;
    this.correctAnswers = 0;
    this.incorrectAnswers = [];
    this.learningProgress = new Map(); // –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    this.difficulty = 'beginner'; // beginner, intermediate, advanced
    this.streak = 0; // —Å–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    this.sessionId = null; // ID —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    this.startTime = Date.now(); // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
async function generateAIQuestion(wines, questionType, difficulty, env, userContext = {}) {
  const randomWine = wines[Math.floor(Math.random() * wines.length)];

  let prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Å–æ–º–µ–ª—å–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—É—á–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.

–°–æ–∑–¥–∞–π –û–î–ò–ù –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π) –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ: ${randomWine.name}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${randomWine.category}
${randomWine.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${randomWine.description}` : ''}
${randomWine.country ? `–°—Ç—Ä–∞–Ω–∞: ${randomWine.country}` : ''}
${randomWine.alcohol ? `–ö—Ä–µ–ø–æ—Å—Ç—å: ${randomWine.alcohol}` : ''}
${randomWine.sugar ? `–°–∞—Ö–∞—Ä: ${randomWine.sugar}` : ''}
${randomWine.method ? `–ú–µ—Ç–æ–¥: ${randomWine.method}` : ''}
${randomWine.glassware ? `–ü–æ—Å—É–¥–∞: ${randomWine.glassware}` : ''}
${randomWine.ingredients ? `–°–æ—Å—Ç–∞–≤: ${randomWine.ingredients}` : ''}

–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: ${questionType}
–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–°–¢–†–û–ì–û!):
–í–û–ü–†–û–°: [–≤–æ–ø—Ä–æ—Å]
A) [–≤–∞—Ä–∏–∞–Ω—Ç A]
B) [–≤–∞—Ä–∏–∞–Ω—Ç B]
C) [–≤–∞—Ä–∏–∞–Ω—Ç C]
D) [–≤–∞—Ä–∏–∞–Ω—Ç D]
–ü–†–ê–í–ò–õ–¨–ù–´–ô: [–±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]
–û–ë–™–Ø–°–ù–ï–ù–ò–ï: [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç]

–ü—Ä–∏–º–µ—Ä:
–í–û–ü–†–û–°: –ö–∞–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Ä—Ç –≤–∏–Ω–æ–≥—Ä–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–∏–Ω–µ X?
A) –ö–∞–±–µ—Ä–Ω–µ –°–æ–≤–∏–Ω—å–æ–Ω
B) –ú–µ—Ä–ª–æ
C) –®–∞—Ä–¥–æ–Ω–µ
D) –ü–∏–Ω–æ –ù—É–∞—Ä
–ü–†–ê–í–ò–õ–¨–ù–´–ô: C
–û–ë–™–Ø–°–ù–ï–ù–ò–ï: –í –≤–∏–Ω–µ X –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ä—Ç –®–∞—Ä–¥–æ–Ω–µ.

–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É!`;

  // –î–æ–±–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å userContext
  if (userContext && userContext.difficulty) {
    prompt += `\n\n–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userContext.difficulty}`;
  }
  if (userContext && userContext.preferences) {
    prompt += `\n\n–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userContext.preferences.join(', ')}`;
  }

  try {
    const aiResponse = await askCloudflareAI(prompt, env);
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    const cleanResponse = aiResponse.replace(/^(–ö–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å:|–í–æ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å:|–í–æ–ø—Ä–æ—Å:|Q:)/i, '').trim();
    const lines = cleanResponse.split('\n');
    let question = '';
    let options = {};
    let correctAnswer = '';
    let explanation = '';
    for (let line of lines) {
      line = line.trim();
      if (line.startsWith('–í–û–ü–†–û–°:')) {
        question = line.replace('–í–û–ü–†–û–°:', '').trim();
      } else if (line.startsWith('A)')) {
        options.A = line.replace('A)', '').trim();
      } else if (line.startsWith('B)')) {
        options.B = line.replace('B)', '').trim();
      } else if (line.startsWith('C)')) {
        options.C = line.replace('C)', '').trim();
      } else if (line.startsWith('D)')) {
        options.D = line.replace('D)', '').trim();
      } else if (line.startsWith('–ü–†–ê–í–ò–õ–¨–ù–´–ô:')) {
        correctAnswer = line.replace('–ü–†–ê–í–ò–õ–¨–ù–´–ô:', '').trim();
      } else if (line.startsWith('–û–ë–™–Ø–°–ù–ï–ù–ò–ï:')) {
        explanation = line.replace('–û–ë–™–Ø–°–ù–ï–ù–ò–ï:', '').trim();
      }
    }
    if (question && Object.keys(options).length === 4 && correctAnswer && explanation) {
      return {
        question,
        options,
        correctAnswer,
        explanation,
        wineId: randomWine.id,
        wineName: randomWine.name
      };
    }
  } catch (error) {
    console.error('Error generating AI question:', error);
  }
  // Fallback - —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
  return generateFallbackQuestion(randomWine, questionType);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
function getCachedQuestions(category, questionType) {
  const cacheKey = `${category}_${questionType}`;
  const cached = questionCache.get(cacheKey);
  
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    return cached.questions;
  }
  
  return null;
}

function setCachedQuestions(category, questionType, questions) {
  const cacheKey = `${category}_${questionType}`;
  questionCache.set(cacheKey, {
    questions,
    timestamp: Date.now()
  });
}

// Fallback –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
function generateFallbackQuestion(wine, questionType) {
  const questions = {
    [QUESTION_TYPES.WINE_PAIRING]: {
      question: `–° –∫–∞–∫–∏–º–∏ –±–ª—é–¥–∞–º–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–∞–≤–∞—Ç—å ${wine.name}?`,
      options: {
        A: '–° –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —Ä—ã–±–æ–π',
        B: '–° –∫—Ä–∞—Å–Ω—ã–º –º—è—Å–æ–º –∏ –ø–∞—Å—Ç–æ–π',
        C: '–° –¥–µ—Å–µ—Ä—Ç–∞–º–∏ –∏ —Å–ª–∞–¥–æ—Å—Ç—è–º–∏',
        D: '–° –æ—Å—Ç—Ä—ã–º–∏ –±–ª—é–¥–∞–º–∏'
      },
      correctAnswer: wine.category === '–í–∏–Ω–∞' && wine.sugar === '–°—É—Ö–æ–µ' ? 'B' : 'A',
      explanation: '–í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –≤–∏–Ω–∞ –∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫'
    },
    [QUESTION_TYPES.SERVING_TEMP]: {
      question: `–ü—Ä–∏ –∫–∞–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å ${wine.name}?`,
      options: {
        A: '4-6¬∞C',
        B: '8-12¬∞C', 
        C: '16-18¬∞C',
        D: '20-22¬∞C'
      },
      correctAnswer: wine.category === '–í–∏–Ω–∞' ? 'B' : 'A',
      explanation: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –Ω–∞–ø–∏—Ç–∫–∞'
    },
    [QUESTION_TYPES.GLASSWARE]: {
      question: `–í –∫–∞–∫–æ–º –±–æ–∫–∞–ª–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å ${wine.name}?`,
      options: {
        A: '–í —Ñ–ª–µ–π—Ç–µ',
        B: '–í –±–æ–∫–∞–ª–µ –¥–ª—è –≤–∏–Ω–∞',
        C: '–í —Å—Ç–∞–∫–∞–Ω–µ –¥–ª—è –≤–∏—Å–∫–∏',
        D: '–í –ø–∏–≤–Ω–æ–º –±–æ–∫–∞–ª–µ'
      },
      correctAnswer: wine.category === '–í–∏–Ω–∞' ? 'B' : 'A',
      explanation: '–í—ã–±–æ—Ä –±–æ–∫–∞–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –Ω–∞–ø–∏—Ç–∫–∞'
    }
  };
  
  return {
    ...questions[questionType] || questions[QUESTION_TYPES.WINE_PAIRING],
    wineId: wine.id,
    wineName: wine.name
  };
}

// –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è
export async function startLearning(chatId, env) {
  const state = new LearningState();
  learningStates.set(chatId, state);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const database = new DatabaseManager(env);
  await database.initUser(chatId);
  
  const welcomeText = `üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è!*

–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ üìö –ò–∑—É—á–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –Ω–∞–ø–∏—Ç–∫–æ–≤
‚Ä¢ üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã —Å –ò–ò
‚Ä¢ üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ üèÜ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ üìÖ –í—ã–ø–æ–ª–Ω—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç', callback_data: 'learning_quick_test' },
        { text: 'üìö –£—Ä–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'learning_category_lesson' }
      ],
      [
        { text: 'üß† –ò–ò-–æ–±—É—á–µ–Ω–∏–µ', callback_data: 'learning_ai_mode' },
        { text: 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'learning_progress' }
      ],
      [
        { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'learning_achievements' },
        { text: 'üìÖ –ó–∞–¥–∞–Ω–∏—è', callback_data: 'daily_challenges' }
      ],
      [
        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'user_profile' },
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'learning_settings' }
      ],
      [
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };
  
  await sendMessageWithKeyboard(chatId, welcomeText, keyboard, env);
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
export async function startQuickTest(chatId, env) {
  const state = learningStates.get(chatId) || new LearningState();
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const database = new DatabaseManager(env);
  const sessionId = await database.createLearningSession(chatId, 'quick_test');
  
  state.currentLesson = 'quick_test';
  state.sessionId = sessionId;
  state.totalQuestions = 5;
  state.score = 0;
  state.correctAnswers = 0;
  state.incorrectAnswers = [];
  state.streak = 0;
  state.startTime = Date.now();
  learningStates.set(chatId, state);
  
  // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
  startLearningSession(chatId);
  
  await sendNextQuestion(chatId, env);
}

// –£—Ä–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function startCategoryLesson(chatId, env) {
  const wines = await getWineData(env);
  const categories = [...new Set(wines.map(w => w.category))];
  
  // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryMap = {};
  categories.forEach((category, index) => {
    categoryMap[`cat_${index}`] = category;
  });
  
  const keyboard = {
    inline_keyboard: categories.map((category, index) => ([
      { text: category, callback_data: `learning_category_cat_${index}` }
    ])).concat([
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }]
    ])
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const state = learningStates.get(chatId) || new LearningState();
  state.categoryMap = categoryMap;
  learningStates.set(chatId, state);
  
  await sendMessageWithKeyboard(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:', keyboard, env);
}

// –ò–ò-—Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
export async function startAIMode(chatId, env) {
  const state = learningStates.get(chatId) || new LearningState();
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const database = new DatabaseManager(env);
  const sessionId = await database.createLearningSession(chatId, 'ai_mode');
  
  state.currentLesson = 'ai_mode';
  state.sessionId = sessionId;
  state.totalQuestions = 10;
  state.score = 0;
  state.correctAnswers = 0;
  state.incorrectAnswers = [];
  state.streak = 0;
  state.startTime = Date.now();
  learningStates.set(chatId, state);
  
  // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
  startLearningSession(chatId);
  
  await sendMessage(chatId, 'ü§ñ –ó–∞–ø—É—Å–∫–∞—é –ò–ò-—Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è...\n\n–ò–ò –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.', env);
  await sendNextAIQuestion(chatId, env);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async function sendNextQuestion(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state || state.correctAnswers >= state.totalQuestions) {
    await finishLesson(chatId, env);
    return;
  }
  
  try {
    console.log('=== sendNextQuestion START ===');
    console.log('chatId:', chatId);
    console.log('state:', {
      correctAnswers: state.correctAnswers,
      totalQuestions: state.totalQuestions,
      difficulty: state.difficulty
    });
    
    const wines = await getWineData(env);
    console.log('Wines loaded:', wines.length);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const questionTypes = Object.values(QUESTION_TYPES);
    let selectedType;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const accuracy = state.correctAnswers > 0 ? state.correctAnswers / (state.correctAnswers + state.incorrectAnswers.length) : 0.5;
    
    if (accuracy > 0.8 && state.difficulty === 'beginner') {
      // –ü–æ–≤—ã—à–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
      state.difficulty = 'intermediate';
      console.log('Upgrading difficulty to intermediate');
    } else if (accuracy > 0.9 && state.difficulty === 'intermediate') {
      // –ü–æ–≤—ã—à–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
      state.difficulty = 'advanced';
      console.log('Upgrading difficulty to advanced');
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (state.difficulty === 'beginner') {
      selectedType = ['wine_pairing', 'country', 'description'][Math.floor(Math.random() * 3)];
    } else if (state.difficulty === 'intermediate') {
      selectedType = ['serving_temp', 'glassware', 'alcohol_content'][Math.floor(Math.random() * 3)];
    } else {
      selectedType = questionTypes[Math.floor(Math.random() * questionTypes.length)];
    }
    
    console.log('Selected question type:', selectedType);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ –∫—ç—à–∞
    const cachedQuestions = getCachedQuestions('general', selectedType);
    let question;
    
    if (cachedQuestions && cachedQuestions.length > 0) {
      question = cachedQuestions[Math.floor(Math.random() * cachedQuestions.length)];
      console.log('Using cached question');
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
      const randomWine = wines[Math.floor(Math.random() * wines.length)];
      question = generateFallbackQuestion(randomWine, selectedType);
      
      // –ö—ç—à–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
      const questions = [question];
      setCachedQuestions('general', selectedType, questions);
      console.log('Generated and cached new question');
    }
    
    state.currentQuestion = question;
    
    const questionText = `‚ùì *–í–æ–ø—Ä–æ—Å ${state.correctAnswers + 1}/${state.totalQuestions}*
üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${state.difficulty === 'beginner' ? 'üü¢ –ù–æ–≤–∏—á–æ–∫' : state.difficulty === 'intermediate' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}

${question.question}

*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*
–ê. ${question.options.A}
–ë. ${question.options.B}
–í. ${question.options.C}
–ì. ${question.options.D}`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '–ê', callback_data: `learning_answer_A` },
          { text: '–ë', callback_data: `learning_answer_B` },
          { text: '–í', callback_data: `learning_answer_C` },
          { text: '–ì', callback_data: `learning_answer_D` }
        ],
        [
          { text: 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞', callback_data: 'learning_hint' },
          { text: 'üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'learning_finish' }
        ]
      ]
    };
    
    console.log('Sending question with keyboard...');
    await sendMessageWithKeyboard(chatId, questionText, keyboard, env);
    console.log('=== sendNextQuestion END ===');
  } catch (error) {
    console.error('Error in sendNextQuestion:', error);
    console.error('Error stack:', error.stack);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ò–ò-–≤–æ–ø—Ä–æ—Å–∞
async function sendNextAIQuestion(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state || state.correctAnswers >= state.totalQuestions) {
    await finishLesson(chatId, env);
    return;
  }
  
  const wines = await getWineData(env);
  const questionTypes = Object.values(QUESTION_TYPES);
  const randomType = questionTypes[Math.floor(Math.random() * questionTypes.length)];
  
  await sendMessage(chatId, 'ü§ñ –ò–ò —Å–æ–∑–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å...', env);
  
  const question = await generateAIQuestion(wines, randomType, state.difficulty, env);
  state.currentQuestion = question;
  
  const questionText = `ü§ñ *–ò–ò-–≤–æ–ø—Ä–æ—Å ${state.correctAnswers + 1}/${state.totalQuestions}*

${question.question}

*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*
–ê. ${question.options.A}
–ë. ${question.options.B}
–í. ${question.options.C}
–ì. ${question.options.D}`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '–ê', callback_data: `learning_answer_A` },
        { text: '–ë', callback_data: `learning_answer_B` },
        { text: '–í', callback_data: `learning_answer_C` },
        { text: '–ì', callback_data: `learning_answer_D` }
      ],
      [
        { text: 'üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'learning_finish' }
      ]
    ]
  };
  
  await sendMessageWithKeyboard(chatId, questionText, keyboard, env);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
export async function handleLearningAnswer(chatId, answer, env) {
  const state = learningStates.get(chatId);
  if (!state || !state.currentQuestion) {
    await sendMessage(chatId, '–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.', env);
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
  const database = new DatabaseManager(env);
  const achievements = new AchievementSystem(database, env);
  const dailyChallenges = new DailyChallengeSystem(database, env);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await database.initUser(chatId);
  
  const isCorrect = answer === state.currentQuestion.correctAnswer;
  const responseTime = Date.now() - state.startTime;
  state.totalQuestions++;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (state.sessionId) {
    const wineCategory = state.currentQuestion.wineName ? 
      (await getWineData(env)).find(w => w.id === state.currentQuestion.wineId)?.category : '–û–±—â–µ–µ';
    
    await database.saveAnswer(chatId, state.sessionId, {
      questionText: state.currentQuestion.question,
      userAnswer: answer,
      correctAnswer: state.currentQuestion.correctAnswer,
      isCorrect,
      category: wineCategory,
      questionType: state.currentQuestion.questionType || 'general',
      wineId: state.currentQuestion.wineId,
      responseTimeMs: responseTime
    });
  }
  
  if (isCorrect) {
    state.correctAnswers++;
    state.streak++;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    const context = {
      isWeekend: [0, 6].includes(new Date().getDay()),
      isFirstSession: true, // TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –¥–Ω—è
      consecutiveDays: 1 // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    };
    
    const rewards = achievements.calculateAnswerRewards(true, state.streak, context);
    state.score += rewards.points;
    
    let message = `‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* +${rewards.points} –±–∞–ª–ª–æ–≤\n\n`;
    message += `üéØ –°–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.streak}\n`;
    message += `üìä –û–±—â–∏–π —Å—á–µ—Ç: ${state.score} –±–∞–ª–ª–æ–≤\n`;
    message += `üíé +${rewards.experience} XP\n\n`;
    message += `üí° *–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:*\n${state.currentQuestion.explanation}`;
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏—é
    if (state.streak >= 3) {
      const streakBonus = Math.min(state.streak * 2, 20);
      message += `\n\nüî• *–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é:* +${streakBonus} –±–∞–ª–ª–æ–≤!`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data: 'learning_next_question' },
          { text: 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'learning_finish' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, message, keyboard, env);
  } else {
    state.streak = 0;
    state.incorrectAnswers.push({
      question: state.currentQuestion.question,
      userAnswer: answer,
      correctAnswer: state.currentQuestion.correctAnswer,
      wineName: state.currentQuestion.wineName
    });
    
    const rewards = achievements.calculateAnswerRewards(false, 0);
    state.score += rewards.points;
    
    let message = `‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n`;
    message += `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${state.currentQuestion.correctAnswer})\n`;
    message += `üìä –û–±—â–∏–π —Å—á–µ—Ç: ${state.score} –±–∞–ª–ª–æ–≤\n`;
    message += `üíé +${rewards.experience} XP\n\n`;
    message += `üí° *–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:*\n${state.currentQuestion.explanation}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data: 'learning_next_question' },
          { text: 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'learning_finish' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, message, keyboard, env);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const wineCategory = state.currentQuestion.wineName ? 
    (await getWineData(env)).find(w => w.id === state.currentQuestion.wineId)?.category : '–û–±—â–µ–µ';
  
  if (!state.learningProgress.has(wineCategory)) {
    state.learningProgress.set(wineCategory, { correct: 0, total: 0 });
  }
  const progress = state.learningProgress.get(wineCategory);
  progress.total++;
  if (isCorrect) progress.correct++;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  const questionType = state.currentQuestion.questionType || 'general';
  updateAnalytics(chatId, wineCategory, questionType, isCorrect);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
  await dailyChallenges.checkAndUpdateProgress(chatId, 'answer_question', 1);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  state.startTime = Date.now();
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
async function finishLesson(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state) return;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
  const database = new DatabaseManager(env);
  const achievements = new AchievementSystem(database, env);
  const dailyChallenges = new DailyChallengeSystem(database, env);
  
  const analyticsFinish = getUserAnalytics(chatId);
  const weakCategoriesFinish = analyticsFinish.weakCategories || [];
  const accuracyFinish = analyticsFinish.getOverallAccuracy();
  const totalQuestionsFinish = analyticsFinish.totalQuestions;

  const weakCategoryButtonsFinish = weakCategoriesFinish.slice(0, 3).map(cat => ([{ text: `–¢–µ—Å—Ç –ø–æ ${cat}`, callback_data: `learning_category_${cat}` }]));
  const aiModeButtonFinish = (accuracyFinish > 0.8 && totalQuestionsFinish > 20) ? [[{ text: 'ü§ñ –ò–ò-—Ä–µ–∂–∏–º', callback_data: 'learning_ai_mode' }]] : [];
  const mainButtonsFinish = [
    [{ text: 'üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç', callback_data: 'learning_quick_test' }],
    [{ text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'learning_detailed_analytics' }],
    [{ text: 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'learning_finish' }]
  ];
  const keyboardFinish = {
    inline_keyboard: [
      ...weakCategoryButtonsFinish,
      ...aiModeButtonFinish,
      ...mainButtonsFinish
    ]
  };
  
  const grade = getGrade(accuracyFinish);
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  if (state.sessionId) {
    const sessionStats = {
      totalQuestions: state.totalQuestions,
      correctAnswers: state.correctAnswers,
      score: state.score,
      experienceGained: Math.round(state.score * 0.5) // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–ø—ã—Ç–∞
    };
    
    await database.finishLearningSession(state.sessionId, sessionStats);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userStats = {
    totalScore: state.score,
    totalQuestions: state.totalQuestions,
    totalCorrect: state.correctAnswers,
    learningStreak: state.streak,
    maxStreak: state.streak, // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    experiencePoints: Math.round(state.score * 0.5)
  };
  
  await database.updateUserStats(chatId, userStats);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const stats = {
    totalQuestions: state.totalQuestions,
    totalScore: state.score,
    maxStreak: state.streak,
    aiQuestions: state.currentLesson === 'ai_mode' ? state.totalQuestions : 0,
    categoriesStudied: state.learningProgress.size
  };
  
  const newAchievements = await achievements.checkAchievements(chatId, stats);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  const user = await database.getUser(chatId);
  if (user) {
    const oldExperience = user.experience_points - userStats.experiencePoints;
    const newExperience = user.experience_points;
    await achievements.checkLevelUp(chatId, oldExperience, newExperience);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
  if (accuracyFinish >= 80 && state.totalQuestions >= 5) {
    await dailyChallenges.checkAndUpdateProgress(chatId, 'test_completed', accuracyFinish);
  }
  
  let message = `üéì *–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n`;
  message += `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n`;
  message += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.correctAnswers}/${state.totalQuestions}\n`;
  message += `üìà –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracyFinish}%\n`;
  message += `üèÜ –û—Ü–µ–Ω–∫–∞: ${grade}\n`;
  message += `üíé –û–±—â–∏–π —Å—á–µ—Ç: ${state.score} –±–∞–ª–ª–æ–≤\n`;
  message += `üíé –û–ø—ã—Ç: +${userStats.experiencePoints} XP\n\n`;
  
  // –ë–æ–Ω—É—Å –∑–∞ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
  if (accuracyFinish === 100 && state.totalQuestions >= 5) {
    const perfectRewards = achievements.calculatePerfectTestRewards(state.totalQuestions);
    message += `‚ú® *–ò–¥–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!* +${perfectRewards.points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤\n\n`;
  }
  
  if (state.incorrectAnswers.length > 0) {
    message += `üìù *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:*\n`;
    state.incorrectAnswers.slice(0, 3).forEach((item, index) => {
      message += `${index + 1}. ${item.wineName} - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n`;
    });
    message += '\n';
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (newAchievements.length > 0) {
    message += `üèÜ *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
    newAchievements.forEach(achievement => {
      message += `‚Ä¢ ${achievement.icon} ${achievement.name}\n`;
    });
    message += '\n';
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const analytics = getUserAnalytics(chatId);
  const weakCategories = analytics.weakCategories || [];
  const accuracy = analytics.getOverallAccuracy();
  const totalQuestions = analytics.totalQuestions;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö —Ç–µ–º
  const weakCategoryButtons = weakCategories.slice(0, 3).map(cat => ([{ text: `–¢–µ—Å—Ç –ø–æ ${cat}`, callback_data: `learning_category_${cat}` }]));

  // –ö–Ω–æ–ø–∫–∞ AI-—Ä–µ–∂–∏–º–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö
  const aiModeButton = (accuracy > 0.8 && totalQuestions > 20) ? [[{ text: 'ü§ñ –ò–ò-—Ä–µ–∂–∏–º', callback_data: 'learning_ai_mode' }]] : [];

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI-—Å–æ–≤–µ—Ç –ø–æ —Å–ª–∞–±–æ–π —Ç–µ–º–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (weakCategories.length > 0) {
    try {
      const weakTopic = weakCategories[0];
      const userStats = { accuracy, totalQuestions };
      const aiAdvice = await generateAdviceForWeakTopics(chatId, weakTopic, env, userStats);
      await sendMessage(chatId, `üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ "${weakTopic}":\n${aiAdvice}`, env);
    } catch (e) {
      console.error('AI advice error:', e);
    }
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const mainButtons = [
    [{ text: 'üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç', callback_data: 'learning_quick_test' }],
    [{ text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'learning_detailed_analytics' }],
    [{ text: 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'learning_finish' }]
  ];

  const keyboard = {
    inline_keyboard: [
      ...weakCategoryButtons,
      ...aiModeButton,
      ...mainButtons
    ]
  };
  
  await sendMessageWithKeyboard(chatId, message, keyboard, env);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  await database.logActivity(
    chatId,
    'session_completed',
    `–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—Å–∏—è: ${state.currentLesson || '–æ–±—É—á–µ–Ω–∏–µ'}`,
    state.score,
    userStats.experiencePoints
  );
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  state.currentLesson = null;
  state.currentQuestion = null;
  state.sessionId = null;

  // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  const feedbackKeyboard = {
    inline_keyboard: [
      [
        { text: 'üëç –í—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', callback_data: 'feedback_like' },
        { text: 'ü§î –ë—ã–ª–∏ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'feedback_hard' }
      ],
      [
        { text: 'üò¥ –°–ª–∏—à–∫–æ–º –ª–µ–≥–∫–æ', callback_data: 'feedback_easy' },
        { text: '‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'feedback_comment' }
      ]
    ]
  };
  await sendMessageWithKeyboard(chatId, 'üó£Ô∏è *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\n–ß—Ç–æ –±—ã–ª–æ —Å–ª–æ–∂–Ω–æ/–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.', feedbackKeyboard, env);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º/–µ–∂–µ–º–µ—Å—è—á–Ω—ã–º —á–µ–ª–ª–µ–Ω–¥–∂–∞–º
  try {
    const challengeSystem = new ChallengeSystem(database, env);
    // –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (weekly + monthly)
    const weeklyChallenges = await challengeSystem.getUserChallenges(chatId, CHALLENGE_PERIODS.WEEKLY);
    const monthlyChallenges = await challengeSystem.getUserChallenges(chatId, CHALLENGE_PERIODS.MONTHLY);
    const allChallenges = [...weeklyChallenges, ...monthlyChallenges];
    for (const challenge of allChallenges) {
      if (challenge.completed) continue;
      // –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–∏–ø—É —á–µ–ª–ª–µ–Ω–¥–∂–∞
      if (challenge.type === 'lessons') {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 1 –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫
        await challengeSystem.updateChallengeProgress(chatId, challenge.id, (challenge.progress || 0) + 1);
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–∞—Ä–≥–µ—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂
        if ((challenge.progress || 0) + 1 >= challenge.target) {
          await challengeSystem.completeChallenge(chatId, challenge.id);
        }
      }
      if (challenge.type === 'streak') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await database.getUser(chatId);
        if (user && user.learning_streak >= challenge.target) {
          await challengeSystem.updateChallengeProgress(chatId, challenge.id, user.learning_streak);
          await challengeSystem.completeChallenge(chatId, challenge.id);
        }
      }
      if (challenge.type === 'accuracy') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥ (–ø—Ä–∏–º–µ—Ä: –∑–∞ –º–µ—Å—è—Ü)
        const accuracy = state.totalQuestions > 0 ? state.correctAnswers / state.totalQuestions : 0;
        await challengeSystem.updateChallengeProgress(chatId, challenge.id, accuracy);
        if (accuracy >= challenge.target) {
          await challengeSystem.completeChallenge(chatId, challenge.id);
        }
      }
    }
  } catch (e) {
    console.error('ChallengeSystem integration error:', e);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
function getGrade(accuracy) {
  if (accuracy >= 90) return 'A+ üèÜ';
  if (accuracy >= 80) return 'A ü•á';
  if (accuracy >= 70) return 'B ü•à';
  if (accuracy >= 60) return 'C ü•â';
  if (accuracy >= 50) return 'D üìö';
  return 'F ‚ùå';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements(state) {
  const achievements = [];
  
  if (state.correctAnswers >= 10 && !state.achievements?.includes('–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏')) {
    achievements.push('üéØ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ - 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤');
  }
  
  if (state.streak >= 5 && !state.achievements?.includes('–°–µ—Ä–∏—è –ø–æ–±–µ–¥')) {
    achievements.push('üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥ - 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥');
  }
  
  if (state.score >= 100 && !state.achievements?.includes('–°—Ç–æ–±–∞–ª–ª—å–Ω–∏–∫')) {
    achievements.push('üíé –°—Ç–æ–±–∞–ª–ª—å–Ω–∏–∫ - 100 –±–∞–ª–ª–æ–≤');
  }
  
  if (!state.achievements) state.achievements = [];
  state.achievements.push(...achievements.map(a => a.split(' - ')[1]));
  
  return achievements;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
export async function showProgress(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state) {
    await sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!', env);
    return;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
  const report = await generatePersonalizedReport(chatId, env);
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const analyticsProgress = getUserAnalytics(chatId);
  const weakCategoriesProgress = analyticsProgress.weakCategories || [];
  const accuracyProgress = analyticsProgress.getOverallAccuracy();
  const totalQuestionsProgress = analyticsProgress.totalQuestions;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö —Ç–µ–º
  const weakCategoryButtonsProgress = weakCategoriesProgress.slice(0, 3).map(cat => ([{ text: `–¢–µ—Å—Ç –ø–æ ${cat}`, callback_data: `learning_category_${cat}` }]));

  // –ö–Ω–æ–ø–∫–∞ AI-—Ä–µ–∂–∏–º–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö
  const aiModeButtonProgress = (accuracyProgress > 0.8 && totalQuestionsProgress > 20) ? [[{ text: 'ü§ñ –ò–ò-—Ä–µ–∂–∏–º', callback_data: 'learning_ai_mode' }]] : [];

  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const mainButtonsProgress = [
    [{ text: 'üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç', callback_data: 'learning_quick_test' }],
    [{ text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'learning_detailed_analytics' }],
    [{ text: 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'learning_finish' }]
  ];

  const keyboardProgress = {
    inline_keyboard: [
      ...weakCategoryButtonsProgress,
      ...aiModeButtonProgress,
      ...mainButtonsProgress
    ]
  };
  
  await sendMessageWithKeyboard(chatId, report, keyboardProgress, env);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
export async function handleLearningCallback(data, chatId, messageId, env) {
  try {
    if (data === 'learning_start') {
      await startLearning(chatId, env);
    } else if (data === 'learning_quick_test') {
      await startQuickTest(chatId, env);
    } else if (data === 'learning_category_lesson') {
      await startCategoryLesson(chatId, env);
    } else if (data === 'learning_ai_mode') {
      await startAIMode(chatId, env);
    } else if (data === 'learning_progress') {
      await showProgress(chatId, env);
    } else if (data === 'learning_achievements') {
      await showAchievements(chatId, env);
    } else if (data === 'learning_settings') {
      await showLearningSettings(chatId, env);
    } else if (data === 'learning_finish') {
      await finishLesson(chatId, env);
    } else if (data.startsWith('learning_answer_')) {
      const answer = data.replace('learning_answer_', '');
      await handleLearningAnswer(chatId, answer, env);
    } else if (data.startsWith('learning_category_')) {
      const categoryId = data.replace('learning_category_', '');
      const state = learningStates.get(chatId);
      const category = state?.categoryMap?.[categoryId] || categoryId;
      await startCategorySpecificLesson(chatId, category, env);
    } else if (data === 'learning_detailed_analytics') {
      await showDetailedAnalytics(chatId, env);
    } else if (data === 'learning_personalized_test') {
      await startPersonalizedTest(chatId, env);
    } else if (data === 'learning_export_data') {
      await exportLearningData(chatId, env);
    } else if (data === 'learning_charts') {
      await showLearningCharts(chatId, env);
    } else if (data === 'learning_next_question') {
      await sendNextQuestionBasedOnLesson(chatId, env);
    } else if (data === 'learning_hint') {
      await showHint(chatId, env);
    } else if (data === 'learning_back_to_question') {
      await showCurrentQuestion(chatId, env);
    } else if (data === 'user_profile') {
      await showUserProfile(chatId, env);
    } else if (data === 'daily_challenges') {
      try {
        console.log('Handling daily_challenges callback - START');
        console.log('chatId:', chatId);
        console.log('env keys:', Object.keys(env));
        console.log('About to call showDailyChallenges...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ env —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏
        if (!env.DB) {
          console.error('DB not found in env');
          await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', env);
          return;
        }
        
        await showDailyChallenges(chatId, env);
        console.log('Handling daily_challenges callback - END');
      } catch (error) {
        console.error('Error in daily_challenges handler:', error);
        console.error('Error stack:', error.stack);
        await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π', env);
      }
    } else if (data === 'daily_challenges_refresh') {
      await showDailyChallenges(chatId, env);
    } else if (data === 'daily_challenges_stats') {
      await showChallengeStats(chatId, env);
    } else if (data === 'achievements_history') {
      await showAchievementsHistory(chatId, env);
    } else if (data === 'detailed_stats') {
      await showDetailedStats(chatId, env);
    } else if (data === 'feedback_like') {
      await saveUserFeedback(chatId, 'like', null, null, env);
      console.log('[LEARNING] Sending thank you message for feedback_like');
      await sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üòä', env);
      console.log('[LEARNING] Calling startLearning after feedback_like');
      await startLearning(chatId, env);
      return;
    } else if (data === 'feedback_hard') {
      await saveUserFeedback(chatId, 'hard', null, null, env);
      console.log('[LEARNING] Sending thank you message for feedback_hard');
      await sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç—ë–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ —Å–ª–æ–∂–Ω—ã–º–∏.', env);
      console.log('[LEARNING] Calling startLearning after feedback_hard');
      await startLearning(chatId, env);
      return;
    } else if (data === 'feedback_easy') {
      await saveUserFeedback(chatId, 'easy', null, null, env);
      console.log('[LEARNING] Sending thank you message for feedback_easy');
      await sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.', env);
      console.log('[LEARNING] Calling startLearning after feedback_easy');
      await startLearning(chatId, env);
      return;
    } else if (data === 'feedback_comment') {
      if (!env.__awaiting_feedback) env.__awaiting_feedback = {};
      env.__awaiting_feedback[chatId] = true;
      await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.', env);
      return;
    }
  } catch (error) {
    console.error('Learning callback error:', error);
    await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveUserFeedback(chatId, feedbackType, feedbackText = null, sessionData = null, env) {
  try {
    const database = new DatabaseManager(env);
    const db = database.db;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let sessionType = 'unknown';
    let questionCount = 0;
    let correctAnswers = 0;
    let sessionDuration = 0;
    
    if (sessionData) {
      sessionType = sessionData.sessionType || 'unknown';
      questionCount = sessionData.questionCount || 0;
      correctAnswers = sessionData.correctAnswers || 0;
      sessionDuration = sessionData.duration || 0;
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã
      const lastSession = await db.prepare(`
        SELECT session_type, total_questions, correct_answers, 
               CAST((julianday(end_time) - julianday(start_time)) * 24 * 60 AS INTEGER) as duration_minutes
        FROM learning_sessions
        WHERE chat_id = ? AND end_time IS NOT NULL
        ORDER BY end_time DESC
        LIMIT 1
      `).bind(chatId).first();
      
      if (lastSession) {
        sessionType = lastSession.session_type;
        questionCount = lastSession.total_questions;
        correctAnswers = lastSession.correct_answers;
        sessionDuration = lastSession.duration_minutes || 0;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.prepare(`
      INSERT INTO user_feedback (
        chat_id, feedback_type, feedback_text, session_type, 
        question_count, correct_answers, session_duration_minutes
      ) VALUES (?, ?, ?, ?, ?, ?, ?)
    `).bind(
      chatId, feedbackType, feedbackText, sessionType,
      questionCount, correctAnswers, sessionDuration
    ).run();
    
    console.log(`[LEARNING] Saved feedback: ${feedbackType} from user ${chatId}`);
    return true;
  } catch (error) {
    console.error('[LEARNING] Error saving feedback:', error);
    return false;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
async function showAchievements(chatId, env) {
  const database = new DatabaseManager(env);
  const achievements = new AchievementSystem(database, env);
  
  await achievements.showAchievements(chatId);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserProfile(chatId, env) {
  const database = new DatabaseManager(env);
  const achievements = new AchievementSystem(database, env);
  
  await achievements.showUserProfile(chatId);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
async function showDailyChallenges(chatId, env) {
  console.log('=== showDailyChallenges FUNCTION ENTRY ===');
  console.log('Function called with chatId:', chatId);
  console.log('Function called with env keys:', Object.keys(env));
  
  try {
    console.log('Creating DatabaseManager...');
    const database = new DatabaseManager(env);
    console.log('Database manager created successfully');
    
    console.log('Creating DailyChallengeSystem...');
    const dailyChallenges = new DailyChallengeSystem(database, env);
    console.log('DailyChallengeSystem created successfully');
    
    console.log('Calling dailyChallenges.showDailyChallenges...');
    await dailyChallenges.showDailyChallenges(chatId);
    console.log('showDailyChallenges completed successfully');
  } catch (error) {
    console.error('Error in showDailyChallenges function:', error);
    console.error('Error stack:', error.stack);
    console.error('Error name:', error.name);
    console.error('Error message:', error.message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:
‚Ä¢ –¢–∏–ø: ${error.name}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
    
    await sendMessage(chatId, errorMessage, env);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏–π
async function showChallengeStats(chatId, env) {
  const database = new DatabaseManager(env);
  const dailyChallenges = new DailyChallengeSystem(database, env);
  
  await dailyChallenges.showChallengeStats(chatId);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async function showAchievementsHistory(chatId, env) {
  const database = new DatabaseManager(env);
  
  try {
    const achievements = await database.getAchievements(chatId);
    
    if (achievements.length === 0) {
      await sendMessage(chatId, 'üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!');
      return;
    }
    
    let message = `üèÜ *–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*\n\n`;
    
    achievements.forEach((achievement, index) => {
      const date = new Date(achievement.unlocked_at).toLocaleDateString('ru-RU');
      message += `${achievement.icon} **${achievement.achievement_name}**\n`;
      message += `‚îî ${achievement.description}\n`;
      message += `‚îî üìÖ ${date}\n`;
      message += `‚îî üíé +${achievement.points} XP\n\n`;
    });
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, message, keyboard, env);
  } catch (error) {
    console.error('Error showing achievements history:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async function showDetailedStats(chatId, env) {
  const database = new DatabaseManager(env);
  
  try {
    const stats = await database.getUserStats(chatId);
    
    if (!stats) {
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      return;
    }
    
    const { user, categoryStats, questionTypeStats, recentSessions } = stats;
    const accuracy = user.total_questions > 0 ? 
      Math.round((user.total_correct / user.total_questions) * 100) : 0;
    
    let message = `üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üéØ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${user.total_questions}\n`;
    message += `‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.total_correct}\n`;
    message += `‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%\n`;
    message += `‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: ${user.total_score} –±–∞–ª–ª–æ–≤\n`;
    message += `‚Ä¢ –û—á–∫–∏ –æ–ø—ã—Ç–∞: ${user.experience_points} XP\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (categoryStats.length > 0) {
      message += `üìö *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n`;
      categoryStats.slice(0, 5).forEach(stat => {
        const emoji = stat.accuracy > 80 ? 'üü¢' : stat.accuracy > 60 ? 'üü°' : 'üî¥';
        message += `${emoji} ${stat.category}: ${stat.correct_answers}/${stat.total_questions} (${stat.accuracy}%)\n`;
      });
      message += '\n';
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if (recentSessions.length > 0) {
      message += `üìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:*\n`;
      recentSessions.slice(0, 3).forEach(session => {
        const date = new Date(session.start_time).toLocaleDateString('ru-RU');
        const sessionAccuracy = session.total_questions > 0 ? 
          Math.round((session.correct_answers / session.total_questions) * 100) : 0;
        message += `‚Ä¢ ${date}: ${session.correct_answers}/${session.total_questions} (${sessionAccuracy}%) - ${session.score} –±–∞–ª–ª–æ–≤\n`;
      });
    }
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'learning_export_data' },
          { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements_history' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, message, keyboard, env);
  } catch (error) {
    console.error('Error showing detailed stats:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è
async function showLearningSettings(chatId, env) {
  const state = learningStates.get(chatId);
  const currentDifficulty = state?.difficulty || 'beginner';
  
  const difficulties = {
    beginner: '–ù–æ–≤–∏—á–æ–∫',
    intermediate: '–°—Ä–µ–¥–Ω–∏–π',
    advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
  };
  
  let message = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è*\n\n`;
  message += `üìä –¢–µ–∫—É—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulties[currentDifficulty]}\n`;
  message += `üéØ –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: ${state?.totalQuestions || 5}\n\n`;
  message += `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:`;
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üü¢ –ù–æ–≤–∏—á–æ–∫', callback_data: 'learning_difficulty_beginner' },
        { text: 'üü° –°—Ä–µ–¥–Ω–∏–π', callback_data: 'learning_difficulty_intermediate' }
      ],
      [
        { text: 'üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', callback_data: 'learning_difficulty_advanced' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }
      ]
    ]
  };
  
  await sendMessageWithKeyboard(chatId, message, keyboard, env);
}

// –£—Ä–æ–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function startCategorySpecificLesson(chatId, category, env) {
  const state = learningStates.get(chatId) || new LearningState();
  state.currentLesson = 'category_lesson';
  state.currentCategory = category;
  state.totalQuestions = 5;
  state.score = 0;
  state.correctAnswers = 0;
  state.incorrectAnswers = [];
  learningStates.set(chatId, state);
  
  await sendMessage(chatId, `üìö –ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}\n\n–ë—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ ${state.totalQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤.`, env);
  await sendNextCategoryQuestion(chatId, env);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
async function showLearningCharts(chatId, env) {
  try {
    const { createCategoryProgressChart, createQuestionTypeProgressChart, createWeeklyProgressChart } = await import('./learningAnalytics.js');
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–º—É–ª—è—Ü–∏—è)
    const mockAnalytics = {
      categoryPerformance: new Map([
        ['–í–∏–Ω–∞', { correct: 15, total: 20 }],
        ['–ö–æ–∫—Ç–µ–π–ª–∏', { correct: 8, total: 12 }],
        ['–ö—Ä–µ–ø–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏', { correct: 12, total: 15 }]
      ]),
      questionTypePerformance: new Map([
        ['wine_pairing', { correct: 10, total: 15 }],
        ['serving_temp', { correct: 8, total: 10 }],
        ['glassware', { correct: 6, total: 8 }]
      ])
    };
    
    let chartsText = `üìä *–ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è*\n\n`;
    
    // –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryChart = createCategoryProgressChart(mockAnalytics);
    chartsText += categoryChart + '\n';
    
    // –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
    const typeChart = createQuestionTypeProgressChart(mockAnalytics);
    chartsText += typeChart + '\n';
    
    // –ì—Ä–∞—Ñ–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const weeklyChart = createWeeklyProgressChart(mockAnalytics);
    chartsText += weeklyChart + '\n';
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'learning_detailed_analytics' },
          { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'learning_achievements' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, chartsText, keyboard, env);
  } catch (error) {
    console.error('Error showing learning charts:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.', env);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
async function showCurrentQuestion(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state || !state.currentQuestion) {
    await sendMessage(chatId, '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.', env);
    return;
  }
  
  try {
    const question = state.currentQuestion;
    
    const questionText = `‚ùì *–í–æ–ø—Ä–æ—Å ${state.correctAnswers + 1}/${state.totalQuestions}*
üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${state.difficulty === 'beginner' ? 'üü¢ –ù–æ–≤–∏—á–æ–∫' : state.difficulty === 'intermediate' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}

${question.question}

*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*
–ê. ${question.options.A}
–ë. ${question.options.B}
–í. ${question.options.C}
–ì. ${question.options.D}`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '–ê', callback_data: `learning_answer_A` },
          { text: '–ë', callback_data: `learning_answer_B` },
          { text: '–í', callback_data: `learning_answer_C` },
          { text: '–ì', callback_data: `learning_answer_D` }
        ],
        [
          { text: 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞', callback_data: 'learning_hint' },
          { text: 'üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'learning_finish' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, questionText, keyboard, env);
  } catch (error) {
    console.error('Error showing current question:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.', env);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async function showHint(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state || !state.currentQuestion) {
    await sendMessage(chatId, '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.', env);
    return;
  }
  
  try {
    const question = state.currentQuestion;
    let hint = '';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    switch (question.questionType || 'general') {
      case 'wine_pairing':
        hint = 'üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∏–ø –≤–∏–Ω–∞ (–∫—Ä–∞—Å–Ω–æ–µ/–±–µ–ª–æ–µ/—Ä–æ–∑–æ–≤–æ–µ) –∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å—É—Ö–æ–µ/–ø–æ–ª—É—Å—É—Ö–æ–µ/—Å–ª–∞–¥–∫–æ–µ). –ö—Ä–∞—Å–Ω—ã–µ –≤–∏–Ω–∞ –æ–±—ã—á–Ω–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å –º—è—Å–æ–º, –±–µ–ª—ã–µ - —Å —Ä—ã–±–æ–π –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.';
        break;
      case 'serving_temp':
        hint = 'üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –Ω–∞–ø–∏—Ç–∫–∞. –í–∏–Ω–∞ –æ–±—ã—á–Ω–æ –ø–æ–¥–∞—é—Ç—Å—è –ø—Ä–∏ 8-18¬∞C, –∫—Ä–µ–ø–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏ - –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –∏–≥—Ä–∏—Å—Ç—ã–µ –≤–∏–Ω–∞ - –æ—Ö–ª–∞–∂–¥–µ–Ω–Ω—ã–º–∏.';
        break;
      case 'glassware':
        hint = 'üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –§–æ—Ä–º–∞ –±–æ–∫–∞–ª–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∫—É—Å –Ω–∞–ø–∏—Ç–∫–∞. –ë–æ–∫–∞–ª—ã –¥–ª—è –≤–∏–Ω–∞ –∏–º–µ—é—Ç —à–∏—Ä–æ–∫—É—é —á–∞—à—É, —Ñ–ª–µ–π—Ç—ã - —É–∑–∫—É—é –∏ –≤—ã—Å–æ–∫—É—é –¥–ª—è –∏–≥—Ä–∏—Å—Ç—ã—Ö –≤–∏–Ω.';
        break;
      case 'country':
        hint = 'üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞. –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑–≤–µ—Å—Ç–Ω—ã —Å–≤–æ–∏–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏ –≤–∏–Ω–æ–¥–µ–ª–∏—è.';
        break;
      default:
        hint = 'üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. –ò—Å–∫–ª—é—á–∏—Ç–µ —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.';
    }
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîô –ö –≤–æ–ø—Ä–æ—Å—É', callback_data: 'learning_back_to_question' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, hint, keyboard, env);
  } catch (error) {
    console.error('Error showing hint:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏.', env);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function sendNextCategoryQuestion(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state || state.correctAnswers >= state.totalQuestions) {
    await finishLesson(chatId, env);
    return;
  }
  
  const wines = await getWineData(env);
  const categoryWines = wines.filter(w => w.category === state.currentCategory);
  
  if (categoryWines.length === 0) {
    await sendMessage(chatId, '–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –Ω–∞–ø–∏—Ç–∫–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.', env);
    await finishLesson(chatId, env);
    return;
  }
  
  const randomWine = categoryWines[Math.floor(Math.random() * categoryWines.length)];
  const questionTypes = Object.values(QUESTION_TYPES);
  const randomType = questionTypes[Math.floor(Math.random() * questionTypes.length)];
  
  const question = generateFallbackQuestion(randomWine, randomType);
  state.currentQuestion = question;
  
  const questionText = `üìö *–í–æ–ø—Ä–æ—Å ${state.correctAnswers + 1}/${state.totalQuestions}* (${state.currentCategory})

${question.question}

*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*
–ê. ${question.options.A}
–ë. ${question.options.B}
–í. ${question.options.C}
–ì. ${question.options.D}`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '–ê', callback_data: `learning_answer_A` },
        { text: '–ë', callback_data: `learning_answer_B` },
        { text: '–í', callback_data: `learning_answer_C` },
        { text: '–ì', callback_data: `learning_answer_D` }
      ],
      [
        { text: 'üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'learning_finish' }
      ]
    ]
  };
  
  await sendMessageWithKeyboard(chatId, questionText, keyboard, env);
} 

// –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async function startPersonalizedTest(chatId, env) {
  const state = learningStates.get(chatId) || new LearningState();
  state.currentLesson = 'personalized_test';
  state.totalQuestions = 8;
  state.score = 0;
  state.correctAnswers = 0;
  state.incorrectAnswers = [];
  learningStates.set(chatId, state);
  
  // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
  startLearningSession(chatId);
  
  await sendMessage(chatId, 'üéØ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç...\n\n–í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–¥–æ–±—Ä–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω.', env);
  await sendNextPersonalizedQuestion(chatId, env);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async function sendNextPersonalizedQuestion(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state || state.correctAnswers >= state.totalQuestions) {
    await finishLesson(chatId, env);
    return;
  }
  
  await sendMessage(chatId, 'ü§ñ –ò–ò —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å...', env);
  
  const question = await generatePersonalizedAIQuestion(chatId, env);
  if (!question) {
    // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    await sendNextQuestion(chatId, env);
    return;
  }
  
  state.currentQuestion = question;
  
  const questionText = `üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ${state.correctAnswers + 1}/${state.totalQuestions}*

${question.question}

*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${question.category}
*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${question.difficulty}

*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*
–ê. ${question.options.A}
–ë. ${question.options.B}
–í. ${question.options.C}
–ì. ${question.options.D}`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '–ê', callback_data: `learning_answer_A` },
        { text: '–ë', callback_data: `learning_answer_B` },
        { text: '–í', callback_data: `learning_answer_C` },
        { text: '–ì', callback_data: `learning_answer_D` }
      ],
      [
        { text: 'üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'learning_finish' }
      ]
    ]
  };
  
  await sendMessageWithKeyboard(chatId, questionText, keyboard, env);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
async function exportLearningData(chatId, env) {
  const database = new DatabaseManager(env);
  
  try {
    const exportData = await database.exportUserData(chatId);
    
    if (!exportData) {
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    const { user, achievements, activityHistory, stats } = exportData;
    const accuracy = user.total_questions > 0 ? 
      Math.round((user.total_correct / user.total_questions) * 100) : 0;
    
    const message = `üìä *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è*

‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*
‚Ä¢ –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${user.total_questions}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.total_correct}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%
‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: ${user.total_score} –±–∞–ª–ª–æ–≤
‚Ä¢ –û—á–∫–∏ –æ–ø—ã—Ç–∞: ${user.experience_points} XP
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievements.length}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${activityHistory.length}

üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑—É—á–µ–Ω–æ: ${stats.categoryStats?.length || 0}
‚Ä¢ –¢–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: ${stats.questionTypeStats?.length || 0}
‚Ä¢ –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: ${stats.recentSessions?.length || 0}

–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' },
          { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements_history' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }
        ]
      ]
    };
    
    await sendMessageWithKeyboard(chatId, message, keyboard, env);
  } catch (error) {
    console.error('Error exporting learning data:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
  }
} 

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
async function sendNextQuestionBasedOnLesson(chatId, env) {
  const state = learningStates.get(chatId);
  if (!state) {
    await sendMessage(chatId, '–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.', env);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
  if (state.correctAnswers >= state.totalQuestions) {
    await finishLesson(chatId, env);
    return;
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
  if (state.currentLesson === 'ai_mode') {
    await sendNextAIQuestion(chatId, env);
  } else if (state.currentLesson === 'personalized_test') {
    await sendNextPersonalizedQuestion(chatId, env);
  } else if (state.currentLesson === 'category_lesson') {
    await sendNextCategoryQuestion(chatId, env);
  } else {
    await sendNextQuestion(chatId, env);
  }
} 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –∏ –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥

import { getWineData, getSelectedSheetId, getSheetNameById, refreshWineData } from './data.js';
import { sendMessage, sendMessageWithKeyboard, editMessage, sendPhotoWithCaption, answerCallbackQuery } from './telegramApi.js';
import { askCloudflareAI, askCloudflareAIWithWineContext } from './ai.js';
import { getCategoryType } from '../utils/categories.js';
import { handleMenuSection } from './menu.js';
import { handleAlcoholSection, handleCategorySelection, handleShowCategory } from './alcohol.js';
import { handleLearningCallback } from './learning.js';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
export async function handleWebhook(request, env) {
  try {
    const update = await request.json();
    
    if (update.message) {
      await handleMessage(update.message, env);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query, env);
    }
    
    return new Response('OK', { status: 200 });
  } catch (error) {
    console.error('Webhook error:', error);
    return new Response('Error', { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export async function handleMessage(message, env) {
  const chatId = message.chat.id;
  const text = message.text || '';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const { DatabaseManager } = await import('./database.js');
    const database = new DatabaseManager(env);
    if (message.from) {
      await database.initUser(chatId, message.from);
    } else {
      await database.initUser(chatId);
    }
  } catch (e) {
    console.error('initUser error:', e);
  }

  try {
    if (text === '/start') {
      await sendWelcomeMessage(chatId, env);
    } else if (text === '/help') {
      await sendHelpMessage(chatId, env);
    } else if (text === '/refresh') {
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      await refreshWineData(env);
      await sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', env);
    } else if (text.startsWith('/ai')) {
      // /ai –≤–æ–ø—Ä–æ—Å
      const question = text.replace('/ai', '').trim();
      if (!question) {
        await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ai, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/ai –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Å—É—Ö–æ–µ –≤–∏–Ω–æ –æ—Ç –ø–æ–ª—É—Å—É—Ö–æ–≥–æ?', env);
      } else {
        await sendMessage(chatId, '‚è≥ –ó–∞–ø—Ä–æ—Å –∫ –ò–ò... –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.', env);
        const aiAnswer = await askCloudflareAI(question, env);
        await sendMessage(chatId, `ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n${aiAnswer}`, env);
      }
    } else if (env.__awaiting_ai_question && env.__awaiting_ai_question[chatId]) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò"
      const question = text.trim();
      const aiContext = env.__awaiting_ai_question[chatId];
      env.__awaiting_ai_question[chatId] = false;
      
      await sendMessage(chatId, '‚è≥ –ó–∞–ø—Ä–æ—Å –∫ –ò–ò... –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.', env);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –ò–ò
      if (aiContext && aiContext.wineId) {
        const aiAnswer = await askCloudflareAIWithWineContext(question, aiContext.wineId, env);
        await sendMessage(chatId, `ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n${aiAnswer}`, env);
      } else {
        const aiAnswer = await askCloudflareAI(question, env);
        await sendMessage(chatId, `ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n${aiAnswer}`, env);
      }
    } else if (text.startsWith('/set_sheet')) {
      const parts = text.split(' ');
      if (parts.length < 2) {
        await sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ sheetId, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_sheet 304728120', env);
        return;
      }
      const sheetId = parseInt(parts[1]);
      if (isNaN(sheetId)) {
        await sendMessage(chatId, 'sheetId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.', env);
        return;
      }
      // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ª–∏—Å—Ç
      try {
        const sheetName = await getSheetNameById(env, sheetId);
        await env.WINE_CACHE.put('selected_sheet_id', String(sheetId));
        await sendMessage(chatId, `–í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${sheetName} (sheetId: ${sheetId})`, env);
      } catch (e) {
        await sendMessage(chatId, '–õ–∏—Å—Ç —Å —Ç–∞–∫–∏–º sheetId –Ω–µ –Ω–∞–π–¥–µ–Ω.', env);
      }
      return;
    } else if (text === '/sheet') {
      const sheetId = await getSelectedSheetId(env);
      try {
        const sheetName = await getSheetNameById(env, sheetId);
        await sendMessage(chatId, `–¢–µ–∫—É—â–∏–π –ª–∏—Å—Ç: ${sheetName} (sheetId: ${sheetId})`, env);
      } catch (e) {
        await sendMessage(chatId, `sheetId: ${sheetId}, –Ω–æ –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`, env);
      }
      return;
    } else if (text === '/recommend') {
      // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é
      const { generatePersonalizedReport, getUserAnalytics } = await import('./learningAnalytics.js');
      const report = await generatePersonalizedReport(chatId, env);
      const analytics = getUserAnalytics(chatId);
      const weakCategories = analytics.weakCategories || [];
      const accuracy = analytics.getOverallAccuracy();
      const totalQuestions = analytics.totalQuestions;
      const weakCategoryButtons = weakCategories.slice(0, 3).map(cat => ([{ text: `–¢–µ—Å—Ç –ø–æ ${cat}`, callback_data: `learning_category_${cat}` }]));
      const aiModeButton = (accuracy > 0.8 && totalQuestions > 20) ? [[{ text: 'ü§ñ –ò–ò-—Ä–µ–∂–∏–º', callback_data: 'learning_ai_mode' }]] : [];
      const keyboard = {
        inline_keyboard: [
          ...weakCategoryButtons,
          ...aiModeButton
        ]
      };
      await sendMessageWithKeyboard(chatId, report, keyboard, env);
      return;
    } else if (env.__awaiting_feedback && env.__awaiting_feedback[chatId]) {
      env.__awaiting_feedback[chatId] = false;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { saveUserFeedback, startLearning } = await import('./learning.js');
      await saveUserFeedback(chatId, 'comment', text, null, env);
      await sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤!', env);
      await startLearning(chatId, env);
      return;
    } else if (text === '/motivation_on') {
      const { DatabaseManager } = await import('./database.js');
      const database = new DatabaseManager(env);
      await database.setMotivationEnabled(chatId, true);
      await sendMessage(chatId, '‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã!', env);
    } else if (text === '/motivation_off') {
      const { DatabaseManager } = await import('./database.js');
      const database = new DatabaseManager(env);
      await database.setMotivationEnabled(chatId, false);
      await sendMessage(chatId, 'üîï –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é.', env);
    } else if (text === '/shop') {
      await showRewardShop(chatId, env);
    } else {
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–Ω–∞
      await searchWineByName(text, chatId, env);
    }
  } catch (error) {
    console.error('Message handling error:', error);
    await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
export async function handleCallbackQuery(callbackQuery, env) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const { DatabaseManager } = await import('./database.js');
    const database = new DatabaseManager(env);
    if (callbackQuery.from) {
      await database.initUser(chatId, callbackQuery.from);
    } else {
      await database.initUser(chatId);
    }
  } catch (e) {
    console.error('initUser error:', e);
  }

  console.log('Callback query received:', data);
  
  try {
    if (data === 'ask_ai') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!env.__awaiting_ai_question) env.__awaiting_ai_question = {};
      env.__awaiting_ai_question[chatId] = true;
      await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Å—É—Ö–æ–µ –≤–∏–Ω–æ –æ—Ç –ø–æ–ª—É—Å—É—Ö–æ–≥–æ?):', env);
    } else if (data.startsWith('ask_ai_wine_')) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
      const wineId = data.replace('ask_ai_wine_', '');
      if (!env.__awaiting_ai_question) env.__awaiting_ai_question = {};
      env.__awaiting_ai_question[chatId] = { wineId: wineId };
      await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º –Ω–∞–ø–∏—Ç–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –° —á–µ–º –ª—É—á—à–µ –ø–æ–¥–∞–≤–∞—Ç—å —ç—Ç–æ –≤–∏–Ω–æ?):', env);
    } else if (data.startsWith('section_')) {
      await handleSectionSelection(data, chatId, messageId, env);
    } else if (data.startsWith('category_')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∫–æ–∫—Ç–µ–π–ª–µ–π
      const categoryType = data.replace('category_', '');
      if (['cocktails', 'mix_drinks', 'lemonades_milkshakes', 'coffee', 'tea', 'premixes', 'pf', 'not_in_menu'].includes(categoryType)) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ menu.js
        const { handleCocktailCategorySelection } = await import('./menu.js');
        await handleCocktailCategorySelection(data, chatId, messageId, env);
      } else {
        await handleCategorySelection(data, chatId, messageId, env);
      }
    } else if (data.startsWith('filter_value_')) {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ filters.js
      const { handleFilterValueSelection } = await import('./filters.js');
      await handleFilterValueSelection(data, chatId, messageId, env);
    } else if (data.startsWith('filter_')) {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ filters.js
      const { handleFilterSelection } = await import('./filters.js');
      await handleFilterSelection(data, chatId, messageId, env);
    } else if (data.startsWith('wine_') || data.startsWith('spirit_') || data.startsWith('whisky_') || data.startsWith('rum_') || data.startsWith('gin_') || data.startsWith('beer_')) {
      console.log('Showing wine details for:', data);
      await showWineDetails(data, chatId, env);
    } else if (data === 'main_menu') {
      await sendMainMenu(chatId, env);
    } else if (data === 'back') {
      await sendMainMenu(chatId, env);
    } else if (data === 'search_by_name') {
      await handleSearchByName(chatId, env);
    } else if (data === 'show_all_wines') {
      await showAllWines(chatId, env);
    } else if (data.startsWith('show_category_')) {
      await handleShowCategory(data, chatId, messageId, env);
    } else if (data === 'refresh_data') {
      await handleRefreshData(chatId, messageId, env);
    } else if (data.startsWith('learning_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      await handleLearningCallback(data, chatId, messageId, env);
    } else if (data === 'daily_challenges') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
      console.log('Handling daily challenges callback');
      const { handleLearningCallback } = await import('./learning.js');
      await handleLearningCallback(data, chatId, messageId, env);
    } else if (data === 'user_profile') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { handleLearningCallback } = await import('./learning.js');
      await handleLearningCallback(data, chatId, messageId, env);
    } else if (data === 'show_author') {
      await sendAuthorInfo(chatId, env);
    } else if (data.startsWith('buy_reward_')) {
      const rewardId = parseInt(data.replace('buy_reward_', ''));
      await handleBuyReward(chatId, rewardId, env);
      return;
    } else if (data === 'open_reward_shop') {
      await showRewardShop(chatId, env);
      return;
    }
    if (data === 'no_xp') {
      await sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–∏–∑–∞.', env);
      await showRewardShop(chatId, env);
      return;
    }
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    try {
      await answerCallbackQuery(callbackQuery.id, env);
    } catch (callbackError) {
      console.error('Failed to answer callback query:', callbackError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
    }
  } catch (error) {
    console.error('Callback query error:', error);
    try {
      await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
    } catch (sendError) {
      console.error('Failed to send error message:', sendError);
    }
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function sendWelcomeMessage(chatId, env) {
  const welcomeText = `üç∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Beverage Learning Bot!\n\nüè™ *–†–µ—Å—Ç–æ—Ä–∞–Ω KETCH UP*\n\n–†–µ—Å—Ç–æ—Ä–∞–Ω—ã Ketch Up ‚Äî –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –¥–∏–Ω–∞–º–∏—á–Ω—ã—Ö. –≠—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –º–µ–≥–∞–ø–æ–ª–∏—Å–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–ª–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É, –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –¥—Ä—É–∑—å—è–º–∏ –≤ —à—É–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, —Å–æ–±—Ä–∞—Ç—å —Å–µ–º—å—é –Ω–∞ –ª–∞–Ω—á, —É–∂–∏–Ω –∏–ª–∏ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º –¥–Ω–µ–º.\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üç∑ –û—Ç–∫—Ä—ã—Ç—å Web App', web_app: { url: 'https://wine-app.2gc.ru/' } }
      ],
      [
        { text: 'üçΩÔ∏è –ú–µ–Ω—é', callback_data: 'section_menu' },
        { text: 'üç∑ –ê–ª–∫–æ–≥–æ–ª—å', callback_data: 'section_alcohol' }
      ],
      [
        { text: 'üéì –û–±—É—á–µ–Ω–∏–µ', callback_data: 'learning_start' },
        { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data: 'search_by_name' }
      ],
      [
        { text: 'üìã –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏', callback_data: 'show_all_wines' }
      ],
      [
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'refresh_data' }
      ],
      [
        { text: 'üéÅ –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'open_reward_shop' }
      ],
      [
        { text: 'ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò', callback_data: 'ask_ai' }
      ]
    ]
  };

  await sendMessageWithKeyboard(chatId, welcomeText, keyboard, env);
}

// –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "üç∑ –û—Ç–∫—Ä—ã—Ç—å Web App"
export async function sendMainMenu(chatId, env) {
  const menuText = `üç∑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üç∑ –û—Ç–∫—Ä—ã—Ç—å Web App', web_app: { url: 'https://wine-app.2gc.ru/' } }
      ],
      [
        { text: 'üçΩÔ∏è –ú–µ–Ω—é', callback_data: 'section_menu' },
        { text: 'üç∑ –ê–ª–∫–æ–≥–æ–ª—å', callback_data: 'section_alcohol' }
      ],
      [
        { text: 'üéì –û–±—É—á–µ–Ω–∏–µ', callback_data: 'learning_start' },
        { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data: 'search_by_name' }
      ],
      [
        { text: 'üìã –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏', callback_data: 'show_all_wines' }
      ],
      [
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'refresh_data' }
      ],
      [
        { text: 'üéÅ –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'open_reward_shop' }
      ],
      [
        { text: 'ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò', callback_data: 'ask_ai' }
      ],
      [
        { text: 'üë®‚Äçüíª –ê–≤—Ç–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', callback_data: 'show_author' }
      ]
    ]
  };

  await sendMessageWithKeyboard(chatId, menuText, keyboard, env);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
export async function handleSectionSelection(data, chatId, messageId, env) {
  const sectionType = data.replace('section_', '');
  console.log('Section selection:', sectionType);
  
  switch (sectionType) {
    case 'menu':
      await handleMenuSection(chatId, messageId, env);
      break;
    case 'alcohol':
      await handleAlcoholSection(chatId, messageId, env);
      break;
    default:
      await sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª.', env);
      return;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∏–Ω–∞
export async function showWineDetails(data, chatId, env) {
  // –¢–µ–ø–µ—Ä—å data –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ ID –Ω–∞–ø–∏—Ç–∫–∞ (wine_1, spirit_1, whisky_1, etc.)
  const wineId = data;
  console.log('Looking for wine with ID:', wineId);
  const wines = await getWineData(env);
  console.log('Total wines loaded:', wines.length);
  const wine = wines.find(w => w.id === wineId);
  console.log('Found wine:', wine ? wine.name : 'NOT FOUND');
  console.log('wine object:', JSON.stringify(wine, null, 2));
  console.log('wine.image_id:', wine.image_id);

  if (!wine) {
    console.log('Wine not found, sending error message');
    await sendMessage(chatId, '–ù–∞–ø–∏—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.', env);
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–∞
  let wineText = `üç∑ *${wine.name}*
üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${wine.category || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (wine.category === '–í–∏—Å–∫–∏') {
    wineText += `
ü•É *–ö—Ä–µ–ø–æ—Å—Ç—å:* ${wine.alcohol || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üåç *–°—Ç—Ä–∞–Ω–∞:* ${wine.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçØ *–¢–∏–ø:* ${wine.type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚è∞ *–í—ã–¥–µ—Ä–∂–∫–∞:* ${wine.aging || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçØ *–°–∞—Ö–∞—Ä:* ${wine.sugar || '–°—É—Ö–æ–π'}`;
  } else if (wine.category === '–ü–∏–≤–æ') {
    wineText += `
üç∫ *–ö—Ä–µ–ø–æ—Å—Ç—å:* ${wine.alcohol || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üåç *–°—Ç—Ä–∞–Ω–∞:* ${wine.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìä *–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:* ${wine.density || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçØ *–°–∞—Ö–∞—Ä:* ${wine.sugar || '–°—É—Ö–æ–µ'}`;
  } else if (wine.category === '–ö–æ–∫—Ç–µ–π–ª–∏' || wine.category === '–ú–∏–∫—Å –¥—Ä–∏–Ω–∫' || wine.category === '–õ–∏–º–æ–Ω–∞–¥—ã –∏ –ú–∏–ª–∫—à–µ–π–∫–∏' || wine.category === '–ö–æ—Ñ–µ') {
    // –ö–æ–∫—Ç–µ–π–ª–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ, –ú–µ—Ç–æ–¥, –ü–æ—Å—É–¥–∞, –õ–µ–¥, –°–æ—Å—Ç–∞–≤
    wineText += `
ü•§ *–ú–µ—Ç–æ–¥:* ${wine.method || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
ü•Ç *–ü–æ—Å—É–¥–∞:* ${wine.glassware || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üßä *–õ–µ–¥:* ${wine.ice || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçπ *–°–æ—Å—Ç–∞–≤:* ${wine.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  } else if (wine.category === '–ß–∞–π') {
    // –ß–∞–π: –ù–∞–∑–≤–∞–Ω–∏–µ, –°–æ—Å—Ç–∞–≤, –ú–µ—Ç–æ–¥
    wineText += `
üçµ *–°–æ—Å—Ç–∞–≤:* ${wine.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚òï *–ú–µ—Ç–æ–¥:* ${wine.method || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  } else if (wine.category === '–ü—Ä–µ–º–∏–∫—Å—ã') {
    // –ü—Ä–µ–º–∏–∫—Å—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–∞–≤
    wineText += `
üçØ *–°–æ—Å—Ç–∞–≤:* ${wine.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  } else if (wine.category === '–ü–§') {
    // –ü–§: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ù–∞–∑–≤–∞–Ω–∏–µ, –°–æ—Å—Ç–∞–≤, –û–ø–∏—Å–∞–Ω–∏–µ
    wineText += `
üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:* ${wine.subcategory || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçØ *–°–æ—Å—Ç–∞–≤:* ${wine.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  } else if (wine.category === '–Ω–µ—Ç –≤ –º–µ–Ω—é') {
    // –Ω–µ—Ç –≤ –º–µ–Ω—é: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ù–∞–∑–≤–∞–Ω–∏–µ, –ú–µ—Ç–æ–¥, –ü–æ—Å—É–¥–∞, –õ–µ–¥, –°–æ—Å—Ç–∞–≤
    wineText += `
üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:* ${wine.subcategory || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
ü•§ *–ú–µ—Ç–æ–¥:* ${wine.method || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
ü•Ç *–ü–æ—Å—É–¥–∞:* ${wine.glassware || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üßä *–õ–µ–¥:* ${wine.ice || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçπ *–°–æ—Å—Ç–∞–≤:* ${wine.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  } else {
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–í–∏–Ω–∞, –ì—Ä–∞–ø–ø–∞/–ü–æ—Ä—Ç–æ/–ö–æ–Ω—å—è–∫/–í–µ—Ä–º—É—Ç, –†–æ–º/–¢–µ–∫–∏–ª–∞, –î–∂–∏–Ω/–í–æ–¥–∫–∞/–õ–∏–∫–µ—Ä—ã)
    wineText += `
üçØ *–°–∞—Ö–∞—Ä:* ${wine.sugar || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
ü•É *–ö—Ä–µ–ø–æ—Å—Ç—å:* ${wine.alcohol || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üåç *–°—Ç—Ä–∞–Ω–∞:* ${wine.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  }

  wineText += `

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
${wine.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò', callback_data: `ask_ai_wine_${wine.id}` }],
      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'back' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ]
  };

  try {
    let imageUrl = null;
    if (wine.image_id) {
      imageUrl = getCloudflareImageUrl(wine.image_id, env);
    }
    if (imageUrl) {
      console.log('Sending photo with caption...');
      await sendPhotoWithCaption(chatId, imageUrl, wineText, keyboard, env);
      console.log('Photo sent!');
    } else {
      console.log('Sending message with keyboard...');
      await sendMessageWithKeyboard(chatId, wineText, keyboard, env);
      console.log('Message sent!');
    }
  } catch (e) {
    console.error('Error sending wine details:', e);
    await sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø–∏—Ç–∫–µ.', env);
  }
}

// –ü–æ–∏—Å–∫ –Ω–∞–ø–∏—Ç–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
export async function searchWineByName(query, chatId, env) {
  const wines = await getWineData(env);
  
  if (!wines || wines.length === 0) {
    await sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
    return;
  }

  const searchResults = wines.filter(wine => 
    wine.name.toLowerCase().includes(query.toLowerCase())
  );

  if (searchResults.length === 0) {
    await sendMessage(chatId, `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫.`, env);
    return;
  }

  if (searchResults.length === 1) {
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª–∏
    await showWineDetails(searchResults[0].id, chatId, env);
  } else {
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    const keyboard = {
      inline_keyboard: searchResults.slice(0, 10).map(wine => [
        { text: wine.name, callback_data: wine.id }
      ]).concat([
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
      ])
    };

    await sendMessageWithKeyboard(chatId, `–ù–∞–π–¥–µ–Ω–æ ${searchResults.length} –Ω–∞–ø–∏—Ç–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":`, keyboard, env);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
export async function sendHelpMessage(chatId, env) {
  const helpText = `üç∑ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/refresh - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

*–°–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞:*
‚Ä¢ *–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é* - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞
‚Ä¢ *–ü–æ —Å–∞—Ö–∞—Ä—É* - –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—É—Ö–æ–µ, –ø–æ–ª—É—Å—É—Ö–æ–µ –∏ —Ç.–¥.)
‚Ä¢ *–ü–æ –∫—Ä–µ–ø–æ—Å—Ç–∏* - –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (11%, 11.5% –∏ —Ç.–¥.)
‚Ä¢ *–ü–æ —Å—Ç—Ä–∞–Ω–µ* - –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (–ò—Å–ø–∞–Ω–∏—è, –ò—Ç–∞–ª–∏—è –∏ —Ç.–¥.)

*–ù–∞–≤–∏–≥–∞—Ü–∏—è:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É

*–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*
‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ]
  };

  await sendMessageWithKeyboard(chatId, helpText, keyboard, env);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
export async function showAllWines(chatId, env) {
  const wines = await getWineData(env);
  
  if (!wines || wines.length === 0) {
    await sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categories = {};
  wines.forEach(wine => {
    if (!categories[wine.category]) {
      categories[wine.category] = [];
    }
    categories[wine.category].push(wine);
  });

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  const keyboard = {
    inline_keyboard: Object.keys(categories).map(category => [
      { text: `${category} (${categories[category].length})`, callback_data: `show_category_${getCategoryType(category)}` }
    ]).concat([
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
    ])
  };

  const totalDrinks = wines.length;
  const categoryCount = Object.keys(categories).length;

  await sendMessageWithKeyboard(chatId, 
    `üç∑ –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ (${totalDrinks} —à—Ç. –≤ ${categoryCount} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö):\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`, 
    keyboard, env);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
export async function handleSearchByName(chatId, env) {
  await sendMessage(chatId, 'üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:', env);
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
export async function handleRefreshData(chatId, messageId, env) {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await sendMessage(chatId, 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', env);
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    await env.WINE_CACHE.delete('wine_data');
    console.log('Cache cleared');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const wines = await getWineData(env);
    console.log('Data refreshed, loaded wines:', wines ? wines.length : 0);
    
    if (wines && wines.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
      const categories = {};
      wines.forEach(wine => {
        if (!categories[wine.category]) {
          categories[wine.category] = [];
        }
        categories[wine.category].push(wine);
      });
      
      const categoryReport = Object.keys(categories).map(category => 
        `‚Ä¢ ${category}: ${categories[category].length} —à—Ç.`
      ).join('\n');
      
      const successMessage = `‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n${categoryReport}\n\n–í—Å–µ–≥–æ –Ω–∞–ø–∏—Ç–∫–æ–≤: ${wines.length}`;
      
      await sendMessage(chatId, successMessage, env);
    } else {
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
    }
  } catch (error) {
    console.error('Error refreshing data:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
  }
} 

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ
export async function sendAuthorInfo(chatId, env) {
  const text = 'üë®‚Äçüíª –ê–≤—Ç–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –õ–∞–Ω–∏–µ—Å –ú–∞–∫—Å–∏–º\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: m.lanies@2gc.ru';
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üí∏ –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∞', url: 'https://yoomoney.ru/fundraise/1BEKKUL671V.250712' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
      ]
    ]
  };
  
  await sendMessageWithKeyboard(chatId, text, keyboard, env);
} 

function getCloudflareImageUrl(imageId, env) {
  const baseUrl = env.CLOUDFLARE_IMAGES_BASE_URL || "https://imagedelivery.net/tdcdGyOL6_eTEtlo-2Ihkw";
  const variant = env.CLOUDFLARE_IMAGES_VARIANT || "public";
  return `${baseUrl}/${imageId}/${variant}`;
} 

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function showRewardShop(chatId, env) {
  const { DatabaseManager } = await import('./database.js');
  const database = new DatabaseManager(env);
  const db = database.db;
  const user = await db.prepare('SELECT * FROM users WHERE chat_id = ?').bind(chatId).first();
  const rewards = await db.prepare('SELECT * FROM reward_shop WHERE is_active = 1 AND quantity_left > 0 ORDER BY price_xp ASC').all();
  let message = `<b>üéÅ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤</b>\n`;
  if (user) {
    message += `–í–∞—à–∏ XP: <b>${user.experience_points}</b>\n`;
  }
  message += `<b>–¢–æ–≤–∞—Ä—ã:</b>\n`;
  if (rewards.results.length === 0) {
    message += '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.';
  } else {
    for (const r of rewards.results) {
      if (r.quantity_left > 0) {
        message += `‚Ä¢ <b>${r.name}</b> ‚Äî ${r.price_xp} XP\n–û—Å—Ç–∞–ª–æ—Å—å: ${r.quantity_left}\n`;
      }
    }
  }
  const keyboard = rewards.results
    .filter(r => r.quantity_left > 0)
    .map(r => {
      if (user && user.experience_points >= r.price_xp) {
        return [{ text: `–ö—É–ø–∏—Ç—å: ${r.name} (${r.price_xp} XP)`, callback_data: `buy_reward_${r.id}` }];
      } else {
        return [{ text: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP: ${r.name}`, callback_data: 'no_xp' }];
      }
    });
  keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
  await sendMessageWithKeyboard(chatId, message, { inline_keyboard: keyboard }, env, 'HTML');
}

// –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–∑–∞
async function handleBuyReward(chatId, rewardId, env) {
  const { DatabaseManager } = await import('./database.js');
  const database = new DatabaseManager(env);
  const db = database.db;
  const reward = await db.prepare('SELECT * FROM reward_shop WHERE id = ? AND is_active = 1').bind(rewardId).first();
  if (!reward) {
    await sendMessage(chatId, '‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', env);
    return;
  }
  if (reward.quantity_left !== null && reward.quantity_left <= 0) {
    await sendMessage(chatId, '‚ùå –ü—Ä–∏–∑ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏.', env);
    return;
  }
  const user = await db.prepare('SELECT * FROM users WHERE chat_id = ?').bind(chatId).first();
  if (!user) {
    await sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', env);
    return;
  }
  if (user.experience_points < reward.price_xp) {
    await sendMessage(chatId, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP. –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–æ ${reward.price_xp} XP, —É –≤–∞—Å: ${user.experience_points} XP.`, env);
    return;
  }
  // –°–ø–∏—Å—ã–≤–∞–µ–º XP, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
  await db.prepare('UPDATE users SET experience_points = experience_points - ? WHERE chat_id = ?').bind(reward.price_xp, chatId).run();
  await db.prepare('UPDATE reward_shop SET quantity_left = quantity_left - 1 WHERE id = ?').bind(rewardId).run();
  await db.prepare('INSERT INTO reward_purchases (user_id, reward_id) VALUES (?, ?)').bind(chatId, rewardId).run();
  await sendMessage(chatId, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ –ø—Ä–∏–∑: ${reward.name} –∑–∞ ${reward.price_xp} XP.`, env);
} 
// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { DatabaseManager, ACHIEVEMENT_TYPES } from './database.js';
import { sendMessage } from './telegramApi.js';

export class AchievementSystem {
  constructor(database, env) {
    this.database = database;
    this.env = env;
  }

  // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
  static LEVEL_SYSTEM = {
    levels: [
      { level: 1, name: '–ù–æ–≤–∏—á–æ–∫', minPoints: 0, icon: 'ü•â' },
      { level: 2, name: '–£—á–µ–Ω–∏–∫', minPoints: 50, icon: 'ü•à' },
      { level: 3, name: '–ó–Ω–∞—Ç–æ–∫', minPoints: 150, icon: 'ü•á' },
      { level: 4, name: '–≠–∫—Å–ø–µ—Ä—Ç', minPoints: 300, icon: 'üíé' },
      { level: 5, name: '–ú–∞—Å—Ç–µ—Ä', minPoints: 500, icon: 'üëë' },
      { level: 6, name: '–ì—É—Ä—É', minPoints: 800, icon: 'üåü' },
      { level: 7, name: '–õ–µ–≥–µ–Ω–¥–∞', minPoints: 1200, icon: 'üèÜ' }
    ],
    
    getLevel(points) {
      return this.levels.reduce((current, level) => {
        return points >= level.minPoints ? level : current;
      });
    },
    
    getProgress(points) {
      const currentLevel = this.getLevel(points);
      const nextLevel = this.levels.find(l => l.minPoints > points);
      
      if (!nextLevel) return 100;
      
      const currentLevelPoints = currentLevel.minPoints;
      const nextLevelPoints = nextLevel.minPoints;
      const userProgress = points - currentLevelPoints;
      const levelRange = nextLevelPoints - currentLevelPoints;
      
      return Math.round((userProgress / levelRange) * 100);
    }
  };

  // –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞
  static EXPERIENCE_SYSTEM = {
    rewards: {
      correctAnswer: 5,
      streakBonus: 2, // –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–µ—Ä–∏–∏
      perfectTest: 50,
      dailyChallenge: 20,
      achievement: 10
    },
    
    multipliers: {
      weekend: 1.5,
      firstSessionOfDay: 2.0,
      consecutiveDay: 1.1
    },
    
    calculateExperience(action, context = {}) {
      let baseExp = this.rewards[action] || 0;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
      if (context.isWeekend) baseExp *= this.multipliers.weekend;
      if (context.isFirstSession) baseExp *= this.multipliers.firstSessionOfDay;
      if (context.consecutiveDays > 1) {
        baseExp *= Math.pow(this.multipliers.consecutiveDay, Math.min(context.consecutiveDays - 1, 7));
      }
      
      return Math.round(baseExp);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async checkAchievements(chatId, stats) {
    try {
      const newAchievements = await this.database.checkAndAwardAchievements(chatId, stats);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
      for (const achievement of newAchievements) {
        await this.notifyAchievement(chatId, achievement);
      }
      
      return newAchievements;
    } catch (error) {
      console.error('Error checking achievements:', error);
      return [];
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  async notifyAchievement(chatId, achievement) {
    const message = `üéâ *–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!*

${achievement.icon} *${achievement.name}*
${achievement.description}

üíé +${achievement.points} –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ`;

    await sendMessage(chatId, message, this.env);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
  async getAchievementProgress(chatId) {
    try {
      const user = await this.database.getUser(chatId);
      if (!user) return null;

      const achievements = await this.database.getAchievements(chatId);
      const unlockedTypes = achievements.map(a => a.achievement_type);

      const progress = [];
      
      for (const [type, achievement] of Object.entries(ACHIEVEMENT_TYPES)) {
        const isUnlocked = unlockedTypes.includes(type);
        const currentValue = this.getCurrentProgressValue(type, user);
        const targetValue = this.getTargetValue(type);
        const progressPercent = Math.min(Math.round((currentValue / targetValue) * 100), 100);

        progress.push({
          type,
          achievement,
          isUnlocked,
          currentValue,
          targetValue,
          progressPercent
        });
      }

      return progress;
    } catch (error) {
      console.error('Error getting achievement progress:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getCurrentProgressValue(type, user) {
    switch (type) {
      case 'FIRST_STEPS':
        return user.total_questions || 0;
      case 'STREAK_MASTER':
        return user.max_streak || 0;
      case 'SCORE_100':
        return user.total_score || 0;
      case 'AI_MASTER':
        return user.ai_questions || 0;
      case 'CATEGORY_EXPERT':
        return user.categories_studied || 0;
      case 'CHAMPION':
        return user.total_score || 0;
      default:
        return 0;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getTargetValue(type) {
    switch (type) {
      case 'FIRST_STEPS':
        return 10;
      case 'STREAK_MASTER':
        return 5;
      case 'SCORE_100':
        return 100;
      case 'AI_MASTER':
        return 10;
      case 'CATEGORY_EXPERT':
        return 8;
      case 'CHAMPION':
        return 1000;
      default:
        return 1;
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showAchievements(chatId) {
    try {
      const progress = await this.getAchievementProgress(chatId);
      if (!progress || progress.length === 0) {
        await sendMessage(chatId, 'üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!', this.env);
        return;
      }

      let message = `üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n`;
      
      const unlocked = progress.filter(p => p.isUnlocked);
      const locked = progress.filter(p => !p.isUnlocked);

      if (unlocked.length > 0) {
        message += `‚úÖ *–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:*\n`;
        for (const item of unlocked) {
          message += `${item.achievement.icon} **${item.achievement.name}**\n`;
          message += `‚îî ${item.achievement.description}\n`;
          message += `‚îî üíé +${item.achievement.points} XP\n\n`;
        }
      }

      if (locked.length > 0) {
        message += `üîí *–í –ø—Ä–æ—Ü–µ—Å—Å–µ:*\n`;
        for (const item of locked) {
          message += `${item.achievement.icon} **${item.achievement.name}**\n`;
          message += `‚îî ${item.achievement.description}\n`;
          message += `‚îî üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${item.currentValue}/${item.targetValue} (${item.progressPercent}%)\n\n`;
        }
      }

      const totalUnlocked = unlocked.length;
      const totalAchievements = progress.length;
      message += `\nüìà *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:* ${totalUnlocked}/${totalAchievements} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`;

      await sendMessage(chatId, message, this.env);
    } catch (error) {
      console.error('Error showing achievements:', error);
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', this.env);
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showUserProfile(chatId) {
    try {
      const user = await this.database.getUser(chatId);
      if (!user) {
        await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', this.env);
        return;
      }

      const currentLevel = AchievementSystem.LEVEL_SYSTEM.getLevel(user.experience_points || 0);
      const progress = AchievementSystem.LEVEL_SYSTEM.getProgress(user.experience_points || 0);
      const accuracy = (user.total_questions || 0) > 0 ? 
        Math.round(((user.total_correct || 0) / (user.total_questions || 1)) * 100) : 0;

      const message = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üèÜ –£—Ä–æ–≤–µ–Ω—å: ${currentLevel.level} ${currentLevel.name} (${progress}%)
üìä –û–±—â–∏–π —Å—á–µ—Ç: ${user.total_score || 0} –±–∞–ª–ª–æ–≤
üíé –û—á–∫–∏ –æ–ø—ã—Ç–∞: ${user.experience_points || 0} XP
üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${user.total_questions || 0}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.total_correct || 0}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%
üî• –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${user.max_streak || 0} –æ—Ç–≤–µ—Ç–æ–≤
üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${user.consecutive_days || 0}
üéì –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${this.getDifficultyName(user.difficulty_level || 'beginner')}

üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è*
‚Ä¢ –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: ${user.total_sessions || 0}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${this.formatDate(user.last_activity)}`;

      await sendMessage(chatId, message, this.env);
    } catch (error) {
      console.error('Error showing user profile:', error);
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', this.env);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  getDifficultyName(difficulty) {
    const names = {
      'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      'intermediate': '–°—Ä–µ–¥–Ω–∏–π',
      'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
    };
    return names[difficulty] || difficulty;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  formatDate(dateString) {
    if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
  async checkLevelUp(chatId, oldExperience, newExperience) {
    const oldLevel = AchievementSystem.LEVEL_SYSTEM.getLevel(oldExperience);
    const newLevel = AchievementSystem.LEVEL_SYSTEM.getLevel(newExperience);

    if (newLevel.level > oldLevel.level) {
      const message = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!*

üèÜ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${newLevel.level}: ${newLevel.name} ${newLevel.icon}

üíé –û—á–∫–∏ –æ–ø—ã—Ç–∞: ${newExperience} XP
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${AchievementSystem.LEVEL_SYSTEM.getProgress(newExperience)}%

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! üöÄ`;

      await sendMessage(chatId, message, this.env);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      await this.database.logActivity(
        chatId, 
        'level_up', 
        `–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è ${newLevel.level}: ${newLevel.name}`,
        0,
        0
      );

      return newLevel;
    }

    return null;
  }

  // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞ –æ—Ç–≤–µ—Ç
  calculateAnswerRewards(isCorrect, streak, context = {}) {
    let points = 0;
    let experience = 0;

    if (isCorrect) {
      points = 10;
      experience = AchievementSystem.EXPERIENCE_SYSTEM.calculateExperience('correctAnswer', context);
      
      // –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é
      if (streak > 1) {
        const streakBonus = Math.min(streak * 2, 20); // –º–∞–∫—Å–∏–º—É–º 20 –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤
        points += streakBonus;
        experience += AchievementSystem.EXPERIENCE_SYSTEM.calculateExperience('streakBonus', context);
      }
    } else {
      points = 1; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –ø–æ–ø—ã—Ç–∫—É
      experience = 1;
    }

    return { points, experience };
  }

  // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
  calculatePerfectTestRewards(questionsCount) {
    const baseReward = 50;
    const bonusPerQuestion = 5;
    const totalReward = baseReward + (questionsCount * bonusPerQuestion);

    return {
      points: totalReward,
      experience: AchievementSystem.EXPERIENCE_SYSTEM.rewards.perfectTest
    };
  }
} 
// –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
import { DatabaseManager } from './database.js';
import { sendMessage, sendMessageWithKeyboard } from './telegramApi.js';

export class DailyChallengeSystem {
  constructor(database, env) {
    this.database = database;
    this.env = env;
  }

  // –¢–∏–ø—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  static CHALLENGE_TYPES = {
    DAILY_QUESTIONS: {
      id: 'daily_questions',
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
      description: '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è',
      target: 5,
      reward: { points: 20, experience: 10 }
    },
    DAILY_STREAK: {
      id: 'daily_streak',
      name: '–°–µ—Ä–∏—è –¥–Ω—è',
      description: '–ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä–∏—é –∏–∑ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
      target: 3,
      reward: { points: 15, experience: 8 }
    },
    DAILY_CATEGORY: {
      id: 'daily_category',
      name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–Ω—è',
      description: '–ò–∑—É—á–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–í–∏–Ω–∞"',
      target: '–í–∏–Ω–∞',
      reward: { points: 25, experience: 12 }
    },
    DAILY_ACCURACY: {
      id: 'daily_accuracy',
      name: '–¢–æ—á–Ω–æ—Å—Ç—å –¥–Ω—è',
      description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 80% —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–µ –∏–∑ 5+ –≤–æ–ø—Ä–æ—Å–æ–≤',
      target: 80,
      reward: { points: 30, experience: 15 }
    },
    DAILY_AI: {
      id: 'daily_ai',
      name: '–ò–ò-–∑–∞–¥–∞–Ω–∏–µ',
      description: '–ü—Ä–æ–π–¥–∏—Ç–µ 3 –ò–ò-–≤–æ–ø—Ä–æ—Å–∞',
      target: 3,
      reward: { points: 35, experience: 18 }
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  async generateDailyChallenge(chatId) {
    try {
      const today = new Date().toDateString();
      const challengeType = this.getRandomChallengeType();
      
      const challengeId = `${challengeType.id}_${today}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const existing = await this.database.db.prepare(`
        SELECT id FROM daily_challenges 
        WHERE chat_id = ? AND challenge_id = ? AND created_date = CURRENT_DATE
      `).bind(chatId, challengeId).first();

      if (existing) {
        return null; // –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      await this.database.db.prepare(`
        INSERT INTO daily_challenges (
          chat_id, challenge_id, challenge_type, challenge_name, 
          description, target_value, reward_points, reward_experience
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `).bind(
        chatId, challengeId, challengeType.id, challengeType.name,
        challengeType.description, challengeType.target,
        challengeType.reward.points, challengeType.reward.experience
      ).run();

      return {
        id: challengeId,
        type: challengeType,
        date: today,
        progress: 0,
        completed: false
      };
    } catch (error) {
      console.error('Error generating daily challenge:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
  getRandomChallengeType() {
    const types = Object.values(DailyChallengeSystem.CHALLENGE_TYPES);
    return types[Math.floor(Math.random() * types.length)];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getActiveChallenges(chatId) {
    try {
      const challenges = await this.database.db.prepare(`
        SELECT challenge_id, challenge_type, challenge_name, description,
               target_value, current_progress, is_completed,
               reward_points, reward_experience, created_date
        FROM daily_challenges 
        WHERE chat_id = ? AND created_date = CURRENT_DATE
        ORDER BY created_date DESC
      `).bind(chatId).all();

      return challenges.results;
    } catch (error) {
      console.error('Error getting active challenges:', error);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è
  async updateChallengeProgress(chatId, challengeType, progress) {
    try {
      const today = new Date().toDateString();
      const challengeId = `${challengeType}_${today}`;

      await this.database.db.prepare(`
        UPDATE daily_challenges SET 
          current_progress = ?
        WHERE chat_id = ? AND challenge_id = ? AND created_date = CURRENT_DATE
      `).bind(progress, chatId, challengeId).run();

      return true;
    } catch (error) {
      console.error('Error updating challenge progress:', error);
      return false;
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  async completeChallenge(chatId, challengeId) {
    try {
      const challenge = await this.database.db.prepare(`
        SELECT * FROM daily_challenges 
        WHERE chat_id = ? AND challenge_id = ? AND created_date = CURRENT_DATE
      `).bind(chatId, challengeId).first();

      if (!challenge || challenge.is_completed) {
        return false;
      }

      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
      await this.database.db.prepare(`
        UPDATE daily_challenges SET 
          is_completed = TRUE,
          completed_date = CURRENT_DATE
        WHERE chat_id = ? AND challenge_id = ?
      `).bind(chatId, challengeId).run();

      // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.database.updateUserStats(chatId, {
        experiencePoints: challenge.reward_experience
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      await this.database.logActivity(
        chatId,
        'daily_challenge_completed',
        `–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${challenge.challenge_name}`,
        challenge.reward_points,
        challenge.reward_experience
      );

      return {
        challenge,
        rewards: {
          points: challenge.reward_points,
          experience: challenge.reward_experience
        }
      };
    } catch (error) {
      console.error('Error completing challenge:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π
  async checkAndUpdateProgress(chatId, action, value) {
    try {
      const activeChallenges = await this.getActiveChallenges(chatId);
      
      for (const challenge of activeChallenges) {
        if (challenge.is_completed) continue;

        let shouldUpdate = false;
        let newProgress = challenge.current_progress;

        switch (challenge.challenge_type) {
          case 'daily_questions':
            if (action === 'answer_question') {
              newProgress = challenge.current_progress + 1;
              shouldUpdate = true;
            }
            break;

          case 'daily_streak':
            if (action === 'streak_achieved' && value >= challenge.target_value) {
              newProgress = challenge.target_value;
              shouldUpdate = true;
            }
            break;

          case 'daily_category':
            if (action === 'category_studied' && value === challenge.target_value) {
              newProgress = 1;
              shouldUpdate = true;
            }
            break;

          case 'daily_accuracy':
            if (action === 'test_completed' && value >= challenge.target_value) {
              newProgress = challenge.target_value;
              shouldUpdate = true;
            }
            break;

          case 'daily_ai':
            if (action === 'ai_question_answered') {
              newProgress = challenge.current_progress + 1;
              shouldUpdate = true;
            }
            break;
        }

        if (shouldUpdate) {
          await this.updateChallengeProgress(chatId, challenge.challenge_type, newProgress);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
          if (newProgress >= challenge.target_value) {
            const completion = await this.completeChallenge(chatId, challenge.challenge_id);
            if (completion) {
              await this.notifyChallengeCompleted(chatId, completion);
            }
          }
        }
      }
    } catch (error) {
      console.error('Error checking challenge progress:', error);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
  async notifyChallengeCompleted(chatId, completion) {
    const { challenge, rewards } = completion;
    
    const message = `üéâ *–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*

‚úÖ **${challenge.challenge_name}**
${challenge.description}

üíé +${rewards.experience} XP
üèÜ +${rewards.points} –±–∞–ª–ª–æ–≤

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ`;

    await sendMessage(chatId, message, this.env);
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  async showDailyChallenges(chatId) {
    try {
      console.log('DailyChallengeSystem.showDailyChallenges called for chatId:', chatId);
      console.log('Database instance:', this.database);
      console.log('Env passed to DailyChallengeSystem:', this.env);
      
      const challenges = await this.getActiveChallenges(chatId);
      console.log('Active challenges retrieved:', challenges);
      
      if (challenges.length === 0) {
        console.log('No active challenges, generating new ones...');
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
        const challenge1 = await this.generateDailyChallenge(chatId);
        console.log('Generated challenge 1:', challenge1);
        const challenge2 = await this.generateDailyChallenge(chatId);
        console.log('Generated challenge 2:', challenge2);
        const challenge3 = await this.generateDailyChallenge(chatId);
        console.log('Generated challenge 3:', challenge3);
        
        const newChallenges = await this.getActiveChallenges(chatId);
        console.log('New challenges generated:', newChallenges);
        await this.displayChallenges(chatId, newChallenges);
      } else {
        console.log('Displaying existing challenges...');
        await this.displayChallenges(chatId, challenges);
      }
      console.log('showDailyChallenges completed successfully');
    } catch (error) {
      console.error('Error showing daily challenges:', error);
      console.error('Error stack:', error.stack);
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π', this.env);
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
  async displayChallenges(chatId, challenges) {
    try {
      console.log('displayChallenges called with chatId:', chatId, 'challenges:', challenges);
      
      let message = `üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n`;
      
      let totalRewards = { points: 0, experience: 0 };
      let completedCount = 0;

      for (const challenge of challenges) {
        const status = challenge.is_completed ? '‚úÖ' : '‚è≥';
        const progress = challenge.is_completed ? 
          `${challenge.target_value}/${challenge.target_value}` : 
          `${challenge.current_progress}/${challenge.target_value}`;

        message += `${status} **${challenge.challenge_name}**\n`;
        message += `‚îî ${challenge.description}\n`;
        message += `‚îî üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n`;
        message += `‚îî üíé –ù–∞–≥—Ä–∞–¥–∞: +${challenge.reward_experience} XP\n\n`;

        if (challenge.is_completed) {
          completedCount++;
          totalRewards.points += challenge.reward_points;
          totalRewards.experience += challenge.reward_experience;
        }
      }

      message += `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è:* ${completedCount}/${challenges.length} –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
      message += `üéÅ *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:* +${totalRewards.experience} XP`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'daily_challenges_refresh' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'daily_challenges_stats' }
          ],
          [
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }
          ]
        ]
      };

      console.log('About to send message with keyboard. Message length:', message.length);
      console.log('Keyboard:', keyboard);
      console.log('Env passed to sendMessageWithKeyboard:', this.env);
      
      await sendMessageWithKeyboard(chatId, message, keyboard, this.env);
      console.log('Message sent successfully');
    } catch (error) {
      console.error('Error in displayChallenges:', error);
      console.error('Error stack:', error.stack);
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π', this.env);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  async getChallengeStats(chatId) {
    try {
      const stats = await this.database.db.prepare(`
        SELECT 
          COUNT(*) as total_challenges,
          SUM(CASE WHEN is_completed THEN 1 ELSE 0 END) as completed_challenges,
          SUM(CASE WHEN is_completed THEN reward_points ELSE 0 END) as total_points_earned,
          SUM(CASE WHEN is_completed THEN reward_experience ELSE 0 END) as total_experience_earned
        FROM daily_challenges 
        WHERE chat_id = ? AND created_date >= date('now', '-7 days')
      `).bind(chatId).first();

      return stats;
    } catch (error) {
      console.error('Error getting challenge stats:', error);
      return null;
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
  async showChallengeStats(chatId) {
    try {
      const stats = await this.getChallengeStats(chatId);
      if (!stats) {
        await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', this.env);
        return;
      }

      const completionRate = stats.total_challenges > 0 ? 
        Math.round((stats.completed_challenges / stats.total_challenges) * 100) : 0;

      const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π*

üìÖ *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: ${stats.total_challenges}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completed_challenges}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${completionRate}%
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: ${stats.total_points_earned}
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø—ã—Ç–∞: ${stats.total_experience_earned} XP

üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
${completionRate >= 80 ? '‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞–Ω–∏—è.' : 
  completionRate >= 50 ? 'üü° –•–æ—Ä–æ—à–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π.' : 
  'üî¥ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —á–∞—â–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.'}`;

      await sendMessage(chatId, message, this.env);
    } catch (error) {
      console.error('Error showing challenge stats:', error);
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', this.env);
    }
  }
} 
// src/guest-bot.js
// –ì–æ—Å—Ç–µ–≤–æ–π –±–æ—Ç –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞

import { sendMessage, sendMessageWithKeyboard } from './handlers/telegramApi.js';
import { startGuestAIFoodChat, handleGuestAIPrefsMessage, guestMenuCategoryList, guestMenuCategoryDrinks, guestShowDrinkDetails, guestAlcoholCategoryList, guestAlcoholCategoryDrinks } from './handlers/guest/menu.js';
import {
  isAwaitingFeedback,
  setAwaitingFeedback,
  handleGuestFeedbackMessage
} from './handlers/guest/feedback.js';
import { showMenuCategories, showCategoryDrinks, showDrinkDetails, showAlcoholCategories } from './handlers/guest/menu-common.js';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
async function handleGuestMessage(message, env) {
  const chatId = message.chat.id;
  const text = message.text || '';

  // AI-—á–∞—Ç –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
  if (await handleGuestAIPrefsMessage(message, env)) {
    return;
  }

  if (isAwaitingFeedback(chatId)) {
    await handleGuestFeedbackMessage(message, env);
    return;
  }

  if (text === '/start') {
    await sendWelcomeMessage(chatId, env);
  } else if (text === '/help') {
    await sendHelpMessage(chatId, env);
  } else {
    await sendGuestMainMenu(chatId, env);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–∫–Ω–æ–ø–∫–∏)
async function handleCallbackQuery(callbackQuery, env) {
  const chatId = callbackQuery.from.id;
  const data = callbackQuery.data;

  if (data === 'section_menu') {
    await showMenuCategories(chatId, env);
    return;
  }
  if (data === 'section_alcohol') {
    await showAlcoholCategories(chatId, env);
    return;
  }
  if (data.startsWith('category_')) {
    const categoryType = data.replace('category_', '');
    await showCategoryDrinks(categoryType, chatId, env);
    return;
  }
  if (data.startsWith('drink_')) {
    const drinkId = data.replace('drink_', '');
    await showDrinkDetails(drinkId, chatId, env);
    return;
  }
  if (data === 'refresh_data') {
    const { refreshWineData } = await import('./handlers/data.js');
    await refreshWineData(env);
    await sendMessageWithKeyboard(chatId, '‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Google Sheets!', { inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]] }, env);
    return;
  }

  switch (data) {
    case 'main_menu':
      await sendGuestMainMenu(chatId, env);
      break;
    case 'guest_feedback':
      setAwaitingFeedback(chatId);
      await sendMessage(chatId, '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –≤–∏–∑–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!', env, undefined);
      break;
    case 'guest_ai_food_chat':
      await startGuestAIFoodChat(chatId, env);
      break;
    case 'guest_ask_ai':
      await sendMessage(chatId, 'ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö –∏–ª–∏ —Å–æ—á–µ—Ç–∞–Ω–∏—è—Ö ‚Äî –Ω–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏—Ç!', env, undefined);
      break;
    case 'guest_about':
      await sendMessage(chatId, 'üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω KETCH UP\n–ê–¥—Ä–µ—Å: ...\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ...\n–ê–∫—Ü–∏–∏: ...', env, undefined);
      break;
    default:
      await sendGuestMainMenu(chatId, env);
      break;
  }
  // –û—Ç–≤–µ—Ç –Ω–∞ callback query (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏")
  if (callbackQuery.id) {
    try {
      await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: callbackQuery.id })
      });
    } catch {}
  }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function sendWelcomeMessage(chatId, env) {
  const text = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω KETCH UP!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:';
  await sendGuestMainMenu(chatId, env, text);
}

async function sendHelpMessage(chatId, env) {
  const text = '‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≥–æ—Å—Ç–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ KETCH UP.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é, –Ω–∞–ø–∏—Ç–∫–∏, –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.';
  await sendGuestMainMenu(chatId, env, text);
}

async function sendGuestMainMenu(chatId, env, customText) {
  const text = customText || 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:';
  const keyboard = {
    inline_keyboard: [
      [ { text: 'üçΩÔ∏è –ú–µ–Ω—é', callback_data: 'section_menu' }, { text: 'üç∑ –ê–ª–∫–æ–≥–æ–ª—å', callback_data: 'section_alcohol' } ],
      [ { text: '‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data: 'guest_feedback' } ],
      [ { text: 'ü§ñ AI-–ø–æ–¥–±–æ—Ä –±–ª—é–¥', callback_data: 'guest_ai_food_chat' } ],
      [ { text: 'ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É AI', callback_data: 'guest_ask_ai' } ],
      [ { text: 'üè™ –û –∑–∞–≤–µ–¥–µ–Ω–∏–∏', callback_data: 'guest_about' } ],
      [ { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'refresh_data' } ]
    ]
  };
  await sendMessageWithKeyboard(chatId, text, keyboard, env);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
export async function handleGuestWebhook(request, env) {
  try {
    if (request.method !== 'POST') {
      return new Response('OK', { status: 200 });
    }
    const update = await request.json();
    if (update.message) {
      await handleGuestMessage(update.message, env);
    }
    if (update.callback_query) {
      await handleCallbackQuery(update.callback_query, env);
    }
    return new Response('OK', { status: 200 });
  } catch (error) {
    console.error('[GUEST BOT] Error in webhook handler:', error);
    return new Response('ERROR', { status: 500 });
  }
}

export default { fetch: handleGuestWebhook }; 
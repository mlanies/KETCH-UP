import { getAssetFromKV } from '@cloudflare/kv-asset-handler'

/**
 * The DEBUG flag will do two things that help during development:
 * 1. we will skip caching on the edge, which makes it easier to
 *    debug.
 * 2. we will return an error message on exception in your Response rather
 *    than the default 404.html page.
 */
const DEBUG = false

addEventListener('fetch', event => {
  const url = new URL(event.request.url);
  if (url.pathname === '/test-reminder') {
    event.respondWith(testReminder(event));
    return;
  }
  try {
    event.respondWith(handleEvent(event))
  } catch (e) {
    if (DEBUG) {
      return event.respondWith(
        new Response(e.message || e.toString(), {
          status: 500,
        }),
      )
    }
    event.respondWith(new Response('Internal Error', { status: 500 }))
  }
})

async function handleEvent(event) {
  const url = new URL(event.request.url)
  let options = {}

  /**
   * You can add custom logic to how we fetch your assets
   * by configuring the function `mapRequestToAsset`
   */
  // options.mapRequestToAsset = req => new Request(`${new URL(req.url).origin}/index.html`, req)

  try {
    if (DEBUG) {
      // customize caching
      options.cacheControl = {
        bypassCache: true,
      }
    }
    return await getAssetFromKV(event, options)
  } catch (e) {
    // if an error is thrown try to serve the asset at 404.html
    if (!DEBUG) {
      try {
        let notFoundResponse = await getAssetFromKV(event, {
          mapRequestToAsset: req => new Request(`${new URL(req.url).origin}/index.html`, req),
        })

        return new Response(notFoundResponse.body, { ...notFoundResponse, status: 200 })
      } catch (e) {}
    }

    return new Response(e.message || e.toString(), { status: 500 })
  }
}

async function testReminder(event) {
  await handleScheduled(event);
  return new Response('Test reminder sent!', { status: 200 });
}

// Cloudflare Worker: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron)
addEventListener('scheduled', event => {
  event.waitUntil(handleScheduled(event));
});

async function handleScheduled(event) {
  // === TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –∏–ª–∏ KV ===
  // –ü—Ä–∏–º–µ—Ä: const users = await getAllUsers();
  // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä —Å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
  const users = [
    { chatId: '123456789', level: 1, lastLearningDate: '2024-06-10' },
    // ...
  ];

  // –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
  const today = new Date().toISOString().split('T')[0];

  for (const user of users) {
    // === –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –Ω–µ —É—á–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å ===
    if (user.level < 3 || user.lastLearningDate !== today) {
      const message = generateReminderMessage(user);
      await sendTelegramMessage(user.chatId, message, event);
    }
  }
}

function generateReminderMessage(user) {
  // –ü—Ä–∏–º–µ—Ä: user = { level, lastLearningDate, lastActiveDate, streak, errors, nextLevelXp, currentXp }
  const today = new Date().toISOString().split('T')[0];
  const daysSinceLastLearning = user.lastLearningDate ? Math.floor((Date.now() - new Date(user.lastLearningDate).getTime()) / (1000 * 60 * 60 * 24)) : 99;
  const daysSinceLastActive = user.lastActiveDate ? Math.floor((Date.now() - new Date(user.lastActiveDate).getTime()) / (1000 * 60 * 60 * 24)) : 99;

  // 1. –î–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª
  if (daysSinceLastActive > 7) {
    return '‚è∞ –ú—ã —Å–∫—É—á–∞–µ–º –ø–æ –≤–∞–º! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ–±—É—á–µ–Ω–∏—é ‚Äî –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –∂–¥—É—Ç!';
  }
  // 2. –î–∞–≤–Ω–æ –Ω–µ —É—á–∏–ª—Å—è
  if (daysSinceLastLearning > 3) {
    return 'üìö –í—ã –¥–∞–≤–Ω–æ –Ω–µ –æ–±—É—á–∞–ª–∏—Å—å! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—É—á–µ–Ω–∏–µ?';
  }
  // 3. –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
  if (user.level < 3) {
    return 'üëã –ü–æ—Ä–∞ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å! –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!';
  }
  // 4. –ë–ª–∏–∑–∫–æ –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é
  if (user.nextLevelXp && user.currentXp && (user.nextLevelXp - user.currentXp) <= 10) {
    return 'üöÄ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! –ü—Ä–æ–π–¥–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω —É—Ä–æ–∫!';
  }
  // 5. –ß–∞—Å—Ç–æ –æ—à–∏–±–∞–µ—Ç—Å—è
  if (user.errors && user.errors > 3) {
    return 'üí° –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –û—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?';
  }
  // 6. –î–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (streak)
  if (user.streak && user.streak >= 5) {
    return `üî• –£ –≤–∞—Å —Å–µ—Ä–∏—è –∏–∑ ${user.streak} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!`;
  }
  // 7. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return 'üéØ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è! –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å!';
}

async function sendTelegramMessage(chatId, text, event) {
  // === TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ env –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç–∞ ===
  const TELEGRAM_BOT_TOKEN = event.env ? event.env.TELEGRAM_BOT_TOKEN : 'YOUR_BOT_TOKEN';
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'Markdown' })
  });
} 
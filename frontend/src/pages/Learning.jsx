import React, { useState, useEffect } from 'react';
import { askAI } from '../utils/api.js';
import { fetchDrinks } from '../utils/api.js';
import LoadingSpinner from '../components/LoadingSpinner.jsx';
import ErrorMessage from '../components/ErrorMessage.jsx';

export default function Learning() {
  const [activeTab, setActiveTab] = useState('menu'); // menu, ai-chat
  const [question, setQuestion] = useState('');
  const [aiResponse, setAiResponse] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [chatHistory, setChatHistory] = useState([]);
  const [selectedDrink, setSelectedDrink] = useState(null);
  const [drinks, setDrinks] = useState([]);
  const [showDrinkSelector, setShowDrinkSelector] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (activeTab === 'ai-chat') {
      loadDrinks();
    }
  }, [activeTab]);

  const loadDrinks = async () => {
    try {
      const response = await fetchDrinks();
      if (response.success) {
        setDrinks(response.data.drinks || []);
      }
    } catch (err) {
      console.error('Error loading drinks for AI context:', err);
    }
  };

  const handleAskAI = async () => {
    if (!question.trim()) return;

    try {
      setIsLoading(true);
      setError(null);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
      const newQuestion = {
        id: Date.now(),
        type: 'question',
        content: question,
        timestamp: new Date().toISOString()
      };
      setChatHistory(prev => [...prev, newQuestion]);

      // –ü–æ–ª—É—á–∞–µ–º chatId –∏–∑ Telegram WebApp
      const chatId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userContext = {
        difficulty: 'beginner', // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        preferences: selectedDrink ? [selectedDrink.category] : [],
        previousQuestions: chatHistory
          .filter(msg => msg.type === 'question')
          .slice(-3)
          .map(msg => msg.content)
      };

      const response = await askAI(
        question, 
        selectedDrink?.id, 
        chatId, 
        userContext
      );

      if (response.success) {
        const newAnswer = {
          id: Date.now() + 1,
          type: 'answer',
          content: response.data.answer,
          timestamp: new Date().toISOString(),
          drinkContext: selectedDrink ? selectedDrink.name : null
        };
        setChatHistory(prev => [...prev, newAnswer]);
        setAiResponse(response.data.answer);
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
      }
    } catch (err) {
      console.error('Error asking AI:', err);
      setError(err.message);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const errorMessage = {
        id: Date.now() + 1,
        type: 'error',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date().toISOString()
      };
      setChatHistory(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setQuestion('');
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleAskAI();
    }
  };

  const clearChat = () => {
    setChatHistory([]);
    setAiResponse('');
    setSelectedDrink(null);
  };

  const getDrinkIcon = (category) => {
    const icons = {
      '–í–∏–Ω–∞': 'üç∑',
      '–í–∏—Å–∫–∏': 'ü•É',
      '–ö–æ–∫—Ç–µ–π–ª–∏': 'üç∏',
      '–ü–∏–≤–æ': 'üç∫',
      '–†–æ–º, –¢–µ–∫–∏–ª–∞': 'ü•É',
      '–î–∂–∏–Ω, –í–æ–¥–∫–∞, –õ–∏–∫–µ—Ä—ã': 'üç∏',
      '–ì—Ä–∞–ø–ø–∞, –ü–æ—Ä—Ç–æ, –ö–æ–Ω—å—è–∫, –í–µ—Ä–º—É—Ç': 'ü•É',
      '–õ–∏–º–æ–Ω–∞–¥—ã –∏ –ú–∏–ª–∫—à–µ–π–∫–∏': 'ü•§',
      '–ß–∞–π': 'üçµ',
      '–ö–æ—Ñ–µ': '‚òï',
      '–ü—Ä–µ–º–∏–∫—Å—ã': 'üßÉ',
      '–ü–§': 'ü•§',
      '–ú–∏–∫—Å –¥—Ä–∏–Ω–∫': 'üçπ',
      '–Ω–µ—Ç –≤ –º–µ–Ω—é': 'üç∑'
    };
    return icons[category] || 'üç∑';
  };

  if (activeTab === 'ai-chat') {
    return (
      <div className="max-w-md mx-auto p-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ */}
        <div className="flex items-center justify-between mb-6">
          <button 
            onClick={() => setActiveTab('menu')}
            className="flex items-center gap-2 text-wine-400 hover:text-wine-300"
          >
            <span>‚Üê</span>
            <span>–ù–∞–∑–∞–¥</span>
          </button>
          <h2 className="text-xl font-bold">–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</h2>
          <button 
            onClick={clearChat}
            className="text-slate-400 hover:text-slate-300 text-sm"
          >
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>

        {/* –í—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–∏—Ç–∫–∞ */}
        <div className="mb-4">
          <div className="text-sm font-medium text-slate-300 mb-2">
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–∏—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
          </div>
          {selectedDrink ? (
            <div className="flex items-center gap-3 p-3 bg-wine-600/20 border border-wine-500/50 rounded-lg">
              <span className="text-xl">{getDrinkIcon(selectedDrink.category)}</span>
              <div className="flex-1">
                <div className="font-medium text-sm">{selectedDrink.name}</div>
                <div className="text-xs text-slate-400">{selectedDrink.category}</div>
              </div>
              <button 
                onClick={() => setSelectedDrink(null)}
                className="text-slate-400 hover:text-slate-300"
              >
                ‚úï
              </button>
            </div>
          ) : (
            <button 
              onClick={() => setShowDrinkSelector(!showDrinkSelector)}
              className="w-full p-3 bg-slate-800/50 border border-slate-700/50 rounded-lg hover:bg-slate-700/50 transition-all text-left"
            >
              <div className="text-slate-400 text-sm">
                {showDrinkSelector ? '–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫' : '–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'}
              </div>
            </button>
          )}
        </div>

        {/* –°–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ */}
        {showDrinkSelector && (
          <div className="mb-4 max-h-40 overflow-y-auto">
            <div className="text-sm font-medium text-slate-300 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:</div>
            <div className="space-y-2">
              {drinks.slice(0, 10).map(drink => (
                <button
                  key={drink.id}
                  onClick={() => {
                    setSelectedDrink(drink);
                    setShowDrinkSelector(false);
                  }}
                  className="w-full flex items-center gap-3 p-2 bg-slate-800/50 border border-slate-700/50 rounded-lg hover:bg-slate-700/50 transition-all text-left"
                >
                  <span className="text-lg">{getDrinkIcon(drink.category)}</span>
                  <div className="flex-1 min-w-0">
                    <div className="font-medium text-sm truncate">{drink.name}</div>
                    <div className="text-xs text-slate-400 truncate">{drink.category}</div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        )}

        {/* –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ */}
        <div className="mb-4 max-h-60 overflow-y-auto space-y-3">
          {chatHistory.map(message => (
            <div 
              key={message.id}
              className={`flex ${message.type === 'question' ? 'justify-end' : 'justify-start'}`}
            >
              <div 
                className={`max-w-[80%] p-3 rounded-lg ${
                  message.type === 'question' 
                    ? 'bg-wine-600/20 border border-wine-500/50' 
                    : message.type === 'error'
                    ? 'bg-red-600/20 border border-red-500/50'
                    : 'bg-slate-800/50 border border-slate-700/50'
                }`}
              >
                <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                {message.drinkContext && (
                  <div className="text-xs text-wine-400 mt-1">
                    –ö–æ–Ω—Ç–µ–∫—Å—Ç: {message.drinkContext}
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-slate-800/50 border border-slate-700/50 rounded-lg p-3">
                <LoadingSpinner size="sm" />
              </div>
            </div>
          )}
        </div>

        {/* –§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞ */}
        <div className="space-y-3">
          <textarea
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö, –∏—Ö –ø–æ–¥–∞—á–µ, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏..."
            className="w-full bg-slate-800/80 border border-slate-700/50 rounded-lg px-4 py-3 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-wine-500 focus:border-transparent resize-none"
            rows="3"
            disabled={isLoading}
          />
          
          <button
            onClick={handleAskAI}
            disabled={!question.trim() || isLoading}
            className="w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? (
              <div className="flex items-center justify-center gap-2">
                <LoadingSpinner size="sm" />
                <span>–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...</span>
              </div>
            ) : (
              <div className="flex items-center justify-center gap-2">
                <span>ü§ñ</span>
                <span>–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò</span>
              </div>
            )}
          </button>
        </div>

        {error && (
          <div className="mt-4">
            <ErrorMessage message={error} onRetry={() => setError(null)} />
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="max-w-md mx-auto p-6">
      <div className="text-center mb-8">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-wine-600 to-wine-800 rounded-2xl mb-4 shadow-lg">
          <span className="text-2xl">üéì</span>
        </div>
        <h2 className="text-2xl font-bold mb-2">–û–±—É—á–µ–Ω–∏–µ</h2>
        <p className="text-slate-300">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è</p>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <button className="btn-primary flex flex-col items-center gap-2">
          <span className="text-xl">‚ö°</span>
          <span className="text-sm">–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç</span>
          <span className="text-xs text-slate-300">5 –≤–æ–ø—Ä–æ—Å–æ–≤</span>
        </button>
        
        <button className="btn-secondary flex flex-col items-center gap-2">
          <span className="text-xl">üìö</span>
          <span className="text-sm">–£—Ä–æ–∫–∏</span>
          <span className="text-xs text-slate-300">–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</span>
        </button>
        
        <button 
          onClick={() => setActiveTab('ai-chat')}
          className="btn-secondary flex flex-col items-center gap-2"
        >
          <span className="text-xl">ü§ñ</span>
          <span className="text-sm">–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</span>
          <span className="text-xs text-slate-300">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å</span>
        </button>
        
        <button className="btn-secondary flex flex-col items-center gap-2">
          <span className="text-xl">üéØ</span>
          <span className="text-sm">–¢–µ—Å—Ç</span>
          <span className="text-xs text-slate-300">–ü–æ —Å–ª–∞–±–æ—Å—Ç—è–º</span>
        </button>
      </div>

      <div className="card mt-6">
        <div className="text-lg font-semibold mb-4 flex items-center gap-2">
          <span>üìä</span>
          <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</span>
        </div>
        <div className="space-y-3">
          <div className="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg">
            <div>
              <div className="font-medium text-sm">–í–∏–Ω–∞</div>
              <div className="text-xs text-slate-400">–ò–∑—É—á–µ–Ω–æ: 8 –∏–∑ 15</div>
            </div>
            <div className="text-right">
              <div className="text-sm font-semibold text-wine-400">53%</div>
            </div>
          </div>
          <div className="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg">
            <div>
              <div className="font-medium text-sm">–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å</div>
              <div className="text-xs text-slate-400">–ò–∑—É—á–µ–Ω–æ: 12 –∏–∑ 20</div>
            </div>
            <div className="text-right">
              <div className="text-sm font-semibold text-wine-400">60%</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 
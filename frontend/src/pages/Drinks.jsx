import React, { useState, useEffect, useRef } from 'react';
import { fetchDrinks, askAI } from '../utils/api.js';
import LoadingSpinner from '../components/LoadingSpinner.jsx';
import ErrorMessage from '../components/ErrorMessage.jsx';

export default function Drinks() {
  const [drinks, setDrinks] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filteredDrinks, setFilteredDrinks] = useState([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞–ø–∏—Ç–∫–∞
  const [selectedDrink, setSelectedDrink] = useState(null);
  const [showDrinkModal, setShowDrinkModal] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ò–ò-—á–∞—Ç–∞
  const [aiQuestion, setAiQuestion] = useState('');
  const [aiResponse, setAiResponse] = useState('');
  const [aiLoading, setAiLoading] = useState(false);
  const [aiError, setAiError] = useState(null);
  const [chatHistory, setChatHistory] = useState([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const [showAllCategories, setShowAllCategories] = useState(false);
  const drinksListRef = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadDrinks();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    let filtered = drinks;

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(drink => drink.category === selectedCategory);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(drink => 
        drink.name.toLowerCase().includes(query)
      );
    }

    setFilteredDrinks(filtered);
  }, [drinks, selectedCategory, searchQuery]);

  const loadDrinks = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetchDrinks();
      
      if (response.success) {
        setDrinks(response.data.drinks || []);
        setCategories(response.data.categories || []);
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (err) {
      console.error('Error loading drinks:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const getCategoryIcon = (category) => {
    const icons = {
      '–í–∏–Ω–∞': 'üç∑',
      '–í–∏—Å–∫–∏': 'ü•É',
      '–ö–æ–∫—Ç–µ–π–ª–∏': 'üç∏',
      '–ü–∏–≤–æ': 'üç∫',
      '–†–æ–º, –¢–µ–∫–∏–ª–∞': 'ü•É',
      '–î–∂–∏–Ω, –í–æ–¥–∫–∞, –õ–∏–∫–µ—Ä—ã': 'üç∏',
      '–ì—Ä–∞–ø–ø–∞, –ü–æ—Ä—Ç–æ, –ö–æ–Ω—å—è–∫, –í–µ—Ä–º—É—Ç': 'ü•É',
      '–õ–∏–º–æ–Ω–∞–¥—ã –∏ –ú–∏–ª–∫—à–µ–π–∫–∏': 'ü•§',
      '–ß–∞–π': 'üçµ',
      '–ö–æ—Ñ–µ': '‚òï',
      '–ü—Ä–µ–º–∏–∫—Å—ã': 'üßÉ',
      '–ü–§': 'ü•§',
      '–ú–∏–∫—Å –¥—Ä–∏–Ω–∫': 'üçπ',
      '–Ω–µ—Ç –≤ –º–µ–Ω—é': 'üç∑'
    };
    return icons[category] || 'üç∑';
  };

  const getDrinkDetails = (drink) => {
    const details = [];
    
    if (drink.alcohol) {
      details.push(`${drink.alcohol}%`);
    }
    if (drink.country) {
      details.push(drink.country);
    }
    if (drink.sugar) {
      details.push(`–°–∞—Ö–∞—Ä: ${drink.sugar}`);
    }
    if (drink.type) {
      details.push(drink.type);
    }
    
    return details.join(' ‚Ä¢ ');
  };

  const getCategoryCount = (category) => {
    if (category === 'all') {
      return drinks.length;
    }
    return drinks.filter(drink => drink.category === category).length;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø–∏—Ç–∫–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const getDrinkInfo = (drink) => {
    if (!drink) return [];
    return [
      drink.description && { label: '–û–ø–∏—Å–∞–Ω–∏–µ', value: getShortDescription(drink.description) },
      drink.alcohol && { label: '–ö—Ä–µ–ø–æ—Å—Ç—å', value: drink.alcohol + '%' },
      drink.country && { label: '–°—Ç—Ä–∞–Ω–∞', value: drink.country },
      drink.sugar && { label: '–°–∞—Ö–∞—Ä', value: drink.sugar },
      drink.type && { label: '–¢–∏–ø', value: drink.type },
    ].filter(Boolean);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
  const openDrinkModal = (drink) => {
    setSelectedDrink(drink);
    setShowDrinkModal(true);
    setChatHistory([]);
    setAiResponse('');
    setAiError(null);
  };

  const closeDrinkModal = () => {
    setShowDrinkModal(false);
    setSelectedDrink(null);
    setAiQuestion('');
    setAiResponse('');
    setChatHistory([]);
    setAiError(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏)
  const getShortDescription = (desc) => {
    if (!desc) return '';
    const dotIdx = desc.indexOf('.');
    if (dotIdx > 0) return desc.slice(0, dotIdx + 1);
    return desc.split(/[\n\r]/)[0];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ (–∫–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
  const formatIngredients = (ingredients) => {
    if (!ingredients) return '';
    return ingredients
      .split(/, ?/)
      .map((item, idx) => <div key={idx}>‚Ä¢ {item.trim()}</div>);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ò–ò
  const handleAskAI = async () => {
    if (!aiQuestion.trim() || !selectedDrink) return;

    try {
      setAiLoading(true);
      setAiError(null);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
      const newQuestion = {
        id: Date.now(),
        type: 'question',
        content: aiQuestion,
        timestamp: new Date().toISOString()
      };
      setChatHistory(prev => [...prev, newQuestion]);

      // –ü–æ–ª—É—á–∞–µ–º chatId –∏–∑ Telegram WebApp
      const chatId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userContext = {
        difficulty: 'beginner',
        preferences: [selectedDrink.category],
        previousQuestions: chatHistory
          .filter(msg => msg.type === 'question')
          .slice(-3)
          .map(msg => msg.content)
      };

      const response = await askAI(
        aiQuestion, 
        selectedDrink.id, 
        chatId, 
        userContext
      );

      if (response.success) {
        const newAnswer = {
          id: Date.now() + 1,
          type: 'answer',
          content: response.data.answer,
          timestamp: new Date().toISOString()
        };
        setChatHistory(prev => [...prev, newAnswer]);
        setAiResponse(response.data.answer);
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
      }
    } catch (err) {
      console.error('Error asking AI:', err);
      setAiError(err.message);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const errorMessage = {
        id: Date.now() + 1,
        type: 'error',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date().toISOString()
      };
      setChatHistory(prev => [...prev, errorMessage]);
    } finally {
      setAiLoading(false);
      setAiQuestion('');
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleAskAI();
    }
  };

  // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    setShowAllCategories(false);
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø–∏—Ç–∫–æ–≤
    setTimeout(() => {
      drinksListRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }, 100);
  };

  if (loading) {
    return (
      <div className="max-w-md mx-auto p-6">
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-wine-600 to-wine-800 rounded-2xl mb-4 shadow-lg">
            <span className="text-2xl">üç∑</span>
          </div>
          <h2 className="text-2xl font-bold mb-2">–ë–∞–∑–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤</h2>
          <p className="text-slate-300">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-md mx-auto p-6">
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-wine-600 to-wine-800 rounded-2xl mb-4 shadow-lg">
            <span className="text-2xl">üç∑</span>
          </div>
          <h2 className="text-2xl font-bold mb-2">–ë–∞–∑–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤</h2>
          <p className="text-slate-300">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
        </div>
        <ErrorMessage message={error} onRetry={loadDrinks} />
      </div>
    );
  }

  return (
    <>
      <div className="max-w-md mx-auto p-6">
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-wine-600 to-wine-800 rounded-2xl mb-4 shadow-lg">
            <span className="text-2xl">üç∑</span>
          </div>
          <h2 className="text-2xl font-bold mb-2">–ë–∞–∑–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤</h2>
          <p className="text-slate-300">
            {filteredDrinks.length} –∏–∑ {drinks.length} –Ω–∞–ø–∏—Ç–∫–æ–≤
          </p>
        </div>

        {/* –ü–æ–∏—Å–∫ */}
        <div className="mb-6">
          <div className="relative">
            <input
              type="text"
              placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full bg-slate-800/80 border border-slate-700/50 rounded-lg px-4 py-3 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-wine-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="mb-6">
          <div className="text-sm font-medium text-slate-300 mb-3">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</div>
          <div className="flex flex-wrap gap-2">
            {showAllCategories ? (
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              [
                <button
                  key="all"
                  onClick={() => handleCategorySelect('all')}
                  className={`flex items-center gap-1 px-3 py-1 rounded-md text-xs font-medium border transition-all ${selectedCategory === 'all' ? 'bg-wine-600/20 border-wine-500/50 text-wine-400' : 'bg-slate-800/50 border-slate-700/50 hover:bg-slate-700/50 text-slate-300'}`}
                >
                  üç∑ –í—Å–µ
                  <span className="text-xs text-slate-400">{getCategoryCount('all')}</span>
                </button>,
                ...categories.map(category => (
                  <button
                    key={category}
                    onClick={() => handleCategorySelect(category)}
                    className={`flex items-center gap-1 px-3 py-1 rounded-md text-xs font-medium border transition-all ${selectedCategory === category ? 'bg-wine-600/20 border-wine-500/50 text-wine-400' : 'bg-slate-800/50 border-slate-700/50 hover:bg-slate-700/50 text-slate-300'}`}
                  >
                    {getCategoryIcon(category)} {category}
                    <span className="text-xs text-slate-400">{getCategoryCount(category)}</span>
                  </button>
                )),
                <button
                  key="hide"
                  onClick={() => setShowAllCategories(false)}
                  className="ml-2 px-3 py-1 rounded-md text-xs font-medium border border-slate-700/50 bg-slate-800/50 text-slate-400 hover:bg-slate-700/50"
                >
                  –°–∫—Ä—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </button>
              ]
            ) : (
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
              [
                <button
                  key={selectedCategory}
                  onClick={() => handleCategorySelect(selectedCategory)}
                  className={`flex items-center gap-1 px-3 py-1 rounded-md text-xs font-medium border bg-wine-600/20 border-wine-500/50 text-wine-400`}
                >
                  {getCategoryIcon(selectedCategory)} {selectedCategory === 'all' ? '–í—Å–µ' : selectedCategory}
                  <span className="text-xs text-slate-400">{getCategoryCount(selectedCategory)}</span>
                </button>,
                <button
                  key="show"
                  onClick={() => setShowAllCategories(true)}
                  className="ml-2 px-3 py-1 rounded-md text-xs font-medium border border-slate-700/50 bg-slate-800/50 text-slate-400 hover:bg-slate-700/50"
                >
                  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </button>
              ]
            )}
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ */}
        <div ref={drinksListRef} className="space-y-3">
          {filteredDrinks.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-4xl mb-4">üç∑</div>
              <div className="text-slate-300 mb-2">
                {searchQuery || selectedCategory !== 'all' 
                  ? '–ù–∞–ø–∏—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
                  : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤'
                }
              </div>
              <div className="text-sm text-slate-400">
                {searchQuery || selectedCategory !== 'all' 
                  ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' 
                  : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'
                }
              </div>
            </div>
          ) : (
            filteredDrinks.slice(0, 20).map(drink => (
              <button
                key={drink.id} 
                onClick={() => openDrinkModal(drink)}
                className="w-full flex items-center gap-3 p-4 bg-slate-800/50 border border-slate-700/50 rounded-lg hover:bg-slate-700/50 transition-all text-left"
              >
                <div className="w-12 h-12 bg-wine-600/20 rounded-lg flex items-center justify-center">
                  <span className="text-xl">{getCategoryIcon(drink.category)}</span>
                </div>
                <div className="flex-1 min-w-0">
                  <div className="font-medium text-sm truncate">{drink.name}</div>
                  <div className="text-xs text-slate-400 truncate">
                    {getDrinkDetails(drink)}
                  </div>
                  {drink.category && (
                    <div className="text-xs text-wine-400 mt-1">{drink.category}</div>
                  )}
                </div>
                <div className="text-slate-400 text-sm">‚Üí</div>
              </button>
            ))
          )}
          
          {filteredDrinks.length > 20 && (
            <div className="text-center py-4">
              <div className="text-sm text-slate-400">
                –ü–æ–∫–∞–∑–∞–Ω–æ 20 –∏–∑ {filteredDrinks.length} –Ω–∞–ø–∏—Ç–∫–æ–≤
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–ø–∏—Ç–∫–∞ */}
      {showDrinkModal && selectedDrink && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center p-4 z-50">
          <div className="bg-slate-900 border border-slate-700 rounded-2xl w-full max-w-md max-h-[90vh] overflow-hidden">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center justify-between p-4 border-b border-slate-700">
              <div className="flex items-center gap-3">
                <span className="text-2xl">{getCategoryIcon(selectedDrink.category)}</span>
                <div>
                  <h3 className="font-bold text-lg">{selectedDrink.name}</h3>
                  <p className="text-sm text-slate-400">{selectedDrink.category}</p>
                </div>
              </div>
              <button 
                onClick={closeDrinkModal}
                className="text-slate-400 hover:text-slate-300 text-xl"
              >
                ‚úï
              </button>
            </div>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ */}
              <div className="p-4 border-b border-slate-700">
                <h4 className="font-semibold mb-3 text-wine-400">üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <div className="space-y-2">
                  {getDrinkInfo(selectedDrink).map((info, index) => (
                    <div key={index} className="flex justify-between">
                      <span className="text-sm text-slate-400">{info.label}:</span>
                      <span className="text-sm font-medium whitespace-pre-line">{info.value}</span>
                    </div>
                  ))}
                  {selectedDrink.method && (
                    <div className="flex justify-between">
                      <span className="text-sm text-slate-400">–ú–µ—Ç–æ–¥:</span>
                      <span className="text-sm font-medium whitespace-pre-line">{selectedDrink.method}</span>
                    </div>
                  )}
                  {selectedDrink.glassware && (
                    <div className="flex justify-between">
                      <span className="text-sm text-slate-400">–ü–æ—Å—É–¥–∞:</span>
                      <span className="text-sm font-medium whitespace-pre-line">{selectedDrink.glassware}</span>
                    </div>
                  )}
                  {selectedDrink.ice && (
                    <div className="flex justify-between">
                      <span className="text-sm text-slate-400">–õ–µ–¥:</span>
                      <span className="text-sm font-medium whitespace-pre-line">{selectedDrink.ice}</span>
                    </div>
                  )}
                  {selectedDrink.ingredients && (
                    <div className="flex items-start gap-2">
                      <span className="text-sm text-slate-400 min-w-[70px]">–°–æ—Å—Ç–∞–≤:</span>
                      <span className="text-sm font-medium whitespace-pre-line">{formatIngredients(selectedDrink.ingredients)}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* –ò–ò-—á–∞—Ç */}
              <div className="p-4">
                <h4 className="font-semibold mb-3 text-wine-400">ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò</h4>
                
                {/* –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ */}
                <div className="mb-4 max-h-40 overflow-y-auto space-y-2">
                  {chatHistory.map(message => (
                    <div 
                      key={message.id}
                      className={`flex ${message.type === 'question' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div 
                        className={`max-w-[80%] p-2 rounded-lg text-sm ${
                          message.type === 'question' 
                            ? 'bg-wine-600/20 border border-wine-500/50' 
                            : message.type === 'error'
                            ? 'bg-red-600/20 border border-red-500/50'
                            : 'bg-slate-800/50 border border-slate-700/50'
                        }`}
                      >
                        <div className="whitespace-pre-wrap">{message.content}</div>
                      </div>
                    </div>
                  ))}
                  
                  {aiLoading && (
                    <div className="flex justify-start">
                      <div className="bg-slate-800/50 border border-slate-700/50 rounded-lg p-2">
                        <LoadingSpinner size="sm" />
                      </div>
                    </div>
                  )}
                </div>

                {/* –§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞ */}
                <div className="space-y-3">
                  <textarea
                    value={aiQuestion}
                    onChange={(e) => setAiQuestion(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder={`–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ ${selectedDrink.name}...`}
                    className="w-full bg-slate-800/80 border border-slate-700/50 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-wine-500 focus:border-transparent resize-none text-sm"
                    rows="2"
                    disabled={aiLoading}
                  />
                  
                  <button
                    onClick={handleAskAI}
                    disabled={!aiQuestion.trim() || aiLoading}
                    className="w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed text-sm py-2"
                  >
                    {aiLoading ? (
                      <div className="flex items-center justify-center gap-2">
                        <LoadingSpinner size="sm" />
                        <span>–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...</span>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center gap-2">
                        <span>ü§ñ</span>
                        <span>–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò</span>
                      </div>
                    )}
                  </button>
                </div>

                {aiError && (
                  <div className="mt-3">
                    <ErrorMessage message={aiError} onRetry={() => setAiError(null)} />
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
} 
// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è

import { getWineData } from './data.js';
import { sendMessage, sendMessageWithKeyboard } from './telegramApi.js';
import { askCloudflareAI } from './ai.js';

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserAnalytics {
  constructor(chatId) {
    this.chatId = chatId;
    this.totalSessions = 0;
    this.totalQuestions = 0;
    this.correctAnswers = 0;
    this.categoryPerformance = new Map(); // –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    this.questionTypePerformance = new Map(); // –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
    this.learningStreak = 0; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    this.averageSessionTime = 0; // —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    this.lastSessionDate = null;
    this.weakCategories = []; // –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –æ—à–∏–±–∫–∏
    this.strongCategories = []; // –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–ª–µ–Ω
    this.recommendedTopics = []; // —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
  updateAnswerStats(category, questionType, isCorrect, timeSpent = 0) {
    this.totalQuestions++;
    if (isCorrect) {
      this.correctAnswers++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (!this.categoryPerformance.has(category)) {
      this.categoryPerformance.set(category, { correct: 0, total: 0, avgTime: 0 });
    }
    const catStats = this.categoryPerformance.get(category);
    catStats.total++;
    if (isCorrect) catStats.correct++;
    catStats.avgTime = (catStats.avgTime * (catStats.total - 1) + timeSpent) / catStats.total;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
    if (!this.questionTypePerformance.has(questionType)) {
      this.questionTypePerformance.set(questionType, { correct: 0, total: 0 });
    }
    const typeStats = this.questionTypePerformance.get(questionType);
    typeStats.total++;
    if (isCorrect) typeStats.correct++;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–±—ã–µ –∏ —Å–∏–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    this.updateCategoryStrengths();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  updateCategoryStrengths() {
    this.weakCategories = [];
    this.strongCategories = [];

    for (const [category, stats] of this.categoryPerformance) {
      const accuracy = stats.total > 0 ? stats.correct / stats.total : 0;
      
      if (accuracy < 0.6 && stats.total >= 3) {
        this.weakCategories.push(category);
      } else if (accuracy > 0.8 && stats.total >= 5) {
        this.strongCategories.push(category);
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
  getOverallAccuracy() {
    return this.totalQuestions > 0 ? this.correctAnswers / this.totalQuestions : 0;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getCategoryAccuracy(category) {
    const stats = this.categoryPerformance.get(category);
    return stats && stats.total > 0 ? stats.correct / stats.total : 0;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations() {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–∞–±—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (this.weakCategories.length > 0) {
      recommendations.push({
        type: 'weak_category',
        message: `üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${this.weakCategories.join(', ')}`,
        priority: 'high'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const accuracy = this.getOverallAccuracy();
    if (accuracy < 0.7) {
      recommendations.push({
        type: 'general_improvement',
        message: 'üéØ –í–∞—à–∞ –æ–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 70%. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è.',
        priority: 'medium'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –æ–±—É—á–µ–Ω–∏—è
    const daysSinceLastSession = this.lastSessionDate ? 
      (Date.now() - this.lastSessionDate) / (1000 * 60 * 60 * 24) : 999;
    
    if (daysSinceLastSession > 7) {
      recommendations.push({
        type: 'frequency',
        message: '‚è∞ –í—ã –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
        priority: 'medium'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (accuracy > 0.85 && this.totalQuestions > 20) {
      recommendations.push({
        type: 'advanced',
        message: 'üèÜ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.',
        priority: 'low'
      });
    }

    return recommendations.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userAnalytics = new Map();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserAnalytics(chatId) {
  if (!userAnalytics.has(chatId)) {
    userAnalytics.set(chatId, new UserAnalytics(chatId));
  }
  return userAnalytics.get(chatId);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
export async function generatePersonalizedReport(chatId, env) {
  const analytics = getUserAnalytics(chatId);
  const wines = await getWineData(env);
  
  let report = `üìä *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n`;
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const accuracy = analytics.getOverallAccuracy();
  report += `üéØ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
  report += `‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${analytics.totalQuestions}\n`;
  report += `‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${analytics.correctAnswers}\n`;
  report += `‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ${Math.round(accuracy * 100)}%\n`;
  report += `‚Ä¢ –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: ${analytics.totalSessions}\n\n`;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  if (analytics.categoryPerformance.size > 0) {
    report += `üìö *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n`;
    for (const [category, stats] of analytics.categoryPerformance) {
      const catAccuracy = stats.correct / stats.total;
      const emoji = catAccuracy > 0.8 ? 'üü¢' : catAccuracy > 0.6 ? 'üü°' : 'üî¥';
      report += `${emoji} ${category}: ${stats.correct}/${stats.total} (${Math.round(catAccuracy * 100)}%)\n`;
    }
    report += '\n';
  }
  
  // –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
  if (analytics.strongCategories.length > 0) {
    report += `üí™ *–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
    analytics.strongCategories.forEach(category => {
      report += `‚Ä¢ ${category}\n`;
    });
    report += '\n';
  }
  
  if (analytics.weakCategories.length > 0) {
    report += `üìñ *–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:*\n`;
    analytics.weakCategories.forEach(category => {
      report += `‚Ä¢ ${category}\n`;
    });
    report += '\n';
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations = analytics.generateRecommendations();
  if (recommendations.length > 0) {
    report += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
    recommendations.forEach(rec => {
      report += `‚Ä¢ ${rec.message}\n`;
    });
  }
  
  return report;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò
export async function generatePersonalizedAIQuestion(chatId, env) {
  const analytics = getUserAnalytics(chatId);
  const wines = await getWineData(env);
  
  // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let targetCategory = null;
  if (analytics.weakCategories.length > 0) {
    targetCategory = analytics.weakCategories[Math.floor(Math.random() * analytics.weakCategories.length)];
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–∞–±—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
    const categories = [...new Set(wines.map(w => w.category))];
    targetCategory = categories[Math.floor(Math.random() * categories.length)];
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–Ω–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryWines = wines.filter(w => w.category === targetCategory);
  if (categoryWines.length === 0) {
    return null;
  }
  
  const randomWine = categoryWines[Math.floor(Math.random() * categoryWines.length)];
  
  // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
  const accuracy = analytics.getOverallAccuracy();
  const difficulty = accuracy > 0.8 ? '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' : accuracy > 0.6 ? '—Å—Ä–µ–¥–Ω–∏–π' : '–Ω–∞—á–∞–ª—å–Ω—ã–π';
  
  const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Å–æ–º–µ–ª—å–µ, —Å–æ–∑–¥–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.

–°–æ–∑–¥–∞–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ: ${randomWine.name}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${randomWine.category}
${randomWine.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${randomWine.description}` : ''}
${randomWine.country ? `–°—Ç—Ä–∞–Ω–∞: ${randomWine.country}` : ''}
${randomWine.alcohol ? `–ö—Ä–µ–ø–æ—Å—Ç—å: ${randomWine.alcohol}` : ''}
${randomWine.sugar ? `–°–∞—Ö–∞—Ä: ${randomWine.sugar}` : ''}
${randomWine.method ? `–ú–µ—Ç–æ–¥: ${randomWine.method}` : ''}
${randomWine.glassware ? `–ü–æ—Å—É–¥–∞: ${randomWine.glassware}` : ''}
${randomWine.ingredients ? `–°–æ—Å—Ç–∞–≤: ${randomWine.ingredients}` : ''}

–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${difficulty}
–¶–µ–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${targetCategory}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ):
–í–û–ü–†–û–°: [–≤–æ–ø—Ä–æ—Å]
A) [–≤–∞—Ä–∏–∞–Ω—Ç A]
B) [–≤–∞—Ä–∏–∞–Ω—Ç B]
C) [–≤–∞—Ä–∏–∞–Ω—Ç C]
D) [–≤–∞—Ä–∏–∞–Ω—Ç D]
–ü–†–ê–í–ò–õ–¨–ù–´–ô: [–±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]
–û–ë–™–Ø–°–ù–ï–ù–ò–ï: [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç]

–°–¥–µ–ª–∞–π –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.`;

  try {
    const aiResponse = await askCloudflareAI(prompt, env);
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò
    const lines = aiResponse.split('\n');
    let question = '';
    let options = {};
    let correctAnswer = '';
    let explanation = '';
    
    for (let line of lines) {
      line = line.trim();
      if (line.startsWith('–í–û–ü–†–û–°:')) {
        question = line.replace('–í–û–ü–†–û–°:', '').trim();
      } else if (line.startsWith('A)')) {
        options.A = line.replace('A)', '').trim();
      } else if (line.startsWith('B)')) {
        options.B = line.replace('B)', '').trim();
      } else if (line.startsWith('C)')) {
        options.C = line.replace('C)', '').trim();
      } else if (line.startsWith('D)')) {
        options.D = line.replace('D)', '').trim();
      } else if (line.startsWith('–ü–†–ê–í–ò–õ–¨–ù–´–ô:')) {
        correctAnswer = line.replace('–ü–†–ê–í–ò–õ–¨–ù–´–ô:', '').trim();
      } else if (line.startsWith('–û–ë–™–Ø–°–ù–ï–ù–ò–ï:')) {
        explanation = line.replace('–û–ë–™–Ø–°–ù–ï–ù–ò–ï:', '').trim();
      }
    }
    
    if (question && Object.keys(options).length === 4 && correctAnswer && explanation) {
      return {
        question,
        options,
        correctAnswer,
        explanation,
        wineId: randomWine.id,
        wineName: randomWine.name,
        category: targetCategory,
        difficulty
      };
    }
  } catch (error) {
    console.error('Error generating personalized AI question:', error);
  }
  
  return null;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
export function updateAnalytics(chatId, category, questionType, isCorrect, timeSpent = 0) {
  const analytics = getUserAnalytics(chatId);
  analytics.updateAnswerStats(category, questionType, isCorrect, timeSpent);
  analytics.lastSessionDate = Date.now();
}

// –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
export function startLearningSession(chatId) {
  const analytics = getUserAnalytics(chatId);
  analytics.totalSessions++;
  analytics.lastSessionDate = Date.now();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function getRecommendations(chatId) {
  const analytics = getUserAnalytics(chatId);
  return analytics.generateRecommendations();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
export async function showDetailedAnalytics(chatId, env) {
  const analytics = getUserAnalytics(chatId);
  
  let analyticsText = `üìà *–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è*\n\n`;
  
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  if (analytics.lastSessionDate) {
    const daysSinceLastSession = Math.floor((Date.now() - analytics.lastSessionDate) / (1000 * 60 * 60 * 24));
    analyticsText += `‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: ${daysSinceLastSession} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n`;
  }
  
  analyticsText += `üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${analytics.totalSessions}\n`;
  analyticsText += `üéØ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${Math.round(analytics.getOverallAccuracy() * 100)}%\n`;
  analyticsText += `üî• –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${analytics.learningStreak} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n\n`;
  
  // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  if (analytics.categoryPerformance.size > 0) {
    const categoryChart = createCategoryProgressChart(analytics);
    analyticsText += categoryChart + '\n';
  }
  
  // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
  if (analytics.questionTypePerformance.size > 0) {
    const typeChart = createQuestionTypeProgressChart(analytics);
    analyticsText += typeChart + '\n';
  }
  
  // –ì—Ä–∞—Ñ–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const weeklyChart = createWeeklyProgressChart(analytics);
  analyticsText += weeklyChart + '\n';
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations = analytics.generateRecommendations();
  if (recommendations.length > 0) {
    analyticsText += `üí° *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
    recommendations.forEach(rec => {
      analyticsText += `‚Ä¢ ${rec.message}\n`;
    });
  }
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç', callback_data: 'learning_personalized_test' },
        { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'learning_export_data' }
      ],
      [
        { text: 'üìà –ì—Ä–∞—Ñ–∏–∫–∏', callback_data: 'learning_charts' },
        { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'learning_achievements' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'learning_start' }
      ]
    ]
  };
  
  await sendMessageWithKeyboard(chatId, analyticsText, keyboard, env);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
function getQuestionTypeName(type) {
  const typeNames = {
    'wine_pairing': '–°–æ—á–µ—Ç–∞–Ω–∏–µ —Å –±–ª—é–¥–∞–º–∏',
    'serving_temp': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–∞—á–∏',
    'glassware': '–í—ã–±–æ—Ä –±–æ–∫–∞–ª–æ–≤',
    'description': '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞',
    'country': '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è',
    'alcohol_content': '–ö—Ä–µ–ø–æ—Å—Ç—å',
    'ingredients': '–°–æ—Å—Ç–∞–≤',
    'method': '–ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'
  };
  return typeNames[type] || type;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function exportUserData(chatId) {
  const analytics = getUserAnalytics(chatId);
  
  const exportData = {
    chatId: analytics.chatId,
    totalSessions: analytics.totalSessions,
    totalQuestions: analytics.totalQuestions,
    correctAnswers: analytics.correctAnswers,
    overallAccuracy: analytics.getOverallAccuracy(),
    categoryPerformance: Object.fromEntries(analytics.categoryPerformance),
    questionTypePerformance: Object.fromEntries(analytics.questionTypePerformance),
    weakCategories: analytics.weakCategories,
    strongCategories: analytics.strongCategories,
    learningStreak: analytics.learningStreak,
    lastSessionDate: analytics.lastSessionDate,
    exportDate: new Date().toISOString()
  };
  
  return JSON.stringify(exportData, null, 2);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export function createProgressChart(data, title, maxValue = 100) {
  const chartWidth = 20;
  const filledChar = '‚ñà';
  const emptyChar = '‚ñë';
  
  let chart = `üìä *${title}*\n`;
  chart += '‚îå' + '‚îÄ'.repeat(chartWidth + 2) + '‚îê\n';
  
  for (const [label, value] of Object.entries(data)) {
    const percentage = Math.min((value / maxValue) * 100, 100);
    const filledWidth = Math.round((percentage / 100) * chartWidth);
    const emptyWidth = chartWidth - filledWidth;
    
    const bar = filledChar.repeat(filledWidth) + emptyChar.repeat(emptyWidth);
    const percentageText = Math.round(percentage).toString().padStart(3);
    
    chart += `‚îÇ ${bar} ‚îÇ ${percentageText}%\n`;
  }
  
  chart += '‚îî' + '‚îÄ'.repeat(chartWidth + 2) + '‚îò\n';
  return chart;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
export function createCategoryProgressChart(analytics) {
  const categoryData = {};
  
  for (const [category, stats] of analytics.categoryPerformance) {
    const accuracy = stats.total > 0 ? (stats.correct / stats.total) * 100 : 0;
    categoryData[category] = accuracy;
  }
  
  return createProgressChart(categoryData, '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
export function createQuestionTypeProgressChart(analytics) {
  const typeData = {};
  
  for (const [type, stats] of analytics.questionTypePerformance) {
    const accuracy = stats.total > 0 ? (stats.correct / stats.total) * 100 : 0;
    const typeName = getQuestionTypeName(type);
    typeData[typeName] = accuracy;
  }
  
  return createProgressChart(typeData, '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export function createWeeklyProgressChart(analytics) {
  // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å—Å—è –∏–∑ –ë–î)
  const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  const weeklyData = {};
  
  weekDays.forEach(day => {
    weeklyData[day] = Math.random() * 100; // –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
  });
  
  return createProgressChart(weeklyData, '–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é');
} 
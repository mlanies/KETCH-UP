// –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ú–µ–Ω—é" (–∫–æ–∫—Ç–µ–π–ª–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∏)

import { sendMessage, sendMessageWithKeyboard, editMessage } from './telegramApi.js';
import { getWineData } from './data.js';
import { getCategoryName } from '../utils/categories.js';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ú–µ–Ω—é"
export async function handleMenuSection(chatId, messageId, env) {
  const menuText = `üçπ *–ö–æ–∫—Ç–µ–π–ª–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–∫—Ç–µ–π–ª–µ–π –∏ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üç∏ –ö–æ–∫—Ç–µ–π–ª–∏', callback_data: 'category_cocktails' },
        { text: 'ü•§ –ú–∏–∫—Å –¥—Ä–∏–Ω–∫', callback_data: 'category_mix_drinks' }
      ],
      [
        { text: 'üçã –õ–∏–º–æ–Ω–∞–¥—ã –∏ –ú–∏–ª–∫—à–µ–π–∫–∏', callback_data: 'category_lemonades_milkshakes' },
        { text: '‚òï –ö–æ—Ñ–µ', callback_data: 'category_coffee' }
      ],
      [
        { text: 'üçµ –ß–∞–π', callback_data: 'category_tea' },
        { text: 'üçØ –ü—Ä–µ–º–∏–∫—Å—ã', callback_data: 'category_premixes' }
      ],
      [
        { text: 'üìã –ü–§', callback_data: 'category_pf' },
        { text: '‚ùå –Ω–µ—Ç –≤ –º–µ–Ω—é', callback_data: 'category_not_in_menu' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
      ]
    ]
  };

  try {
    await editMessage(chatId, messageId, menuText, keyboard, env);
  } catch (e) {
    await sendMessageWithKeyboard(chatId, menuText, keyboard, env);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π
export async function handleCocktailCategorySelection(data, chatId, messageId, env) {
  const categoryType = data.replace('category_', '');
  console.log('Cocktail category selection:', categoryType);
  
  const wines = await getWineData(env);
  console.log('Drinks loaded:', wines ? wines.length : 0);
  
  if (!wines || wines.length === 0) {
    await sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', env);
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–∏–ø—É
  const categoryName = getCategoryName(categoryType);
  if (!categoryName) {
    await sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.', env);
    return;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryDrinks = wines.filter(drink => drink.category === categoryName);
  console.log(`Found ${categoryDrinks.length} drinks in category: ${categoryName}`);

  if (categoryDrinks.length === 0) {
    await sendMessage(chatId, `–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–∏—Ç–∫–æ–≤.`, env);
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–∞–ø–∏—Ç–∫–æ–≤
  const drinksToShow = categoryDrinks.slice(0, 10);
  
  const keyboard = {
    inline_keyboard: drinksToShow.map(drink => [
      { text: drink.name, callback_data: drink.id }
    ]).concat([
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'section_menu' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ])
  };

  const message = `üçπ –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" (${categoryDrinks.length} —à—Ç.):\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:`;

  try {
    await editMessage(chatId, messageId, message, keyboard, env);
  } catch (e) {
    await sendMessageWithKeyboard(chatId, message, keyboard, env);
  }
}

// –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
// - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥ (–∑–∞–∫—É—Å–∫–∏, –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞, –¥–µ—Å–µ—Ä—Ç—ã)
// - –û–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥
// - –¶–µ–Ω—ã
// - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∞—á–µ
// - –ê–ª–ª–µ—Ä–≥–µ–Ω—ã
// - –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å 
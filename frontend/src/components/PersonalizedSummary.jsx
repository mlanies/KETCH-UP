import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getTelegramUser } from '../utils/telegram';
import { 
  fetchUserStats, 
  fetchUserAchievements, 
  startQuickTest,
  fetchCategories,
  askAI,
  getUserAchievements
} from '../utils/api';
import LoadingSpinner from './LoadingSpinner';
import ErrorMessage from './ErrorMessage';

const PersonalizedSummary = ({ chatId, userStats, achievements, dailyChallenges }) => {
  const [motivationData, setMotivationData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [actionLoading, setActionLoading] = useState({});
  const [user, setUser] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    if (chatId) {
      loadMotivationData();
    } else {
      const telegramUser = getTelegramUser();
      if (telegramUser?.chat_id) {
        setUser(telegramUser);
        loadMotivationData(telegramUser.chat_id);
      } else {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
        setLoading(false);
      }
    }
  }, [chatId]);

  const loadMotivationData = async (userId = chatId) => {
    try {
      setLoading(true);
      const response = await fetch('https://telegram-wine-bot.2gc.workers.dev/motivation/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ chatId: userId })
      });

      if (!response.ok) {
        throw new Error('Failed to load motivation data');
      }

      const data = await response.json();
      if (data.success) {
        setMotivationData(data.data);
      } else {
        throw new Error(data.error || 'Failed to analyze motivation');
      }
    } catch (error) {
      console.error('Error loading motivation data:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const handleQuickTest = async () => {
    if (!user?.chat_id) return;
    
    setActionLoading(prev => ({ ...prev, quickTest: true }));
    try {
      const response = await startQuickTest(user.chat_id);
      if (response.success) {
        navigate('/quick-test');
      } else {
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: ' + (response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      }
    } catch (error) {
      console.error('Error starting quick test:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞');
    } finally {
      setActionLoading(prev => ({ ...prev, quickTest: false }));
    }
  };

  const handleStudyCategory = async () => {
    if (!user?.chat_id) return;
    
    setActionLoading(prev => ({ ...prev, studyCategory: true }));
    try {
      const response = await fetchCategories();
      if (response.success) {
        navigate('/category-test');
      } else {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + (response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      }
    } catch (error) {
      console.error('Error loading categories:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    } finally {
      setActionLoading(prev => ({ ...prev, studyCategory: false }));
    }
  };

  const handleAIChat = async () => {
    if (!user?.chat_id) return;
    
    setActionLoading(prev => ({ ...prev, aiChat: true }));
    try {
      navigate('/learning');
    } catch (error) {
      console.error('Error opening AI chat:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è AI —á–∞—Ç–∞');
    } finally {
      setActionLoading(prev => ({ ...prev, aiChat: false }));
    }
  };

  const handleAchievements = async () => {
    if (!user?.chat_id) return;
    
    setActionLoading(prev => ({ ...prev, achievements: true }));
    try {
      const response = await getUserAchievements(user.chat_id);
      if (response.success) {
        navigate('/achievements');
      } else {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ' + (response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      }
    } catch (error) {
      console.error('Error loading achievements:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    } finally {
      setActionLoading(prev => ({ ...prev, achievements: false }));
    }
  };

  if (loading) {
    return (
      <div className="card animate-pulse">
        <div className="flex items-center space-x-3 mb-4">
          <div className="w-12 h-12 bg-slate-600 rounded-full"></div>
          <div className="flex-1">
            <div className="h-4 bg-slate-600 rounded mb-2"></div>
            <div className="h-3 bg-slate-600 rounded w-2/3"></div>
          </div>
        </div>
        <div className="space-y-2">
          <div className="h-3 bg-slate-600 rounded"></div>
          <div className="h-3 bg-slate-600 rounded w-4/5"></div>
          <div className="h-3 bg-slate-600 rounded w-3/4"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="card border-red-500/30 bg-red-900/20">
        <div className="flex items-center space-x-3 mb-4">
          <div className="w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center">
            <span className="text-red-400 text-xl">‚ö†Ô∏è</span>
          </div>
          <div>
            <h3 className="font-semibold text-red-300">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
            <p className="text-sm text-red-400">{error}</p>
          </div>
        </div>
        <button 
          onClick={() => loadMotivationData()}
          className="text-sm text-red-400 hover:text-red-300 underline"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  if (!motivationData) {
    return null;
  }

  const { motivation, analysis, rewards } = motivationData;
  const { user: userData } = userStats || {};

  const getMotivationIcon = (type) => {
    switch (type) {
      case 'praise': return 'üèÜ';
      case 'encouragement': return 'üí™';
      case 'challenge': return 'üéØ';
      case 'reminder': return '‚è∞';
      case 'motivation': return 'üåü';
      default: return 'üí¨';
    }
  };

  const getMotivationColor = (type) => {
    switch (type) {
      case 'praise': return 'from-yellow-500/20 to-orange-500/20 border-yellow-500/30';
      case 'encouragement': return 'from-blue-500/20 to-indigo-500/20 border-blue-500/30';
      case 'challenge': return 'from-purple-500/20 to-pink-500/20 border-purple-500/30';
      case 'reminder': return 'from-slate-500/20 to-gray-500/20 border-slate-500/30';
      case 'motivation': return 'from-green-500/20 to-emerald-500/20 border-green-500/30';
      default: return 'from-wine-500/20 to-pink-500/20 border-wine-500/30';
    }
  };

  const getProgressEmoji = (score) => {
    if (score >= 80) return 'üöÄ';
    if (score >= 60) return 'üìà';
    if (score >= 40) return 'üìä';
    return 'üìâ';
  };

  return (
    <div className="space-y-4">
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      <div className={`card bg-gradient-to-r ${getMotivationColor(motivation.type)}`}>
        <div className="flex items-start space-x-4">
          <div className="text-3xl">{getMotivationIcon(motivation.type)}</div>
          <div className="flex-1">
            <h3 className="font-semibold text-lg mb-2 text-white">
              {motivation.type === 'praise' && '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'}
              {motivation.type === 'encouragement' && '–î–µ—Ä–∂–∏–º –∫—É—Ä—Å!'}
              {motivation.type === 'challenge' && '–ù–æ–≤—ã–π –≤—ã–∑–æ–≤!'}
              {motivation.type === 'reminder' && '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'}
              {motivation.type === 'motivation' && '–ú–æ—Ç–∏–≤–∞—Ü–∏—è'}
            </h3>
            <p className="text-slate-200 leading-relaxed">
              {motivation.text}
            </p>
          </div>
        </div>
      </div>

      {/* –ù–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã */}
      {rewards && rewards.length > 0 && (
        <div className="card bg-gradient-to-r from-yellow-500/20 to-amber-500/20 border-yellow-500/30">
          <h4 className="font-semibold text-yellow-300 mb-3 flex items-center">
            <span className="mr-2">üéÅ</span>
            –ù–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!
          </h4>
          <div className="space-y-2">
            {rewards.map((reward, index) => (
              <div key={index} className="flex items-center space-x-3 p-3 bg-slate-800/50 rounded-lg border border-yellow-500/30">
                <span className="text-2xl">{reward.data?.icon || 'üèÜ'}</span>
                <div className="flex-1">
                  <div className="font-medium text-white">{reward.name}</div>
                  <div className="text-sm text-slate-300">{reward.description}</div>
                </div>
                <button className="px-3 py-1 bg-yellow-500 text-white text-sm rounded-lg hover:bg-yellow-600 transition-colors">
                  –ü–æ–ª—É—á–∏—Ç—å
                </button>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default PersonalizedSummary; 
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getTelegramUser } from '../utils/telegram';
import { fetchDailyChallenges } from '../utils/api';
import LoadingSpinner from './LoadingSpinner';
import ErrorMessage from './ErrorMessage';

export default function DailyChallenges() {
  const [challenges, setChallenges] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [user, setUser] = useState(null);
  const [activeTab, setActiveTab] = useState('daily');
  
  const navigate = useNavigate();

  useEffect(() => {
    const loadChallenges = async () => {
      try {
        setLoading(true);
        const telegramUser = getTelegramUser();
        setUser(telegramUser);
        
        if (!telegramUser?.chat_id) {
          setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
          setLoading(false);
          return;
        }

        const challengesResponse = await fetchDailyChallenges(telegramUser.chat_id);
        if (challengesResponse.success) {
          setChallenges(challengesResponse.data || []);
        } else {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
        }
      } catch (error) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        console.error('Error loading challenges:', error);
      } finally {
        setLoading(false);
      }
    };

    loadChallenges();
  }, []);

  const getChallengeIcon = (challengeType) => {
    const icons = {
      'daily_questions': 'üéØ',
      'daily_streak': 'üî•',
      'daily_category': 'üìö',
      'daily_accuracy': 'üéØ',
      'daily_ai': 'ü§ñ',
      'quick_test': '‚ö°',
      'category_study': 'üìñ',
      'ai_consultation': 'üí¨'
    };
    return icons[challengeType] || 'üìã';
  };

  const getChallengeColor = (isCompleted) => {
    return isCompleted 
      ? 'bg-green-900/30 border-green-500/30' 
      : 'bg-slate-700/30 border-slate-600/50';
  };

  const getProgressColor = (progress, target) => {
    const percentage = (progress / target) * 100;
    if (percentage >= 100) return 'bg-green-500';
    if (percentage >= 70) return 'bg-yellow-500';
    if (percentage >= 40) return 'bg-orange-500';
    return 'bg-red-500';
  };

  const handleChallengeClick = (challenge) => {
    if (challenge.is_completed) return;

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
    switch (challenge.challenge_type) {
      case 'quick_test':
        navigate('/quick-test');
        break;
      case 'category_study':
        navigate('/category-test');
        break;
      case 'ai_consultation':
        navigate('/learning');
        break;
      default:
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        alert(`–ó–∞–¥–∞–Ω–∏–µ: ${challenge.challenge_name}\n\n${challenge.description}\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: ${challenge.current_progress || 0}/${challenge.target_value || 1}`);
    }
  };

  const filterChallenges = (type) => {
    if (type === 'all') return challenges;
    if (type === 'daily') return challenges.filter(c => c.challenge_type?.startsWith('daily_'));
    if (type === 'weekly') return challenges.filter(c => c.challenge_type?.startsWith('weekly_'));
    if (type === 'special') return challenges.filter(c => !c.challenge_type?.startsWith('daily_') && !c.challenge_type?.startsWith('weekly_'));
    return challenges;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6">
        <ErrorMessage 
          message={error} 
          onRetry={() => window.location.reload()} 
        />
      </div>
    );
  }

  const filteredChallenges = filterChallenges(activeTab);
  const completedChallenges = challenges.filter(c => c.is_completed).length;
  const totalChallenges = challenges.length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6">
      <div className="max-w-2xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold mb-2">üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h1>
          <p className="text-slate-300">–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã</p>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="card mb-6">
          <div className="grid grid-cols-3 gap-4">
            <div className="text-center p-3 bg-slate-700/50 rounded-lg">
              <div className="text-2xl font-bold text-wine-400">{totalChallenges}</div>
              <div className="text-xs text-slate-400">–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π</div>
            </div>
            <div className="text-center p-3 bg-slate-700/50 rounded-lg">
              <div className="text-2xl font-bold text-green-400">{completedChallenges}</div>
              <div className="text-xs text-slate-400">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
            </div>
            <div className="text-center p-3 bg-slate-700/50 rounded-lg">
              <div className="text-2xl font-bold text-wine-400">
                {totalChallenges > 0 ? Math.round((completedChallenges / totalChallenges) * 100) : 0}%
              </div>
              <div className="text-xs text-slate-400">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
            </div>
          </div>
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="card mb-6">
          <div className="flex gap-2 mb-4">
            <button
              onClick={() => setActiveTab('all')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all duration-200 ${
                activeTab === 'all' 
                  ? 'bg-wine-500 text-white' 
                  : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600/50'
              }`}
            >
              –í—Å–µ
            </button>
            <button
              onClick={() => setActiveTab('daily')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all duration-200 ${
                activeTab === 'daily' 
                  ? 'bg-wine-500 text-white' 
                  : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600/50'
              }`}
            >
              –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ
            </button>
            <button
              onClick={() => setActiveTab('weekly')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all duration-200 ${
                activeTab === 'weekly' 
                  ? 'bg-wine-500 text-white' 
                  : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600/50'
              }`}
            >
              –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ
            </button>
            <button
              onClick={() => setActiveTab('special')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all duration-200 ${
                activeTab === 'special' 
                  ? 'bg-wine-500 text-white' 
                  : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600/50'
              }`}
            >
              –û—Å–æ–±—ã–µ
            </button>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π */}
        <div className="space-y-4">
          {filteredChallenges.length === 0 ? (
            <div className="card text-center py-8">
              <div className="text-4xl mb-4">üì≠</div>
              <div className="text-lg font-medium mb-2">–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π</div>
              <div className="text-slate-400">–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π</div>
            </div>
          ) : (
            filteredChallenges.map((challenge, index) => (
              <div
                key={index}
                onClick={() => handleChallengeClick(challenge)}
                className={`card cursor-pointer transition-all duration-200 hover:scale-[1.02] ${getChallengeColor(challenge.is_completed)}`}
              >
                <div className="flex items-start gap-4">
                  <div className="text-2xl">
                    {getChallengeIcon(challenge.challenge_type)}
                  </div>
                  
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h3 className="font-medium text-sm">{challenge.challenge_name}</h3>
                      {challenge.is_completed && (
                        <span className="text-xs bg-green-500/20 text-green-400 px-2 py-1 rounded">
                          ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                        </span>
                      )}
                    </div>
                    
                    <p className="text-xs text-slate-400 mb-3">
                      {challenge.description}
                    </p>
                    
                    {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                    <div className="mb-3">
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-xs text-slate-400">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                        <span className="text-xs text-slate-400">
                          {challenge.current_progress || 0}/{challenge.target_value || 1}
                        </span>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-2">
                        <div
                          className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(challenge.current_progress || 0, challenge.target_value || 1)}`}
                          style={{
                            width: `${Math.min(((challenge.current_progress || 0) / (challenge.target_value || 1)) * 100, 100)}%`
                          }}
                        ></div>
                      </div>
                    </div>
                    
                    {/* –ù–∞–≥—Ä–∞–¥—ã */}
                    <div className="flex items-center gap-4 text-xs">
                      <div className="flex items-center gap-1">
                        <span className="text-wine-400">üíé</span>
                        <span className="text-slate-300">+{challenge.reward_points || 0} –æ—á–∫–æ–≤</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <span className="text-yellow-400">‚≠ê</span>
                        <span className="text-slate-300">+{challenge.reward_experience || 0} XP</span>
                      </div>
                    </div>
                  </div>
                  
                  {!challenge.is_completed && (
                    <div className="text-xs text-slate-400">
                      {challenge.created_date ? new Date(challenge.created_date).toLocaleDateString('ru-RU') : '–°–µ–≥–æ–¥–Ω—è'}
                    </div>
                  )}
                </div>
              </div>
            ))
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
        <div className="mt-8">
          <button 
            onClick={() => navigate('/')}
            className="btn-secondary w-full"
          >
            üîô –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    </div>
  );
} 
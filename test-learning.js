// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è

import { startLearning, handleLearningCallback } from './src/handlers/learning.js';
import { generatePersonalizedReport, updateAnalytics, startLearningSession } from './src/handlers/learningAnalytics.js';

// –ú–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockEnv = {
  CLOUDFLARE_ACCOUNT_ID: 'mock_account_id_for_testing',
  CLOUDFLARE_AI_TOKEN: 'mock_ai_token_for_testing',
  GOOGLE_SHEETS_API_KEY: 'mock_api_key_for_testing',
  GOOGLE_SHEETS_SPREADSHEET_ID: 'mock_spreadsheet_id_for_testing',
  DB: null // –ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
};

// –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const mockSendMessage = async (chatId, message) => {
  console.log(`[MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`);
  console.log(message);
  console.log('---');
};

const mockSendMessageWithKeyboard = async (chatId, message, keyboard) => {
  console.log(`[MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ —á–∞—Ç ${chatId}:`);
  console.log(message);
  console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', JSON.stringify(keyboard, null, 2));
  console.log('---');
};

// –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
global.sendMessage = mockSendMessage;
global.sendMessageWithKeyboard = mockSendMessageWithKeyboard;

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testLearningSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è...\n');
  
  const testChatId = 123456789;
  
  try {
    // –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è
    console.log('üìù –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è');
    await startLearning(testChatId, mockEnv);
    
    // –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    console.log('\nüìä –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞');
    startLearningSession(testChatId);
    updateAnalytics(testChatId, '–í–∏–Ω–∞', 'wine_pairing', true);
    updateAnalytics(testChatId, '–ö–æ–∫—Ç–µ–π–ª–∏', 'method', false);
    updateAnalytics(testChatId, '–í–∏–Ω–∞', 'serving_temp', true);
    
    const report = await generatePersonalizedReport(testChatId, mockEnv);
    console.log('–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:');
    console.log(report);
    
    // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
    console.log('\nüîÑ –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query');
    await handleLearningCallback('learning_quick_test', testChatId, 1, mockEnv);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  testLearningSystem();
}

export { testLearningSystem }; 